{
	"dados_cat":{
		"versao":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_basicas":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_basicas",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_basicas",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_basicas AS
    PROCEDURE log (
        texto VARCHAR2
    );


    PROCEDURE msgfim (
        erroexiste   NUMBER,
        msgerro      VARCHAR2,
        msgsucesso   VARCHAR2
    );


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_basicas;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_basicas AS


    PROCEDURE log (
        texto VARCHAR2
    ) AS
        texto_mostrar VARCHAR2(32767);
    BEGIN
        dbms_output.enable();
        texto_mostrar := to_char(sysdate, 'DD/MM/YYYY HH24:MI:SS')
                            || ' - '
                            || texto;
        dbms_output.put_line(texto_mostrar);
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END log;


    PROCEDURE msgfim (
        erroexiste   NUMBER,
        msgerro      VARCHAR2,
        msgsucesso   VARCHAR2
    ) AS
    BEGIN
        IF erroexiste > 0 THEN
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_basicas.log(msgerro);
        ELSE
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_basicas.log(msgsucesso);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END msgfim;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_basicas;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro AS
    FUNCTION erro (
        pkg              VARCHAR2,
        proc             VARCHAR2,
        cod              NUMBER,
        msg              VARCHAR2,
        erro_formatado   VARCHAR2 DEFAULT NULL,
        codigosql        VARCHAR2 DEFAULT NULL
    ) RETURN VARCHAR2;


    PROCEDURE mostrar_erro (
        p_msg             VARCHAR2 DEFAULT NULL,
        p_msg_formatada   VARCHAR2 DEFAULT NULL,
        p_unit            VARCHAR2 DEFAULT NULL,
        p_line            NUMBER DEFAULT NULL,
        p_comando_sql     VARCHAR2 DEFAULT NULL,
        p_texto           VARCHAR2 DEFAULT NULL
    );


    PROCEDURE inserir_erro (
        p_msg     VARCHAR2 DEFAULT NULL,
        p_vlrs    VARCHAR2 DEFAULT NULL,
        p_linha   INTEGER DEFAULT NULL,
        p_destinatariosemail   VARCHAR2 DEFAULT NULL
    );


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro AS


    strtemp1    VARCHAR2(4000) DEFAULT NULL;
    numtemp1    NUMBER default NULL;
    datetemp1   DATE default NULL;


    FUNCTION erro (
        pkg              VARCHAR2,
        proc             VARCHAR2,
        cod              NUMBER,
        msg              VARCHAR2,
        erro_formatado   VARCHAR2 DEFAULT NULL,
        codigosql        VARCHAR2 DEFAULT NULL
    ) RETURN VARCHAR2 AS
    BEGIN
        RETURN 'Erro encontrado: '
                || chr(10)
                || '   Local:'
                || pkg
                || '.'
                || proc
                || chr(10)
                || '   Codigo:'
                || cod
                || chr(10)
                || '   Mensagem:'
                || msg
                || chr(10)
                || '   Erro formatado:'
                || erro_formatado
                || '   SQL:'
                || codigosql;
    END erro;


    PROCEDURE mostrar_erro (
        p_msg             VARCHAR2 DEFAULT NULL,
        p_msg_formatada   VARCHAR2 DEFAULT NULL,
        p_unit            VARCHAR2 DEFAULT NULL,
        p_line            NUMBER DEFAULT NULL,
        p_comando_sql     VARCHAR2 DEFAULT NULL,
        p_texto           VARCHAR2 DEFAULT NULL
    ) AS
    BEGIN
        dbms_output.put_line('Erro encontrado '
                                || chr(10)
                                || 'Mensagem          : '
                                || p_msg
                                || chr(10)
                                || 'Mensagem Formatada: '
                                || p_msg_formatada
                                || chr(10)
                                || 'Unidade           : '
                                || p_unit
                                || chr(10)
                                || 'Linha             : '
                                || p_line
                                || chr(10)
                                || 'Comando Sql       : '
                                || p_comando_sql
                                || chr(10)
                                || 'Texto             : '
                                || p_texto);
    END mostrar_erro;


    PROCEDURE inserir_erro (
        p_msg     VARCHAR2 DEFAULT NULL,
        p_vlrs    VARCHAR2 DEFAULT NULL,
        p_linha   INTEGER DEFAULT NULL,
        p_destinatariosemail   VARCHAR2 DEFAULT NULL
    ) AS


        PRAGMA autonomous_transaction;
        c_lim_erro_seg    CONSTANT INTEGER := 1;
        c_lim_erro_min    CONSTANT INTEGER := 10;
        c_lim_erro_hora   CONSTANT INTEGER := 100;
        v_ler             __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__erros%rowtype default NULL;
        v_qt              INTEGER default NULL;
        v_permitido       BOOLEAN DEFAULT true;
    BEGIN
        v_qt := 0;
        SELECT
            COUNT(1)
        INTO v_qt
        FROM
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__erros
        WHERE
            to_char(dtocorrencia, 'dd/mm/yyyy hh24') = to_char(sysdate, 'dd/mm/yyyy hh24');


        IF v_qt < c_lim_erro_hora THEN
            SELECT
                COUNT(1)
            INTO v_qt
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__erros
            WHERE
                to_char(dtocorrencia, 'dd/mm/yyyy hh24:mi') = to_char(sysdate, 'dd/mm/yyyy hh24:mi');


            IF v_qt < c_lim_erro_min THEN
                SELECT
                    COUNT(1)
                INTO v_qt
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__erros
                WHERE
                    to_char(dtocorrencia, 'dd/mm/yyyy hh24:mi:ss') = to_char(sysdate, 'dd/mm/yyyy hh24:mi:ss');


                IF v_qt < c_lim_erro_seg THEN
                    v_permitido := true;
                ELSE
                    v_permitido := false;
                END IF;


            ELSE
                v_permitido := false;
            END IF;


        ELSE
            v_permitido := false;
        END IF;


        IF v_permitido = true THEN
            v_ler.dtocorrencia := sysdate;
            v_ler.tipoobjeto := 'package';
            v_ler.nomeobjeto := $$plsql_unit;
            v_ler.linha := nvl(p_linha, $$plsql_line);
            v_ler.coderro := sqlcode;
            v_ler.msg := substr(sqlerrm
                                || ' '
                                || dbms_utility.format_error_backtrace
                                || ' '
                                || p_msg, 1, 4000);


            v_ler.valores := p_vlrs;
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__erros VALUES v_ler;


            COMMIT;
        ELSE
            dbms_output.put_line('MOSTRANDO ERRO NA FUNCAO INSERIR ERRO POR NAO SER PERMITIDO INCLUIR ERRO: '
                                    || substr(sqlerrm
                                            || ' '
                                            || dbms_utility.format_error_backtrace
                                            || ' '
                                            || p_msg, 1, 4000));
        END IF;


    EXCEPTION
        WHEN OTHERS THEN
            /*se esta procedure falhar, somente lhe resta mostrar o erro ocorrido*/
            dbms_output.put_line('MOSTRANDO ERRO NA FUNCAO INSERIR ERRO POR ERRO OCORRIDO NA FUNCAO:  '
                                    || substr(sqlerrm
                                            || ' '
                                            || dbms_utility.format_error_backtrace
                                            || ' '
                                            || p_msg, 1, 4000));


            NULL;
    END inserir_erro;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},	
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db AS
    FUNCTION objeto_valido (
        p_objeto   VARCHAR2,
        p_owner    VARCHAR2 DEFAULT '__FNV_GET_NOMESCHEMA__'
    ) RETURN BOOLEAN;


    FUNCTION executar_plsql (
        comando_plsql CLOB
    ) RETURN VARCHAR2;


    FUNCTION tabela_existe (
        nome_tabela                VARCHAR2,
        usuario_db                 VARCHAR2 DEFAULT NULL,
        pesquisar_todos_usuarios   NUMBER DEFAULT 0
    ) RETURN INTEGER;


    FUNCTION excluir_tabela (
        nome_tabela VARCHAR2
    ) RETURN VARCHAR2;


    FUNCTION criar_tabela (
        nome           VARCHAR2,
        campos         VARCHAR2,
        sobrescrever   INTEGER DEFAULT 0
    ) RETURN VARCHAR2;


    FUNCTION procurar_diretorio (
        caminho VARCHAR2
    ) RETURN VARCHAR2;

    FUNCTION verificar_registro_existe (
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        valor                   VARCHAR2,
        demais_condicionantes   VARCHAR2 DEFAULT ''
    ) RETURN boolean;
    
    FUNCTION registro_existe (
        tabela                  VARCHAR2,
        condicionantes   VARCHAR2 DEFAULT ' rownum <= 1 '
    ) RETURN boolean;
    
    FUNCTION obter_valor_maximo (
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        demais_condicionantes   VARCHAR2 DEFAULT ''
    ) RETURN NUMBER;
    FUNCTION obter_prox_disp (
        tabela                  VARCHAR2,
        campo                   VARCHAR2
    ) RETURN NUMBER;
    FUNCTION obter_valor_atual_ou_prox_disp (
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        valor                   VARCHAR2,
        demais_condicionantes   VARCHAR2 DEFAULT ''
    ) RETURN NUMBER;
    
    procedure commitar_se_possivel;
    
    FUNCTION obter_dado_varchar2(
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        condicionantes   VARCHAR2 DEFAULT ' rownum <= 1 '
    ) RETURN varchar2;
    
    FUNCTION obter_dado_number(
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        condicionantes   VARCHAR2 DEFAULT ' rownum <= 1 '
    ) RETURN number;
    
    FUNCTION obter_dado_clob(
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        condicionantes   VARCHAR2 DEFAULT ' rownum <= 1 '
    ) RETURN clob;
    
    FUNCTION obter_dado_varchar2_se_existir (
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        condicionantes   VARCHAR2 DEFAULT ' rownum <= 1 '
    ) RETURN varchar2;
    
    FUNCTION obter_dado_number_se_existir(
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        condicionantes   VARCHAR2 DEFAULT ' rownum <= 1 '
    ) RETURN number;
    
    FUNCTION obter_dado_clob_se_existir(
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        condicionantes   VARCHAR2 DEFAULT ' rownum <= 1 '
    ) RETURN clob;

END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db AS


    PROCEDURE inserir_erro (
        p_msg     VARCHAR2 DEFAULT NULL,
        p_vlrs    VARCHAR2 DEFAULT NULL,
        p_linha   INTEGER DEFAULT NULL
    ) AS


        PRAGMA autonomous_transaction;
        c_lim_erro_seg    CONSTANT INTEGER := 1;
        c_lim_erro_min    CONSTANT INTEGER := 10;
        c_lim_erro_hora   CONSTANT INTEGER := 100;
        --v_ler __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__erros%rowtype default NULL;
        v_qt              INTEGER default NULL;
        v_permitido       BOOLEAN DEFAULT true;
    BEGIN
        dbms_output.put_line('MOSTRANDO ERRO NA FUNCAO INSERIR ERRO POR NAO SER PERMITIDO INCLUIR ERRO: '
                                || substr(sqlerrm
                                        || ' '
                                        || dbms_utility.format_error_backtrace
                                        || ' '
                                        || p_msg, 1, 4000));
    EXCEPTION
        WHEN OTHERS THEN
            /*se esta procedure falhar, somente lhe resta mostrar o erro ocorrido*/
            dbms_output.put_line('MOSTRANDO ERRO NA FUNCAO INSERIR ERRO POR ERRO OCORRIDO NA FUNCAO:  '
                                    || substr(sqlerrm
                                            || ' '
                                            || dbms_utility.format_error_backtrace
                                            || ' '
                                            || p_msg, 1, 4000));


            NULL;
    END inserir_erro;


    FUNCTION objeto_valido (
        p_objeto   VARCHAR2,
        p_owner    VARCHAR2 DEFAULT '__FNV_GET_NOMESCHEMA__'
    ) RETURN BOOLEAN AS
        v_valido    VARCHAR2(100);
        v_retorno   BOOLEAN DEFAULT false;
    BEGIN
        v_retorno := false;
        v_valido := '';
        SELECT
            status
        INTO v_valido
        FROM
            all_objects
        WHERE
            lower(object_name) = lower(p_objeto)
            AND upper(TRIM(object_type)) = upper(TRIM('PACKAGE BODY'))
            AND lower(owner) = lower(p_owner);


        IF v_valido <> 'VALID' THEN
            EXECUTE IMMEDIATE 'ALTER PACKAGE '
                                || p_owner
                                || '.'
                                || p_objeto
                                || ' COMPILE BODY';
            EXECUTE IMMEDIATE 'ALTER PACKAGE '
                                || p_owner
                                || '.'
                                || p_objeto
                                || ' COMPILE PACKAGE';
            SELECT
                status
            INTO v_valido
            FROM
                all_objects
            WHERE
                lower(object_name) = lower(p_objeto)
                AND upper(TRIM(object_type)) = upper(TRIM('PACKAGE BODY'))
                AND lower(owner) = lower(p_owner);


            IF v_valido <> 'VALID' THEN
                raise_application_error(-20001, 'Objeto invalido: ' || p_objeto);
            ELSE
                v_retorno := true;
            END IF;


        ELSE
            v_retorno := true;
        END IF;


        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            RETURN false;
    END objeto_valido;


    FUNCTION executar_plsql (
        comando_plsql CLOB
    ) RETURN VARCHAR2 AS
        proc VARCHAR2(100) DEFAULT 'EXECUTAR_PLSQL';
    BEGIN
        EXECUTE IMMEDIATE comando_plsql;
        RETURN '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            RETURN 'erro';
    END executar_plsql;


    FUNCTION tabela_existe (
        nome_tabela                VARCHAR2,
        usuario_db                 VARCHAR2 DEFAULT NULL,
        pesquisar_todos_usuarios   NUMBER DEFAULT 0
    ) RETURN INTEGER AS


        proc            VARCHAR2(100) DEFAULT 'tabela_existe';
        erro            NUMBER(1) DEFAULT 0;
        msgerro         VARCHAR2(4000) DEFAULT '';
        msgok           VARCHAR2(200) DEFAULT '';
        tabela_existe   INTEGER DEFAULT 0;
        v_usuario_db    VARCHAR2(4000) DEFAULT NULL;
    BEGIN
        BEGIN
            msgok := 'Pesquisa concluida,tabela '
                        || nome_tabela
                        || ' ';
            IF usuario_db IS NULL THEN
                v_usuario_db := sys_context('USERENV', 'SESSION_USER');
            ELSE
                v_usuario_db := usuario_db;
            END IF;


            IF pesquisar_todos_usuarios > 0 THEN
                SELECT
                    COUNT(*)
                INTO tabela_existe
                FROM
                    all_tables
                WHERE
                    upper(table_name) = upper(nome_tabela);


            ELSE
                SELECT
                    COUNT(*)
                INTO tabela_existe
                FROM
                    all_tables
                WHERE
                    upper(owner) = upper(v_usuario_db)
                    AND upper(table_name) = upper(nome_tabela);


            END IF;


            IF tabela_existe > 0 THEN
                msgok := msgok || 'encontrada';
            ELSE
                msgok := msgok || 'nao encontrada';
            END IF;


        EXCEPTION
            WHEN OTHERS THEN
                inserir_erro(p_linha => $$plsql_line);
                erro := 1;
        END;


        RETURN tabela_existe;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            RETURN 0;
    END tabela_existe;


    FUNCTION excluir_tabela (
        nome_tabela VARCHAR2
    ) RETURN VARCHAR2 AS


        proc            VARCHAR2(100) DEFAULT 'excluir_tabela';
        erro            NUMBER(1) DEFAULT 0;
        msgerro         VARCHAR2(4000) DEFAULT '';
        msgok           VARCHAR2(200) DEFAULT '';
        retorno         VARCHAR2(4000) DEFAULT '0';
        tabela_existe   INTEGER;
    BEGIN
        BEGIN
            msgok := 'Tabela '
                        || nome_tabela
                        || ' ';
            IF instr(lower(trim(nome_tabela)), 'pc') <> 1 THEN
                tabela_existe := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.tabela_existe(nome_tabela);
                IF tabela_existe > 0 THEN
                    EXECUTE IMMEDIATE 'DROP TABLE ' || nome_tabela;
                    msgok := msgok || 'excluida com sucesso';
                    IF ( inserting ) OR ( updating ) OR ( deleting ) THEN
                        NULL;
                    ELSE
                        COMMIT;
                    END IF;


                ELSE
                    msgok := msgok || 'nao existe';
                END IF;


            ELSE
                msgok := msgok || ' da iniciada por pc nao podem ser excluidas';
            END IF;


        EXCEPTION
            WHEN OTHERS THEN
                inserir_erro(p_linha => $$plsql_line);
                erro := 1;
                msgerro := sqlerrm;
                retorno := msgerro;
        END;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END excluir_tabela;


    FUNCTION criar_tabela (
        nome           VARCHAR2,
        campos         VARCHAR2,
        sobrescrever   INTEGER DEFAULT 0
    ) RETURN VARCHAR2 AS


        proc            VARCHAR2(100) DEFAULT 'criar_tabela';
        erro            NUMBER(1) DEFAULT 0;
        msgerro         VARCHAR2(32000) DEFAULT '';
        msgok           VARCHAR2(200) DEFAULT '';
        tabela_existe   INTEGER DEFAULT 0;
        cmd             VARCHAR2(32000);
        retorno         VARCHAR2(32000) DEFAULT '0';
    BEGIN
        BEGIN
            msgok := 'Tabela '
                        || nome
                        || '';
            IF instr(lower(trim(nome)), 'pc') <> 1 THEN
                tabela_existe := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.tabela_existe(nome);
                IF ( tabela_existe = 0 ) OR ( tabela_existe > 0 AND sobrescrever > 0 ) THEN
                    IF tabela_existe > 0 THEN
                        retorno := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.excluir_tabela(nome);
                    END IF;


                    cmd := 'create table '
                            || nome
                            || '('
                            || campos
                            || ')';
                    EXECUTE IMMEDIATE cmd;
                    IF ( inserting ) OR ( updating ) OR ( deleting ) THEN
                        NULL;
                    ELSE
                        COMMIT;
                    END IF;


                    msgok := msgok || ' criada com sucesso';
                ELSE
                    msgok := msgok || ' ja existe,nao sobrescrever';
                END IF;


            ELSE
                msgok := msgok || ' iniciadas por pc nao podem ser criadas';
            END IF;


        EXCEPTION
            WHEN OTHERS THEN
                inserir_erro(p_linha => $$plsql_line);
                erro := 1;
                msgerro := sqlerrm;
                retorno := msgerro;
        END;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END criar_tabela;


    FUNCTION procurar_diretorio (
        caminho VARCHAR2
    ) RETURN VARCHAR2 AS
        retorno VARCHAR2(4000);
    BEGIN
        retorno := NULL;
        FOR l IN (
            SELECT
                *
            FROM
                all_directories
        ) LOOP IF l.directory_path = caminho THEN
            retorno := l.directory_name;
            EXIT;
        END IF;
        END LOOP;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END procurar_diretorio;


    FUNCTION obter_valor_maximo (
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        demais_condicionantes   VARCHAR2 DEFAULT ''
    ) RETURN NUMBER AS
        retorno         NUMBER default NULL;
        v_existe        NUMBER DEFAULT 0;
        v_comando_sql   VARCHAR2(32000) DEFAULT NULL;
    BEGIN
        retorno := NULL;
        v_existe := 0;
        v_comando_sql := 'select count(1) from '
                            || tabela
                            || ' where '
                            || campo
                            || ' is not null '
                            || demais_condicionantes;


        dbms_output.put_line(v_comando_sql);
        EXECUTE IMMEDIATE v_comando_sql
        INTO v_existe;
        dbms_output.put_line('existe: ' || v_existe);
        IF v_existe > 0 THEN
            v_comando_sql := 'select max(nvl('
                                || campo
                                || ',0)) from '
                                || tabela
                                || ' where '
                                || campo
                                || ' is not null '
                                || demais_condicionantes;


            dbms_output.put_line(v_comando_sql);
            EXECUTE IMMEDIATE v_comando_sql
            INTO retorno;
        END IF;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line, p_vlrs => v_comando_sql);
            RETURN NULL;
    END obter_valor_maximo;
    
    FUNCTION verificar_registro_existe (
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        valor                   VARCHAR2,
        demais_condicionantes   VARCHAR2 DEFAULT ''
    ) RETURN boolean AS
        retorno         boolean default false;
        v_existe        NUMBER DEFAULT 0;
        v_comando_sql   VARCHAR2(32000) DEFAULT NULL;
    BEGIN
        retorno := false;
        v_existe := 0;
        if (campo is not null and length(campo) > 0 and valor is not null and length(valor) > 0) then
            v_comando_sql := 'select count(1) from '
                                || tabela
                                || ' where '
                                || campo || '=' || valor
                                || ' '
                                || demais_condicionantes;
            EXECUTE IMMEDIATE v_comando_sql INTO v_existe;
        end if;
        IF v_existe > 0 THEN
            retorno := true;
        END IF;
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line, p_vlrs => v_comando_sql);
            RETURN false;
    END verificar_registro_existe;
    
    FUNCTION registro_existe (
        tabela                  VARCHAR2,
        condicionantes   VARCHAR2 DEFAULT ' rownum <= 1 '
    ) RETURN boolean AS
        retorno         boolean default false;
        v_existe        NUMBER DEFAULT 0;
        v_comando_sql   VARCHAR2(32000) DEFAULT NULL;
    BEGIN
        retorno := false;
        v_existe := 0;
        if (tabela is not null and length(tabela) > 0) then
            v_comando_sql := 'select count(1) from '
                                || tabela
                                || ' where '
                                || condicionantes;
            dbms_output.put_line(v_comando_sql);
            EXECUTE IMMEDIATE v_comando_sql INTO v_existe;
        end if;
        IF v_existe > 0 THEN
            retorno := true;
        END IF;
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line, p_vlrs => v_comando_sql);
            RETURN false;
    END registro_existe;
    
    FUNCTION obter_valor_atual_ou_prox_disp (
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        valor                   VARCHAR2,
        demais_condicionantes   VARCHAR2 DEFAULT ''
    ) RETURN NUMBER AS
        retorno         NUMBER default NULL;
    BEGIN
        retorno := valor;
        if verificar_registro_existe(tabela,campo,valor,demais_condicionantes) then
            retorno := to_number(obter_valor_maximo(tabela,campo,demais_condicionantes)) + 1;
        END IF;
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END obter_valor_atual_ou_prox_disp;
    
    FUNCTION obter_prox_disp (
        tabela                  VARCHAR2,
        campo                   VARCHAR2
    ) RETURN NUMBER AS
    BEGIN        
        RETURN nvl(obter_valor_maximo(tabela, campo), -1) +1;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END obter_prox_disp;


    procedure commitar_se_possivel as
    begin
        if not(INSERTING OR DELETING) THEN
            COMMIT;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    end;
    
    
    FUNCTION obter_dado_varchar2(
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        condicionantes   VARCHAR2 DEFAULT ' rownum <= 1 '
    ) RETURN varchar2 AS
        retorno         varchar2(32767) default null;
        v_comando_sql   VARCHAR2(32767) DEFAULT NULL;
    BEGIN
        retorno := null;
        if (tabela is not null and length(tabela) > 0 and campo is not null and length(campo) > 0) then
            v_comando_sql := 'select '||campo||' from '
                                || tabela
                                || ' where '
                                || condicionantes;
            EXECUTE IMMEDIATE v_comando_sql INTO retorno;
        end if;       
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line, p_vlrs => v_comando_sql);
            RETURN null;
    END obter_dado_varchar2;
    
    
    FUNCTION obter_dado_number(
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        condicionantes   VARCHAR2 DEFAULT ' rownum <= 1 '
    ) RETURN number AS
        retorno         number default null;
        v_comando_sql   VARCHAR2(32767) DEFAULT NULL;
    BEGIN
        retorno := null;
        if (tabela is not null and length(tabela) > 0 and campo is not null and length(campo) > 0) then
            v_comando_sql := 'select '||campo||' from '
                                || tabela
                                || ' where '
                                || condicionantes;
            EXECUTE IMMEDIATE v_comando_sql INTO retorno;
        end if;       
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line, p_vlrs => v_comando_sql);
            RETURN null;
    END obter_dado_number;
    
    
    FUNCTION obter_dado_clob(
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        condicionantes   VARCHAR2 DEFAULT ' rownum <= 1 '
    ) RETURN clob AS
        retorno         clob default null;
        v_comando_sql   VARCHAR2(32767) DEFAULT NULL;
    BEGIN
        retorno := null;
        if (tabela is not null and length(tabela) > 0 and campo is not null and length(campo) > 0) then
            v_comando_sql := 'select '||campo||' from '
                                || tabela
                                || ' where '
                                || condicionantes;
            EXECUTE IMMEDIATE v_comando_sql INTO retorno;
        end if;       
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line, p_vlrs => v_comando_sql);
            RETURN null;
    END obter_dado_clob;
    
    
    FUNCTION obter_dado_varchar2_se_existir (
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        condicionantes   VARCHAR2 DEFAULT ' rownum <= 1 '
    ) RETURN varchar2 AS
        retorno         varchar2(32767) default null;
    BEGIN
        retorno := null;
        if registro_existe(tabela,condicionantes) then
            retorno := obter_dado_varchar2(tabela,campo,condicionantes);
        end if;
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            RETURN null;
    END obter_dado_varchar2_se_existir;
    
    
    FUNCTION obter_dado_number_se_existir(
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        condicionantes   VARCHAR2 DEFAULT ' rownum <= 1 '
    ) RETURN number AS
        retorno         number default null;
    BEGIN
        retorno := null;
        if registro_existe(tabela,condicionantes) then
            retorno := obter_dado_number(tabela,campo,condicionantes);
        end if;
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line, p_vlrs => condicionantes);
            RETURN null;
    END obter_dado_number_se_existir;
    
    FUNCTION obter_dado_clob_se_existir(
        tabela                  VARCHAR2,
        campo                   VARCHAR2,
        condicionantes   VARCHAR2 DEFAULT ' rownum <= 1 '
    ) RETURN clob AS
        retorno         clob default null;
    BEGIN
        retorno := null;
        if registro_existe(tabela,condicionantes) then
            retorno := obter_dado_clob(tabela,campo,condicionantes);
        end if;
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line, p_vlrs => condicionantes);
            RETURN null;
    END obter_dado_clob_se_existir;
    
END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},	
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica AS
    FUNCTION eh_numero (
        str VARCHAR2
    ) RETURN BOOLEAN;


    FUNCTION maior (
        cnj tcnjnum
    ) RETURN NUMBER;


    FUNCTION menor (
        cnj                  tcnjnum,
        desconsiderar_zero   BOOLEAN DEFAULT false
    ) RETURN NUMBER;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica AS


    FUNCTION eh_numero (
        str VARCHAR2
    ) RETURN BOOLEAN AS
        retorno   BOOLEAN DEFAULT false;
        num       NUMBER;
    BEGIN
        num := to_number(str);
        RETURN true;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN false;
    END eh_numero;


    FUNCTION maior (
        cnj tcnjnum
    ) RETURN NUMBER AS
        ind     NUMBER DEFAULT 0;
        cont    NUMBER;
        maior   NUMBER;
    BEGIN
        cont := cnj.count;
        maior := 0;
        FOR ind IN 1..cont LOOP IF ( cnj(ind) > maior ) THEN
            maior := cnj(ind);
        END IF;
        END LOOP;


        RETURN maior;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END maior;


    FUNCTION menor (
        cnj                  tcnjnum,
        desconsiderar_zero   BOOLEAN DEFAULT false
    ) RETURN NUMBER AS
        ind     NUMBER DEFAULT 0;
        cont    NUMBER;
        menor   NUMBER;
    BEGIN
        cont := cnj.count;
        menor := maior(cnj);
        IF ( desconsiderar_zero = true ) THEN
            FOR ind IN 1..cont LOOP
                IF ( cnj(ind) > 0 AND cnj(ind) < menor ) THEN
                    menor := cnj(ind);
                END IF;
            END LOOP;
        ELSE
            FOR ind IN 1..cont LOOP
                IF ( cnj(ind) < menor ) THEN
                    menor := cnj(ind);
                END IF;
            END LOOP;
        END IF;


        RETURN menor;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END menor;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data AS
    FUNCTION dia_da_semana (
        data DATE
    ) RETURN VARCHAR2
        DETERMINISTIC;


    FUNCTION mes_numero (
        mes VARCHAR2
    ) RETURN VARCHAR2
        DETERMINISTIC;

    FUNCTION get_qt_dias_uteis (
        p_data_ini DATE,
        p_data_fim DATE,
        p_codfilial number default 1
    ) RETURN number
        DETERMINISTIC;
        
    FUNCTION primeiro_dia_mes_anterior (
        dt DATE DEFAULT NULL
    ) RETURN DATE;


    FUNCTION ultimo_dia_mes_anterior (
        dt DATE DEFAULT NULL
    ) RETURN DATE;


    FUNCTION decrementar_data (
        dt       DATE DEFAULT NULL,
        qtdias   NUMBER DEFAULT 1
    ) RETURN DATE;


    FUNCTION incrementar_data (
        dt       DATE DEFAULT NULL,
        qtdias   NUMBER DEFAULT 1
    ) RETURN DATE;


    FUNCTION calcular_data (
        dt        DATE DEFAULT NULL,
        calculo   VARCHAR2 DEFAULT '1'
    ) RETURN DATE;


    FUNCTION mes_portugues_abrev (
        p_data VARCHAR2
    ) RETURN VARCHAR2;


    FUNCTION mes_texto (
        mes NUMBER
    ) RETURN VARCHAR2;


    FUNCTION primeiro_dia_semana (
        p_data         VARCHAR2 DEFAULT to_char(sysdate, 'dd/mm/yyyy'),
        p_dia_semana   VARCHAR2 DEFAULT 'segunda'
    ) RETURN VARCHAR2;


    FUNCTION primeiro_dia_semana_mes (
        p_data         DATE,
        p_dia_semana   VARCHAR2 DEFAULT 'segunda'
    ) RETURN DATE;


    FUNCTION como_data_determ (
        p_data       DATE,
        p_data_def   DATE DEFAULT sysdate
    ) RETURN DATE
        DETERMINISTIC;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data AS



    FUNCTION dia_da_semana (
        data DATE
    ) RETURN VARCHAR2
        DETERMINISTIC
    AS
        ind_dia       NUMBER;
        dia_extenso   VARCHAR2(50);
    BEGIN
        ind_dia := to_number(to_char(data, 'd'));
        CASE ind_dia
            WHEN 1 THEN
                dia_extenso := 'Domingo';
            WHEN 2 THEN
                dia_extenso := 'Segunda-Feira';
            WHEN 3 THEN
                dia_extenso := 'Terca-Feira';
            WHEN 4 THEN
                dia_extenso := 'Quarta-Feira';
            WHEN 5 THEN
                dia_extenso := 'Quinta-Feira';
            WHEN 6 THEN
                dia_extenso := 'Sexta-Feira';
            WHEN 7 THEN
                dia_extenso := 'Sabado';
        END CASE;


        RETURN dia_extenso;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END dia_da_semana;
    
    FUNCTION get_qt_dias_uteis (
        p_data_ini DATE,
        p_data_fim DATE,
        p_codfilial number default 1
    ) RETURN number
        DETERMINISTIC
    AS
        stDate date;
        enDate date;
        v_qt_feriados number default 0;
        retorno   number default null;
    BEGIN
        stDate := TRUNC(p_data_ini);
        enDate := TRUNC(p_data_fim);        
        if enDate >= stDate then
            retorno := enDate - stDate - ((TRUNC(enDate,'D')-TRUNC(stDate,'D'))/7)*2 + 1;
            IF TO_CHAR(enDate,'D') = '7' THEN
                retorno := retorno - 1;
            END IF;
            IF TO_CHAR(stDate,'D') = '1' THEN
                retorno := retorno - 1;
            END IF;
            v_qt_feriados := 0;
            
            SELECT
                count(1)
                into v_qt_feriados
            FROM
                jumbo.pcdiasuteis
            WHERE
                data between stDate and enDate
                AND codfilial = p_codfilial
                AND diavendas IS NOT NULL
                and to_char(data, 'D') between 2 and 6
                and diavendas = 'N';
            
            retorno := retorno - v_qt_feriados;
            
        else
            retorno := 0;
        END IF;
        RETURN(retorno);
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END get_qt_dias_uteis;


    FUNCTION mes_numero (
        mes VARCHAR2
    ) RETURN VARCHAR2
        DETERMINISTIC
    AS
        mes_num     VARCHAR2(2) DEFAULT '';
        mes_texto   VARCHAR2(20) DEFAULT '';
    BEGIN
        mes_texto := lower(trim(mes));
        CASE
            WHEN ( mes_texto = 'janeiro' OR mes_texto = 'january' OR mes_texto = 'jan' ) THEN
                mes_num := '01';
            WHEN ( mes_texto = 'fevereiro' OR mes_texto = 'february' OR mes_texto = 'fev' OR mes_texto = 'feb' ) THEN
                mes_num := '02';
            WHEN ( mes_texto = 'marco' OR mes_texto = 'march' OR mes_texto = 'mar' OR mes_texto = 'marÃ¿Â§o' ) THEN
                mes_num := '03';
            WHEN ( mes_texto = 'abril' OR mes_texto = 'april' OR mes_texto = 'abr' OR mes_texto = 'apr' ) THEN
                mes_num := '04';
            WHEN ( mes_texto = 'maio' OR mes_texto = 'may' OR mes_texto = 'mai' ) THEN
                mes_num := '05';
            WHEN ( mes_texto = 'junho' OR mes_texto = 'june' OR mes_texto = 'jun' ) THEN
                mes_num := '06';
            WHEN ( mes_texto = 'julho' OR mes_texto = 'july' OR mes_texto = 'jul' ) THEN
                mes_num := '07';
            WHEN ( mes_texto = 'agosto' OR mes_texto = 'august' OR mes_texto = 'ago' OR mes_texto = 'aug' ) THEN
                mes_num := '08';
            WHEN ( mes_texto = 'setembro' OR mes_texto = 'september' OR mes_texto = 'set' OR mes_texto = 'sep' ) THEN
                mes_num := '09';
            WHEN ( mes_texto = 'outubro' OR mes_texto = 'october' OR mes_texto = 'out' OR mes_texto = 'oct' ) THEN
                mes_num := '10';
            WHEN ( mes_texto = 'novembro' OR mes_texto = 'november' OR mes_texto = 'nov' ) THEN
                mes_num := '11';
            WHEN ( mes_texto = 'dezembro' OR mes_texto = 'december' OR mes_texto = 'dez' OR mes_texto = 'dec' ) THEN
                mes_num := '12';
            ELSE
                mes_num := '01';
        END CASE;


        RETURN mes_num;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END mes_numero;


    FUNCTION mes_texto (
        mes NUMBER
    ) RETURN VARCHAR2 AS
        retorno VARCHAR2(20) DEFAULT '';
    BEGIN
        CASE
            WHEN ( mes = 1 ) THEN
                retorno := 'janeiro';
            WHEN ( mes = 2 ) THEN
                retorno := 'fevereiro';
            WHEN ( mes = 3 ) THEN
                retorno := 'marco';
            WHEN ( mes = 4 ) THEN
                retorno := 'abril';
            WHEN ( mes = 5 ) THEN
                retorno := 'maio';
            WHEN ( mes = 6 ) THEN
                retorno := 'junho';
            WHEN ( mes = 7 ) THEN
                retorno := 'julho';
            WHEN ( mes = 8 ) THEN
                retorno := 'agosto';
            WHEN ( mes = 9 ) THEN
                retorno := 'setembro';
            WHEN ( mes = 10 ) THEN
                retorno := 'outubro';
            WHEN ( mes = 11 ) THEN
                retorno := 'novembro';
            WHEN ( mes = 12 ) THEN
                retorno := 'dezembro';
        END CASE;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END mes_texto;


    FUNCTION primeiro_dia_mes_anterior (
        dt DATE DEFAULT NULL
    ) RETURN DATE AS
        v_dt        DATE default NULL;
        v_ret_str   VARCHAR2(10);
        v_ret       DATE default NULL;
    BEGIN
        IF dt IS NULL THEN
            v_dt := sysdate;
        ELSE
            v_dt := dt;
        END IF;


        v_ret_str := '01/'
                        || to_char(add_months(v_dt, -1), 'mm')
                        || '/'
                        || to_char(add_months(v_dt, -1), 'yyyy');


        v_ret := to_date(v_ret_str, 'dd/mm/yyyy');
        RETURN v_ret;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END primeiro_dia_mes_anterior;


    FUNCTION ultimo_dia_mes_anterior (
        dt DATE DEFAULT NULL
    ) RETURN DATE AS
        v_dt        DATE default NULL;
        v_ret_str   VARCHAR2(10);
        v_ret       DATE default NULL;
    BEGIN
        IF dt IS NULL THEN
            v_dt := sysdate;
        ELSE
            v_dt := dt;
        END IF;


        v_ret_str := '01/'
                        || to_char(add_months(v_dt, -1), 'mm')
                        || '/'
                        || to_char(add_months(v_dt, -1), 'yyyy');


        v_ret := last_day(to_date(v_ret_str, 'dd/mm/yyyy'));
        RETURN v_ret;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END ultimo_dia_mes_anterior;


    FUNCTION decrementar_data (
        dt       DATE DEFAULT NULL,
        qtdias   NUMBER DEFAULT 1
    ) RETURN DATE AS
    BEGIN
        RETURN nvl(dt, sysdate) - qtdias;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END decrementar_data;


    FUNCTION incrementar_data (
        dt       DATE DEFAULT NULL,
        qtdias   NUMBER DEFAULT 1
    ) RETURN DATE AS
    BEGIN
        RETURN nvl(dt, sysdate) + qtdias;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END incrementar_data;


    FUNCTION calcular_data (
        dt        DATE DEFAULT NULL,
        calculo   VARCHAR2 DEFAULT '1'
    ) RETURN DATE AS
        v_dt       DATE default NULL;
        v_dt_ret   DATE default NULL;
    BEGIN
        IF ( dt IS NULL ) THEN
            v_dt := sysdate;
        ELSE
            v_dt := dt;
        END IF;


        IF __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica', p_owner => '__FNV_GET_NOMESCHEMA__') THEN
            CASE
                WHEN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica.eh_numero(lower(trim(calculo))) THEN
                    v_dt_ret := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.incrementar_data(v_dt, calculo);
                WHEN lower(trim(calculo)) = lower(trim('primeiro dia mes anterior')) THEN
                    v_dt_ret := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.primeiro_dia_mes_anterior(v_dt);
                WHEN lower(trim(calculo)) = lower(trim('ultimo dia mes anterior')) THEN
                    v_dt_ret := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.ultimo_dia_mes_anterior(v_dt);
                WHEN lower(TRIM(calculo)) LIKE lower(TRIM('d-%')) THEN
                    v_dt_ret := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.decrementar_data(v_dt, substr(calculo, instr(calculo, '-') + 1));
                WHEN lower(TRIM(calculo)) LIKE lower(TRIM('d+%')) THEN
                    v_dt_ret := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.incrementar_data(v_dt, substr(calculo, instr(calculo, '+') + 1));
                ELSE
                    v_dt_ret := v_dt;
            END CASE;


        END IF;


        RETURN v_dt_ret;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END calcular_data;


    FUNCTION mes_portugues_abrev (
        p_data VARCHAR2
    ) RETURN VARCHAR2 AS
        v_retorno VARCHAR2(100);
    BEGIN
        v_retorno := p_data;
        v_retorno := replace(lower(v_retorno), 'feb', 'fev');
        v_retorno := replace(lower(v_retorno), 'apr', 'abr');
        v_retorno := replace(lower(v_retorno), 'may', 'mai');
        v_retorno := replace(lower(v_retorno), 'aug', 'ago');
        v_retorno := replace(lower(v_retorno), 'sep', 'set');
        v_retorno := replace(lower(v_retorno), 'oct', 'out');
        v_retorno := replace(lower(v_retorno), 'dec', 'dez');
        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END mes_portugues_abrev;


    FUNCTION primeiro_dia_semana (
        p_data         VARCHAR2 DEFAULT to_char(sysdate, 'dd/mm/yyyy'),
        p_dia_semana   VARCHAR2 DEFAULT 'segunda'
    ) RETURN VARCHAR2 AS
        v_retorno   VARCHAR2(100);
        i           NUMBER;
    BEGIN
        v_retorno := p_data;
        i := 0;
        FOR i IN 0..7 LOOP
            v_retorno := lower(to_char(to_date(p_data, 'dd/mm/yyyy') - i, 'Day'));


            IF ( v_retorno LIKE '%'
                                || lower(TRIM(p_dia_semana))
                                || '%' ) THEN
                v_retorno := to_char(to_date(p_data, 'dd/mm/yyyy') - i, 'dd/mm/yyyy');
                EXIT;
            END IF;


        END LOOP;


        RETURN v_retorno;
    END primeiro_dia_semana;


    FUNCTION primeiro_dia_semana_mes (
        p_data         DATE,
        p_dia_semana   VARCHAR2 DEFAULT 'segunda'
    ) RETURN DATE AS
        v_retorno   VARCHAR2(100);
        v_data      DATE;
        i           NUMBER;
    BEGIN
        v_retorno := NULL;
        v_data := nvl(p_data, sysdate);
        v_data := to_date('01/' || to_char(v_data, 'mm/yyyy'), 'dd/mm/yyyy');
        i := 0;
        FOR i IN 0..7 LOOP
            IF ( lower(to_char(v_data, 'Day')) LIKE '%'
                                                    || lower(TRIM(p_dia_semana))
                                                    || '%' ) THEN
                v_retorno := v_data;
                EXIT;
            END IF;


            v_data := v_data + 1;
        END LOOP;


        RETURN v_retorno;
    END primeiro_dia_semana_mes;


    FUNCTION como_data_determ (
        p_data       DATE,
        p_data_def   DATE DEFAULT sysdate
    ) RETURN DATE
        DETERMINISTIC
    AS
    BEGIN
        IF p_data IS NULL THEN
            RETURN trunc(p_data_def);
        ELSE
            RETURN p_data;
        END IF;
    END como_data_determ;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array AS
    FUNCTION como_array_num (
        str           VARCHAR2,
        delimitador   VARCHAR2 DEFAULT ','
    ) RETURN tcnjnum;


    FUNCTION como_array_str (
        str           VARCHAR2,
        delimitador   VARCHAR2 DEFAULT ','
    ) RETURN tcnjstr;


    FUNCTION como_str_array (
        p_array         tcnjstr,
        p_delimitador   VARCHAR2 DEFAULT ','
    ) RETURN VARCHAR2;


    FUNCTION excluir_duplicatas (
        p_array tcnjstr
    ) RETURN tcnjstr;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array AS


    FUNCTION como_array_num (
        str           VARCHAR2,
        delimitador   VARCHAR2 DEFAULT ','
    ) RETURN tcnjnum AS


        strtemp           VARCHAR2(4000);
        strelemento       VARCHAR2(4000);
        pdelimitador      NUMBER DEFAULT 0;
        compdelimitador   NUMBER DEFAULT 0;
        qtdelimitador     NUMBER DEFAULT 0;
        qtelementos       NUMBER DEFAULT 0;
        retorno           tcnjnum;
    BEGIN
        retorno := tcnjnum();
        IF str IS NOT NULL THEN
            IF length(str) > 0 THEN
                strtemp := str;
                qtdelimitador := length(strtemp) - length(replace(strtemp, delimitador));
                qtelementos := qtdelimitador + 1;
                compdelimitador := length(delimitador);
                IF __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_FUNCS_MATEMATICA', p_owner => '__FNV_GET_NOMESCHEMA__') THEN
                    FOR ind IN 1..qtelementos LOOP
                        pdelimitador := nvl(instr(strtemp, delimitador), 0);
                        IF pdelimitador = 0 THEN
                            pdelimitador := length(strtemp);
                            strelemento := strtemp;
                        ELSE
                            pdelimitador := pdelimitador - 1;
                            strelemento := substr(strtemp, 1, pdelimitador);
                        END IF;


                        strtemp := substr(strtemp,(pdelimitador + 1) + compdelimitador);
                        IF strelemento IS NOT NULL THEN
                            IF length(strelemento) > 0 AND __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica.eh_numero(strelemento) THEN
                                retorno.extend;
                                retorno(ind) := to_number(strelemento);
                            END IF;
                        END IF;


                    END LOOP;
                END IF;


            END IF;


        END IF;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END como_array_num;


    FUNCTION como_array_str (
        str           VARCHAR2,
        delimitador   VARCHAR2 DEFAULT ','
    ) RETURN tcnjstr AS


        strtemp           VARCHAR2(4000);
        strelemento       VARCHAR2(4000);
        pdelimitador      NUMBER DEFAULT 0;
        compdelimitador   NUMBER DEFAULT 0;
        qtdelimitador     NUMBER DEFAULT 0;
        qtelementos       NUMBER DEFAULT 0;
        retorno           tcnjstr;
    BEGIN
        retorno := tcnjstr();
        IF str IS NOT NULL THEN
            IF length(str) > 0 THEN
                strtemp := str;
                qtdelimitador := length(strtemp) - length(replace(strtemp, delimitador));
                qtelementos := qtdelimitador + 1;
                compdelimitador := length(delimitador);
                FOR ind IN 1..qtelementos LOOP
                    pdelimitador := nvl(instr(strtemp, delimitador), 0);
                    IF pdelimitador = 0 THEN
                        pdelimitador := length(strtemp);
                        strelemento := strtemp;
                    ELSE
                        pdelimitador := pdelimitador - 1;
                        strelemento := substr(strtemp, 1, pdelimitador);
                    END IF;


                    strtemp := substr(strtemp,(pdelimitador + 1) + compdelimitador);
                    IF strelemento IS NOT NULL THEN
                        retorno.extend;
                        retorno(retorno.last) := strelemento;
                    END IF;


                END LOOP;


            END IF;


        END IF;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END como_array_str;


    FUNCTION como_str_array (
        p_array         tcnjstr,
        p_delimitador   VARCHAR2 DEFAULT ','
    ) RETURN VARCHAR2 AS
        qtelementos   NUMBER DEFAULT 0;
        retorno       VARCHAR2(32000);
    BEGIN
        retorno := '';
        if p_array is not null then
            qtelementos := p_array.count;
            FOR c IN 1..qtelementos LOOP retorno := retorno
                                                    || p_array(c)
                                                    || p_delimitador;
            END LOOP;
    
    
            retorno := substr(retorno, 1, length(retorno) - length(p_delimitador));
        end if;

        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END como_str_array;


    FUNCTION excluir_duplicatas (
        p_array tcnjstr
    ) RETURN tcnjstr AS
        qtelementos   NUMBER DEFAULT 0;
        retorno       tcnjstr;
        v_existe      BOOLEAN DEFAULT false;
    BEGIN
        retorno := tcnjstr();
        FOR i IN p_array.first..p_array.last LOOP
            v_existe := false;
            IF retorno.count > 0 THEN
                FOR j IN retorno.first..retorno.last LOOP
                    IF lower(trim(retorno(j))) = lower(trim(p_array(i))) THEN
                        v_existe := true;
                        EXIT;
                    END IF;
                END LOOP;


            END IF;


            IF v_existe = false THEN
                retorno.extend;
                retorno(retorno.last) := p_array(i);
            END IF;


        END LOOP;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END excluir_duplicatas;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao AS
    FUNCTION boolean_to_char (
        status IN BOOLEAN
    ) RETURN VARCHAR2;


    FUNCTION como_numero (
        p_valor VARCHAR2
    ) RETURN NUMBER;


    FUNCTION blob_to_clob (
        blob_in IN BLOB
    ) RETURN CLOB;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao AS


    FUNCTION boolean_to_char (
        status IN BOOLEAN
    ) RETURN VARCHAR2 IS
    BEGIN
        RETURN
            CASE status
                WHEN true THEN
                    'TRUE'
                WHEN false THEN
                    'FALSE'
                ELSE 'NULL'
            END;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END boolean_to_char;


    FUNCTION como_numero (
        p_valor VARCHAR2
    ) RETURN NUMBER AS
        v_ret NUMBER default NULL;
    BEGIN
        v_ret := to_number(p_valor);
        RETURN v_ret;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END como_numero;


    FUNCTION blob_to_clob (
        blob_in IN BLOB
    ) RETURN CLOB AS


        v_clob      CLOB;
        v_varchar   VARCHAR2(32767);
        v_start     PLS_INTEGER := 1;
        v_buffer    PLS_INTEGER := 32767;
    BEGIN
        dbms_lob.createtemporary(v_clob, true);
        FOR i IN 1..ceil(dbms_lob.getlength(blob_in) / v_buffer) LOOP
            v_varchar := utl_raw.cast_to_varchar2(dbms_lob.substr(blob_in, v_buffer, v_start));


            dbms_lob.writeappend(v_clob, length(v_varchar), v_varchar);
            v_start := v_start + v_buffer;
        END LOOP;


        RETURN v_clob;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END blob_to_clob;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string AS
    FUNCTION subst_acentos (
        str VARCHAR2
    ) RETURN VARCHAR2;


    FUNCTION substituir (
        strref          VARCHAR2,
        strprocurar     VARCHAR2,
        strsubstituir   VARCHAR2 DEFAULT '',
        qtocorrencias   NUMBER DEFAULT NULL,
        ocorrenciaini   NUMBER DEFAULT NULL
    ) RETURN VARCHAR2;


    FUNCTION acrescentar_caracteres (
        p_str        CLOB,
        p_caracter   CLOB,
        p_qt         NUMBER DEFAULT 1,
        p_direcao    NUMBER DEFAULT 1
    ) RETURN CLOB;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string AS


    FUNCTION subst_acentos (
        str VARCHAR2
    ) RETURN VARCHAR2 AS
        strt VARCHAR2(4000);
    BEGIN
        strt := str;
        strt := replace(replace(strt, 'ç', 'c'), 'Ç', 'C');

        strt := replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(strt, 'á', 'a'), 'Á', 'A'), 'à','a'), 'À', 'A'), 'â', 'a'), 'Â', 'A'), 'ã', 'a'), 'Ã', 'A'), 'ä', 'a'), 'Ä', 'A');
        strt := replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(strt, 'é', 'e'), 'É', 'e'), 'è','e'), 'È', 'e'), 'ê', 'e'), 'Ê', 'E'), '~e', 'e'), '~E', 'E'), 'ë', 'E'), 'Ë', 'E');
        strt := replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(strt, 'í', 'i'), 'Í', 'i'), 'ì','i'), 'Ì', 'i'), 'î', 'i'), 'Î', 'I'), '~i', 'i'), '~I', 'I'), 'ï', 'I'), 'Ï', 'I');
        strt := replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(strt, 'ó', 'o'), 'Ó', 'o'), 'ò','o'), 'Ò', 'o'), 'ô', 'o'), 'Ô', 'O'), 'õ', 'o'), 'Õ', 'O'), 'ö', 'O'), 'Ö', 'O');
        strt := replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(strt, 'ú', 'u'), 'Ú', 'u'), 'ù','u'), 'Ù', 'u'), 'û', 'u'), 'Û', 'U'), '~u', 'u'), '~U', 'U'), 'ü', 'U'), 'Ü', 'U');


        RETURN strt;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END subst_acentos;


    FUNCTION substituir (
        strref          VARCHAR2,
        strprocurar     VARCHAR2,
        strsubstituir   VARCHAR2 DEFAULT '',
        qtocorrencias   NUMBER DEFAULT NULL,
        ocorrenciaini   NUMBER DEFAULT NULL
    ) RETURN VARCHAR2 AS


        retorno         VARCHAR2(4000) DEFAULT NULL;
        v_str           VARCHAR2(4000);
        v_pos_prox_oc   NUMBER DEFAULT 0;
        cont_oc         NUMBER DEFAULT 0;
    BEGIN
        v_str := strref;
        IF ( length(v_str) > 0 ) THEN
            IF ( length(strprocurar) > 0 ) THEN
                IF ( qtocorrencias IS NULL ) THEN
                    IF ( ocorrenciaini IS NULL ) THEN
                        v_str := replace(v_str, strprocurar, strsubstituir);
                    ELSE
                        v_pos_prox_oc := instr(v_str, strprocurar);
                        cont_oc := 0;
                        IF ( v_pos_prox_oc > 0 ) THEN
                            cont_oc := 1;
                        END IF;
                        WHILE ( v_pos_prox_oc > 0 ) LOOP
                            v_pos_prox_oc := instr(v_str, strprocurar, v_pos_prox_oc + 1);
                            cont_oc := cont_oc + 1;
                            IF ( cont_oc = ocorrenciaini ) THEN
                                EXIT;
                            END IF;
                        END LOOP;


                        IF ( cont_oc = ocorrenciaini ) THEN
                            IF ( v_pos_prox_oc > 0 ) THEN
                                WHILE ( v_pos_prox_oc IS NOT NULL ) LOOP
                                    v_str := substr(v_str, 1, v_pos_prox_oc - 1)
                                                || strsubstituir
                                                || substr(v_str, v_pos_prox_oc + length(strprocurar));


                                    v_pos_prox_oc := instr(v_str, strprocurar, v_pos_prox_oc + length(strsubstituir));
                                END LOOP;


                            END IF;
                        END IF;


                    END IF;


                ELSE
                    IF ( ocorrenciaini IS NULL ) THEN
                        v_pos_prox_oc := instr(v_str, strprocurar);
                        cont_oc := 0;
                        WHILE ( v_pos_prox_oc IS NOT NULL AND cont_oc < qtocorrencias ) LOOP
                            v_str := substr(v_str, 1, v_pos_prox_oc - 1)
                                        || strsubstituir
                                        || substr(v_str, v_pos_prox_oc + length(strprocurar));


                            v_pos_prox_oc := instr(v_str, strprocurar, v_pos_prox_oc + length(strsubstituir));
                            cont_oc := cont_oc + 1;
                        END LOOP;


                        v_str := replace(v_str, strprocurar, strsubstituir);
                    ELSE
                        v_pos_prox_oc := instr(v_str, strprocurar);
                        cont_oc := 0;
                        IF ( v_pos_prox_oc > 0 ) THEN
                            cont_oc := 1;
                        END IF;
                        WHILE ( v_pos_prox_oc > 0 ) LOOP
                            v_pos_prox_oc := instr(v_str, strprocurar, v_pos_prox_oc + 1);
                            cont_oc := cont_oc + 1;
                            IF ( cont_oc = ocorrenciaini ) THEN
                                EXIT;
                            END IF;
                        END LOOP;


                        IF ( cont_oc = ocorrenciaini ) THEN
                            IF ( v_pos_prox_oc > 0 ) THEN
                                cont_oc := 0;
                                WHILE ( v_pos_prox_oc IS NOT NULL AND cont_oc < qtocorrencias ) LOOP
                                    v_str := substr(v_str, 1, v_pos_prox_oc - 1)
                                                || strsubstituir
                                                || substr(v_str, v_pos_prox_oc + length(strprocurar));


                                    v_pos_prox_oc := instr(v_str, strprocurar, v_pos_prox_oc + length(strsubstituir));
                                    cont_oc := cont_oc + 1;
                                END LOOP;


                            END IF;
                        END IF;


                    END IF;
                END IF;


            END IF;


        END IF;


        retorno := v_str;
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END substituir;


    FUNCTION acrescentar_caracteres (
        p_str        CLOB,
        p_caracter   CLOB,
        p_qt         NUMBER DEFAULT 1,
        p_direcao    NUMBER DEFAULT 1
    ) RETURN CLOB AS
        retorno CLOB;
    BEGIN
        retorno := p_str;
        IF p_direcao = 1 THEN
            FOR i IN 1..p_qt LOOP
                retorno := retorno || p_caracter;
            END LOOP;


        ELSE
            FOR i IN 1..p_qt LOOP
                retorno := p_caracter || retorno;
            END LOOP;
        END IF;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END acrescentar_caracteres;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_html":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_html",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_html",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_html AS
    FUNCTION traduzir_caract_esp (
        p_texto VARCHAR2
    ) RETURN VARCHAR2;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_html;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_html AS


    FUNCTION traduzir_caract_esp (
        p_texto VARCHAR2
    ) RETURN VARCHAR2 AS
        retorno VARCHAR2(32000);
    BEGIN
        retorno := p_texto;
        FOR li IN (
            SELECT
                *
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__caractesp
        ) LOOP retorno := replace(retorno, li.caract, replace(li.caract_html, 'chr(38)', chr(38)));
        END LOOP;


        RETURN retorno;
    END traduzir_caract_esp;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_html;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor AS
    FUNCTION abrir_cursor (
        p_comando_sql CLOB
    ) RETURN NUMBER;


    FUNCTION obter_nomes_e_def_col_cursor (
        p_cursor_id   NUMBER,
        pv_col_cnt    IN OUT  INTEGER,
        pv_desc_tab   IN OUT  dbms_sql.desc_tab2
    ) RETURN tcnjstr;


    PROCEDURE fechar_cursor (
        p_cursor_id IN OUT NUMBER
    );


    FUNCTION obter_dados_cursor_bulk (
        p_comando_sql CLOB
    ) RETURN tcnjstr32;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor AS


    FUNCTION abrir_cursor (
        p_comando_sql CLOB
    ) RETURN NUMBER AS
        retorno   NUMBER;
        ret       INTEGER;
    BEGIN
        retorno := NULL;
        retorno := dbms_sql.open_cursor;
        dbms_sql.parse(retorno, p_comando_sql, dbms_sql.native);
        ret := dbms_sql.execute(retorno);
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => substr(p_comando_sql, 1, 4000), p_linha => $$plsql_line);


            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor.fechar_cursor(retorno);
            RETURN NULL;
    END abrir_cursor;


    FUNCTION obter_dados_cursor_bulk (
        p_comando_sql CLOB
    ) RETURN tcnjstr32 AS


        TYPE trefcur IS REF CURSOR;
        retorno   tcnjstr32;
        intcur    INTEGER;
        refcur    trefcur;
        ret       INTEGER;
        i         INTEGER;
    BEGIN
        retorno := tcnjstr32();
        dbms_output.put_line('xxa');
        EXECUTE IMMEDIATE p_comando_sql BULK COLLECT
        INTO retorno;
        dbms_output.put_line('xxb');
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => substr(p_comando_sql, 1, 4000), p_linha => $$plsql_line);


            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor.fechar_cursor(intcur);
            RETURN NULL;
    END obter_dados_cursor_bulk;


    PROCEDURE fechar_cursor (
        p_cursor_id IN OUT NUMBER
    ) AS
    BEGIN
        IF dbms_sql.is_open(p_cursor_id) THEN
            dbms_sql.close_cursor(p_cursor_id);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END fechar_cursor;


    FUNCTION obter_nomes_e_def_col_cursor (
        p_cursor_id   NUMBER,
        pv_col_cnt    IN OUT  INTEGER,
        pv_desc_tab   IN OUT  dbms_sql.desc_tab2
    ) RETURN tcnjstr AS
        retorno      tcnjstr;
        v_numtemp    NUMBER;
        v_datetemp   DATE;
        v_strtemp    VARCHAR2(4000);
    BEGIN
        retorno := tcnjstr();
        if p_cursor_id is not null then
            dbms_sql.describe_columns2(p_cursor_id, pv_col_cnt, pv_desc_tab);
            FOR c IN 1..pv_col_cnt LOOP
                retorno.extend;
                retorno(c) := pv_desc_tab(c).col_name;
                CASE
                    WHEN pv_desc_tab(c).col_type IN (
                        2,
                        100,
                        101
                    ) THEN
                        dbms_sql.define_column(p_cursor_id, c, v_numtemp);
                    WHEN pv_desc_tab(c).col_type IN (
                        12,
                        178,
                        179,
                        180,
                        181,
                        231
                    ) THEN
                        dbms_sql.define_column(p_cursor_id, c, v_datetemp);
                    WHEN pv_desc_tab(c).col_type IN (
                        1,
                        8,
                        9,
                        96,
                        112
                    ) THEN
                        dbms_sql.define_column(p_cursor_id, c, v_strtemp, 4000);
                    ELSE
                        dbms_sql.define_column(p_cursor_id, c, v_strtemp, 4000);
                END CASE;
    
    
            END LOOP;
        end if;

        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END obter_nomes_e_def_col_cursor;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql AS
    FUNCTION obter_linha_cursor (
        p_cursor_id          INTEGER,
        p_desc_tab           dbms_sql.desc_tab2,
        p_col_cnt            INTEGER,
        p_delimitador        VARCHAR2 DEFAULT ';',
        p_eliminar_espacos   BOOLEAN DEFAULT true
    ) RETURN VARCHAR2;


    FUNCTION obter_linha_cursor_como_cnj (
        p_cursor_id     INTEGER,
        p_desc_tab      dbms_sql.desc_tab2,
        p_col_cnt       INTEGER,
        p_delimitador   VARCHAR2 DEFAULT ';'
    ) RETURN tcnjstr;


    FUNCTION obter_dados (
        p_comando_sql VARCHAR2
    ) RETURN ttabstr;


    FUNCTION obter_primeiro_valor (
        p_dados ttabstr
    ) RETURN VARCHAR2;


    FUNCTION montar_comando_sql (
        p_tabelas          VARCHAR2 DEFAULT NULL,
        p_campos           VARCHAR2 DEFAULT NULL,
        p_condicionantes   VARCHAR2 DEFAULT NULL,
        p_ordenacao        VARCHAR2 DEFAULT NULL
    ) RETURN CLOB;


    FUNCTION montar_cabecalho_tab_html (
        p_campos_tab VARCHAR2
    ) RETURN CLOB;


    FUNCTION montar_tabela_html (
        p_comando_sql   CLOB,
        p_classe_tab    VARCHAR2 DEFAULT NULL,
        p_campos_tab    VARCHAR2 DEFAULT NULL
    ) RETURN CLOB;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql AS


    v_campos_html tcnjcamposhtml;


    FUNCTION obter_linha_cursor (
        p_cursor_id          INTEGER,
        p_desc_tab           dbms_sql.desc_tab2,
        p_col_cnt            INTEGER,
        p_delimitador        VARCHAR2 DEFAULT ';',
        p_eliminar_espacos   BOOLEAN DEFAULT true
    ) RETURN VARCHAR2 AS
        retorno      VARCHAR2(32000) DEFAULT NULL;
        v_numtemp    NUMBER;
        v_datetemp   DATE;
        v_strtemp    VARCHAR2(32000);
    BEGIN
        retorno := '';
        FOR c IN 1..p_col_cnt LOOP CASE
            WHEN p_desc_tab(c).col_type IN (
                2,
                100,
                101
            ) THEN
                dbms_sql.column_value(p_cursor_id, c, v_numtemp);
                retorno := retorno
                            || v_numtemp
                            || p_delimitador;
            WHEN p_desc_tab(c).col_type IN (
                12,
                178,
                179,
                180,
                181,
                231
            ) THEN
                dbms_sql.column_value(p_cursor_id, c, v_datetemp);
                retorno := retorno
                            || v_datetemp
                            || p_delimitador;
            WHEN p_desc_tab(c).col_type IN (
                1,
                8,
                9,
                96,
                112
            ) THEN
                dbms_sql.column_value(p_cursor_id, c, v_strtemp);
                IF p_eliminar_espacos = true THEN
                    retorno := retorno
                                || regexp_replace(trim(nvl(v_strtemp, '')), '( ){2,}|\\s+', ' ')
                                || p_delimitador;


                ELSE
                    retorno := retorno
                                || v_strtemp
                                || p_delimitador;
                END IF;


            ELSE
                dbms_sql.column_value(p_cursor_id, c, v_strtemp);
                IF p_eliminar_espacos = true THEN
                    retorno := retorno
                                || regexp_replace(trim(nvl(v_strtemp, '')), '( ){2,}|\\s+', ' ')
                                || p_delimitador;


                ELSE
                    retorno := retorno
                                || v_strtemp
                                || p_delimitador;
                END IF;


        END CASE;
        END LOOP;


        retorno := substr(retorno, 1, length(retorno) - length(p_delimitador));


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END obter_linha_cursor;


    FUNCTION obter_linha_cursor_como_cnj (
        p_cursor_id     INTEGER,
        p_desc_tab      dbms_sql.desc_tab2,
        p_col_cnt       INTEGER,
        p_delimitador   VARCHAR2 DEFAULT ';'
    ) RETURN tcnjstr AS


        v_retorno    tcnjstr default NULL;
        v_numtemp    NUMBER;
        v_datetemp   DATE;
        v_strtemp    VARCHAR2(32000);
        v_cont_el    INTEGER DEFAULT 1;
    BEGIN
        v_retorno := tcnjstr();
        FOR c IN 1..p_col_cnt LOOP
            v_retorno.extend;
            CASE
                WHEN p_desc_tab(c).col_type IN (
                    2,
                    100,
                    101
                ) THEN
                    dbms_sql.column_value(p_cursor_id, c, v_numtemp);
                    v_retorno(v_cont_el) := v_numtemp;
                WHEN p_desc_tab(c).col_type IN (
                    12,
                    178,
                    179,
                    180,
                    181,
                    231
                ) THEN
                    dbms_sql.column_value(p_cursor_id, c, v_datetemp);
                    v_retorno(v_cont_el) := v_datetemp;
                WHEN p_desc_tab(c).col_type IN (
                    1,
                    8,
                    9,
                    96,
                    112
                ) THEN
                    dbms_sql.column_value(p_cursor_id, c, v_strtemp);
                    v_retorno(v_cont_el) := v_strtemp;
                ELSE
                    dbms_sql.column_value(p_cursor_id, c, v_strtemp);
                    v_retorno(v_cont_el) := v_strtemp;
            END CASE;


        END LOOP;


        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END obter_linha_cursor_como_cnj;


    FUNCTION obter_dados (
        p_comando_sql VARCHAR2
    ) RETURN ttabstr AS


        v_retorno      ttabstr;
        v_cursor_id    NUMBER;
        v_cols         tcnjstr;
        v_col_cnt      INTEGER;
        v_desc_tab     dbms_sql.desc_tab2;
        v_linha        tcnjstr;
        v_cont_linha   INTEGER DEFAULT 1;
    BEGIN
        v_retorno := ttabstr();
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_cursor_id := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor.abrir_cursor(p_comando_sql);
            v_cols := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor.obter_nomes_e_def_col_cursor(v_cursor_id, v_col_cnt, v_desc_tab);
            v_cont_linha := 1;
            WHILE dbms_sql.fetch_rows(v_cursor_id) > 0 LOOP
                v_linha := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_linha_cursor_como_cnj(v_cursor_id, v_desc_tab, v_col_cnt);
                v_retorno.extend;
                v_retorno(v_cont_linha) := v_linha;
                v_cont_linha := v_cont_linha + 1;
            END LOOP;


        END IF;


        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor.fechar_cursor(v_cursor_id);
    END obter_dados;


    FUNCTION obter_primeiro_valor (
        p_dados ttabstr
    ) RETURN VARCHAR2 AS
    BEGIN
        FOR c IN 1..p_dados.count LOOP
            FOR d IN 1..p_dados(c).count LOOP
                RETURN p_dados(c)(d);
            END LOOP;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END obter_primeiro_valor;


    FUNCTION montar_comando_sql (
        p_tabelas          VARCHAR2 DEFAULT NULL,
        p_campos           VARCHAR2 DEFAULT NULL,
        p_condicionantes   VARCHAR2 DEFAULT NULL,
        p_ordenacao        VARCHAR2 DEFAULT NULL
    ) RETURN CLOB AS
        v_retorno CLOB default NULL;
    BEGIN
        v_retorno := 'select ';
        v_retorno := v_retorno || p_campos;
        v_retorno := v_retorno || ' from ';
        v_retorno := v_retorno || p_tabelas;
        IF p_condicionantes IS NOT NULL THEN
            IF length(trim(p_condicionantes)) > 0 THEN
                v_retorno := v_retorno || ' where ';
                v_retorno := v_retorno || p_condicionantes;
            END IF;
        END IF;


        IF p_ordenacao IS NOT NULL THEN
            IF length(trim(p_ordenacao)) > 0 THEN
                v_retorno := v_retorno || ' order by ';
                v_retorno := v_retorno || p_ordenacao;
            END IF;
        END IF;


        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END montar_comando_sql;


    FUNCTION montar_cabecalho_tab_html (
        p_campos_tab VARCHAR2
    ) RETURN CLOB AS
        v_retorno          CLOB DEFAULT '';
        v_retorno_campos   CLOB default NULL;
    BEGIN
        v_campos_html := tcnjcamposhtml();
        v_campos_html.atribuir_campos_tab_html(p_campos_tab, NULL);
        v_campos_html.preparar_campos_tab_html;
        v_campos_html.mostrar_campos_html;
        v_retorno := '<thead class=\"tabelaestcab\">';
        v_retorno := v_retorno || '<tr class=\"linhacabecalho\">';
        v_retorno := v_retorno || '<th>';
        v_retorno := v_retorno || '<table class=\"tabcab\">';
        v_retorno := v_retorno || '<thead>';
        v_retorno := v_retorno || '<tr class=\"linhacomandos\">';
        v_retorno := v_retorno || '</tr>';
        v_retorno := v_retorno || v_campos_html.montar_campos_html;
        v_retorno := v_retorno || '</thead>';
        v_retorno := v_retorno || '</table>';
        v_retorno := v_retorno || '</th>';
        v_retorno := v_retorno || '</tr>';
        v_retorno := v_retorno || '</thead>';
        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END;


    FUNCTION montar_rodape_tab_html RETURN CLOB AS
        v_retorno CLOB DEFAULT '';
    BEGIN
        v_retorno := '<tfoot class=\"tabelaestrod\">';
        v_retorno := v_retorno || '<tr class=\"linharodape\">';
        v_retorno := v_retorno || '<th>';
        v_retorno := v_retorno || '<table class=\"tabrod\">';
        v_retorno := v_retorno || '<tfoot>';
        v_retorno := v_retorno || '<tr class=\"linhacalculos linhatotais\">';
        v_retorno := v_retorno || '</tr>';
        v_retorno := v_retorno || '</tfoot>';
        v_retorno := v_retorno || '</table>';
        v_retorno := v_retorno || '</th>';
        v_retorno := v_retorno || '</tr>';
        v_retorno := v_retorno || '</tfoot>';
        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END;


    FUNCTION montar_linhas_tab_html (
        p_linhas tcnjstr32
    ) RETURN CLOB AS
        v_retorno CLOB DEFAULT '';
    BEGIN
        dbms_output.put_line('aa');
        FOR i IN p_linhas.first..p_linhas.last LOOP
            dbms_output.put_line('aaa');
            dbms_output.put_line(p_linhas(i));
            v_retorno := v_retorno || p_linhas(i);
            dbms_output.put_line('aab');
        END LOOP;


        dbms_output.put_line('ab');
        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END;


    FUNCTION montar_corpo_tab_html (
        p_linhas tcnjstr32
    ) RETURN CLOB AS
        v_retorno CLOB DEFAULT '';
    BEGIN
        dbms_output.put_line('a');
        v_retorno := '<tbody class=\"tabelaestcorpo\">';
        v_retorno := v_retorno || '<tr class=\"linhacorpo\">';
        v_retorno := v_retorno || '<td>';
        v_retorno := v_retorno || '<table class=\"tabcorpo\">';
        v_retorno := v_retorno || '<tbody>';
        dbms_output.put_line('b');
        v_retorno := v_retorno || montar_linhas_tab_html(p_linhas);
        dbms_output.put_line('c');
        v_retorno := v_retorno || '</tbody>';
        v_retorno := v_retorno || '</table>';
        v_retorno := v_retorno || '</td>';
        v_retorno := v_retorno || '</tr>';
        v_retorno := v_retorno || '</tbody>';
        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END;


    FUNCTION montar_tabela_html (
        p_comando_sql   CLOB,
        p_classe_tab    VARCHAR2 DEFAULT NULL,
        p_campos_tab    VARCHAR2 DEFAULT NULL
    ) RETURN CLOB AS
        v_retorno           CLOB default NULL;
        v_cabecalho_tab     CLOB default NULL;
        v_linhas            tcnjstr32 default NULL;
        v_linhas_montadas   CLOB default NULL;
    BEGIN
        v_retorno := '<table ';
        IF p_classe_tab IS NOT NULL THEN
            v_retorno := v_retorno
                            || ' class=\"'
                            || p_classe_tab
                            || '\" ';
        END IF;


        v_retorno := v_retorno || '>';
        v_linhas := tcnjstr32();
        dbms_output.put_line('ok1');
        v_linhas := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor.obter_dados_cursor_bulk(p_comando_sql);
        dbms_output.put_line(v_linhas.count);
        dbms_output.put_line('ok2');
        v_retorno := v_retorno || montar_cabecalho_tab_html(p_campos_tab);
        dbms_output.put_line('ok3');
        v_retorno := v_retorno || montar_corpo_tab_html(v_linhas);
        dbms_output.put_line('ok4');
        v_retorno := v_retorno || montar_rodape_tab_html;
        dbms_output.put_line('ok5');
        v_retorno := v_retorno || '</table>';
        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END montar_tabela_html;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},	
	"as_xlsx":{
		"nomepackagesqldb":"as_xlsx",
		"nomepackagesqlsistema":"as_xlsx",
		"cabecalho":"
create or replace package as_xlsx
    is
    /**********************************************
    **
    ** Author: Anton Scheffer
    ** Date: 19-02-2011
    ** Website: http://technology.amis.nl/blog
    ** See also: http://technology.amis.nl/blog/?p=10995
    **
    ** Changelog:
    **   Date: 21-02-2011
    **     Added Aligment, horizontal, vertical, wrapText
    **   Date: 06-03-2011
    **     Added Comments, MergeCells, fixed bug for dependency on NLS-settings
    **   Date: 16-03-2011
    **     Added bold and italic fonts
    **   Date: 22-03-2011
    **     Fixed issue with timezone's set to a region(name) instead of a offset
    **   Date: 08-04-2011
    **     Fixed issue with XML-escaping from text
    **   Date: 27-05-2011
    **     Added MIT-license
    **   Date: 11-08-2011
    **     Fixed NLS-issue with column width
    **   Date: 29-09-2011
    **     Added font color
    **   Date: 16-10-2011
    **     fixed bug in add_string
    **   Date: 26-04-2012
    **     Fixed set_autofilter (only one autofilter per sheet, added _xlnm._FilterDatabase)
    **     Added list_validation = drop-down
    **   Date: 27-08-2013
    **     Added freeze_pane
    **   Date: 05-09-2013
    **     Performance
    **   Date: 14-07-2014
    **      Added p_UseXf to query2sheet
    **   Date: 23-10-2014
    **      Added xml:space=\"preserve\"
    **   Date: 29-02-2016
    **     Fixed issue with alignment in get_XfId
    **     Thank you Bertrand Gouraud
    **   Date: 01-04-2017
    **     Added p_height to set_row
    **   Date: 23-05-2018
    **     fixed bug in add_string (thank you David Short)
    **     added tabColor to new_sheet
    ******************************************************************************
    ******************************************************************************
    Copyright (C) 2011, 2016 by Anton Scheffer
    
    
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the \"Software\"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    
    
    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.
    
    
    
    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
    
    
    
    ******************************************************************************
    ******************************************** */
    --
        type tp_alignment is record
        ( vertical varchar2(11)
        , horizontal varchar2(16)
        , wrapText boolean
        );
    --
        procedure clear_workbook;
    --
        procedure new_sheet
        ( p_sheetname varchar2 := null
        , p_tabcolor varchar2 := null -- this is a hex ALPHA Red Green Blue value
        );
    --
        function OraFmt2Excel( p_format varchar2 := null )
        return varchar2;
    --
        function get_numFmt( p_format varchar2 := null )
        return pls_integer;
    --
        function get_font
        ( p_name varchar2
        , p_family pls_integer := 2
        , p_fontsize number := 11
        , p_theme pls_integer := 1
        , p_underline boolean := false
        , p_italic boolean := false
        , p_bold boolean := false
        , p_rgb varchar2 := null -- this is a hex ALPHA Red Green Blue value
        )
        return pls_integer;
    --
        function get_fill
        ( p_patternType varchar2
        , p_fgRGB varchar2 := null -- this is a hex ALPHA Red Green Blue value
        )
        return pls_integer;
    --
        function get_border
        ( p_top varchar2 := 'thin'
        , p_bottom varchar2 := 'thin'
        , p_left varchar2 := 'thin'
        , p_right varchar2 := 'thin'
        )
    /*
    none
    thin
    medium
    dashed
    dotted
    thick
    double
    hair
    mediumDashed
    dashDot
    mediumDashDot
    dashDotDot
    mediumDashDotDot
    slantDashDot
    */
        return pls_integer;
    --
        function get_alignment
        ( p_vertical varchar2 := null
        , p_horizontal varchar2 := null
        , p_wrapText boolean := null
        )
    /* horizontal
    center
    centerContinuous
    distributed
    fill
    general
    justify
    left
    right
    */
    /* vertical
    bottom
    center
    distributed
    justify
    top
    */
        return tp_alignment;
    --
        procedure cell
        ( p_col pls_integer
        , p_row pls_integer
        , p_value number
        , p_numFmtId pls_integer := null
        , p_fontId pls_integer := null
        , p_fillId pls_integer := null
        , p_borderId pls_integer := null
        , p_alignment tp_alignment := null
        , p_sheet pls_integer := null
        );
    --
        procedure cell
        ( p_col pls_integer
        , p_row pls_integer
        , p_value varchar2
        , p_numFmtId pls_integer := null
        , p_fontId pls_integer := null
        , p_fillId pls_integer := null
        , p_borderId pls_integer := null
        , p_alignment tp_alignment := null
        , p_sheet pls_integer := null
        );
    --
        procedure cell
        ( p_col pls_integer
        , p_row pls_integer
        , p_value date
        , p_numFmtId pls_integer := null
        , p_fontId pls_integer := null
        , p_fillId pls_integer := null
        , p_borderId pls_integer := null
        , p_alignment tp_alignment := null
        , p_sheet pls_integer := null
        );
    --
        procedure hyperlink
        ( p_col pls_integer
        , p_row pls_integer
        , p_url varchar2
        , p_value varchar2 := null
        , p_sheet pls_integer := null
        );
    --
        procedure comment
        ( p_col pls_integer
        , p_row pls_integer
        , p_text varchar2
        , p_author varchar2 := null
        , p_width pls_integer := 150  -- pixels
        , p_height pls_integer := 100  -- pixels
        , p_sheet pls_integer := null
        );
    --
        procedure mergecells
        ( p_tl_col pls_integer -- top left
        , p_tl_row pls_integer
        , p_br_col pls_integer -- bottom right
        , p_br_row pls_integer
        , p_sheet pls_integer := null
        );
    --
        procedure list_validation
        ( p_sqref_col pls_integer
        , p_sqref_row pls_integer
        , p_tl_col pls_integer -- top left
        , p_tl_row pls_integer
        , p_br_col pls_integer -- bottom right
        , p_br_row pls_integer
        , p_style varchar2 := 'stop' -- stop, warning, information
        , p_title varchar2 := null
        , p_prompt varchar := null
        , p_show_error boolean := false
        , p_error_title varchar2 := null
        , p_error_txt varchar2 := null
        , p_sheet pls_integer := null
        );
    --
        procedure list_validation
        ( p_sqref_col pls_integer
        , p_sqref_row pls_integer
        , p_defined_name varchar2
        , p_style varchar2 := 'stop' -- stop, warning, information
        , p_title varchar2 := null
        , p_prompt varchar := null
        , p_show_error boolean := false
        , p_error_title varchar2 := null
        , p_error_txt varchar2 := null
        , p_sheet pls_integer := null
        );
    --
        procedure defined_name
        ( p_tl_col pls_integer -- top left
        , p_tl_row pls_integer
        , p_br_col pls_integer -- bottom right
        , p_br_row pls_integer
        , p_name varchar2
        , p_sheet pls_integer := null
        , p_localsheet pls_integer := null
        );
    --
        procedure set_column_width
        ( p_col pls_integer
        , p_width number
        , p_sheet pls_integer := null
        );
    --
        procedure set_column
        ( p_col pls_integer
        , p_numFmtId pls_integer := null
        , p_fontId pls_integer := null
        , p_fillId pls_integer := null
        , p_borderId pls_integer := null
        , p_alignment tp_alignment := null
        , p_sheet pls_integer := null
        );
    --
        procedure set_row
        ( p_row pls_integer
        , p_numFmtId pls_integer := null
        , p_fontId pls_integer := null
        , p_fillId pls_integer := null
        , p_borderId pls_integer := null
        , p_alignment tp_alignment := null
        , p_sheet pls_integer := null
        , p_height number := null
        );
    --
        procedure freeze_rows
        ( p_nr_rows pls_integer := 1
        , p_sheet pls_integer := null
        );
    --
        procedure freeze_cols
        ( p_nr_cols pls_integer := 1
        , p_sheet pls_integer := null
        );
    --
        procedure freeze_pane
        ( p_col pls_integer
        , p_row pls_integer
        , p_sheet pls_integer := null
        );
    --
        procedure set_autofilter
        ( p_column_start pls_integer := null
        , p_column_end pls_integer := null
        , p_row_start pls_integer := null
        , p_row_end pls_integer := null
        , p_sheet pls_integer := null
        );
    --
        procedure set_tabcolor
        ( p_tabcolor varchar2 -- this is a hex ALPHA Red Green Blue value
        , p_sheet pls_integer := null
        );
    --
        function finish
        return blob;
    --
        procedure save
        ( p_directory varchar2
        , p_filename varchar2
        );
    --
        procedure query2sheet
        ( p_sql clob
        , p_column_headers boolean := true
        , p_directory varchar2 := null
        , p_filename varchar2 := null
        , p_sheet pls_integer := null
        , p_UseXf boolean := false
        );
    --
        procedure setUseXf( p_val boolean := true );
    --
    /* Example
    begin
        as_xlsx.clear_workbook;
        as_xlsx.new_sheet;
        as_xlsx.cell( 5, 1, 5 );
        as_xlsx.cell( 3, 1, 3 );
        as_xlsx.cell( 2, 2, 45 );
        as_xlsx.cell( 3, 2, 'Anton Scheffer', p_alignment => as_xlsx.get_alignment( p_wraptext => true ) );
        as_xlsx.cell( 1, 4, sysdate, p_fontId => as_xlsx.get_font( 'Calibri', p_rgb => 'FFFF0000' ) );
        as_xlsx.cell( 2, 4, sysdate, p_numFmtId => as_xlsx.get_numFmt( 'dd/mm/yyyy h:mm' ) );
        as_xlsx.cell( 3, 4, sysdate, p_numFmtId => as_xlsx.get_numFmt( as_xlsx.orafmt2excel( 'dd/mon/yyyy' ) ) );
        as_xlsx.cell( 5, 5, 75, p_borderId => as_xlsx.get_border( 'double', 'double', 'double', 'double' ) );
        as_xlsx.cell( 2, 3, 33 );
        as_xlsx.hyperlink( 1, 6, 'http://www.amis.nl', 'Amis site' );
        as_xlsx.cell( 1, 7, 'Some merged cells', p_alignment => as_xlsx.get_alignment( p_horizontal => 'center' ) );
        as_xlsx.mergecells( 1, 7, 3, 7 );
        for i in 1 .. 5
        loop
        as_xlsx.comment( 3, i + 3, 'Row ' || (i+3), 'Anton' );
        end loop;
        as_xlsx.new_sheet;
        as_xlsx.set_row( 1, p_fillId => as_xlsx.get_fill( 'solid', 'FFFF0000' ) ) ;
        for i in 1 .. 5
        loop
        as_xlsx.cell( 1, i, i );
        as_xlsx.cell( 2, i, i * 3 );
        as_xlsx.cell( 3, i, 'x ' || i * 3 );
        end loop;
        as_xlsx.query2sheet( 'select rownum, x.*
    , case when mod( rownum, 2 ) = 0 then rownum * 3 end demo
    , case when mod( rownum, 2 ) = 1 then ''demo '' || rownum end demo2 from dual x connect by rownum <= 5' );
        as_xlsx.save( 'MY_DIR', 'my.xlsx' );
    end;
    --
    begin
        as_xlsx.clear_workbook;
        as_xlsx.new_sheet;
        as_xlsx.cell( 1, 6, 5 );
        as_xlsx.cell( 1, 7, 3 );
        as_xlsx.cell( 1, 8, 7 );
        as_xlsx.new_sheet;
        as_xlsx.cell( 2, 6, 15, p_sheet => 2 );
        as_xlsx.cell( 2, 7, 13, p_sheet => 2 );
        as_xlsx.cell( 2, 8, 17, p_sheet => 2 );
        as_xlsx.list_validation( 6, 3, 1, 6, 1, 8, p_show_error => true, p_sheet => 1 );
        as_xlsx.defined_name( 2, 6, 2, 8, 'Anton', 2 );
        as_xlsx.list_validation
        ( 6, 1, 'Anton'
        , p_style => 'information'
        , p_title => 'valid values are'
        , p_prompt => '13, 15 and 17'
        , p_show_error => true
        , p_error_title => 'Are you sure?'
        , p_error_txt => 'Valid values are: 13, 15 and 17'
        , p_sheet => 1 );
        as_xlsx.save( 'MY_DIR', 'my.xlsx' );
    end;
    --
    begin
        as_xlsx.clear_workbook;
        as_xlsx.new_sheet;
        as_xlsx.cell( 1, 6, 5 );
        as_xlsx.cell( 1, 7, 3 );
        as_xlsx.cell( 1, 8, 7 );
        as_xlsx.set_autofilter( 1,1, p_row_start => 5, p_row_end => 8 );
        as_xlsx.new_sheet;
        as_xlsx.cell( 2, 6, 5 );
        as_xlsx.cell( 2, 7, 3 );
        as_xlsx.cell( 2, 8, 7 );
        as_xlsx.set_autofilter( 2,2, p_row_start => 5, p_row_end => 8 );
        as_xlsx.save( 'MY_DIR', 'my.xlsx' );
    end;
    --
    begin
        as_xlsx.clear_workbook;
        as_xlsx.new_sheet;
        as_xlsx.setUseXf( false );
        for c in 1 .. 10
        loop
        as_xlsx.cell( c, 1, 'COL' || c );
        as_xlsx.cell( c, 2, 'val' || c );
        as_xlsx.cell( c, 3, c );
        end loop;
        as_xlsx.freeze_rows( 1 );
        as_xlsx.new_sheet;
        for r in 1 .. 10
        loop
        as_xlsx.cell( 1, r, 'ROW' || r );
        as_xlsx.cell( 2, r, 'val' || r );
        as_xlsx.cell( 3, r, r );
        end loop;
        as_xlsx.freeze_cols( 3 );
        as_xlsx.new_sheet;
        as_xlsx.cell( 3, 3, 'Start freeze' );
        as_xlsx.freeze_pane( 3,3 );
        as_xlsx.save( 'MY_DIR', 'my.xlsx' );
    end;
    */
    end AS_XLSX;",
		"corpo":"
create or replace package body as_xlsx
    is
    --
        c_LOCAL_FILE_HEADER        constant raw(4) := hextoraw( '504B0304' ); -- Local file header signature
        c_END_OF_CENTRAL_DIRECTORY constant raw(4) := hextoraw( '504B0506' ); -- End of central directory signature
    --
        type tp_XF_fmt is record
        ( numFmtId pls_integer
        , fontId pls_integer
        , fillId pls_integer
        , borderId pls_integer
        , alignment tp_alignment
        , height number
        );
        type tp_col_fmts is table of tp_XF_fmt index by pls_integer;
        type tp_row_fmts is table of tp_XF_fmt index by pls_integer;
        type tp_widths is table of number index by pls_integer;
        type tp_cell is record
        ( value number
        , style varchar2(50)
        );
        type tp_cells is table of tp_cell index by pls_integer;
        type tp_rows is table of tp_cells index by pls_integer;
        type tp_autofilter is record
        ( column_start pls_integer
        , column_end pls_integer
        , row_start pls_integer
        , row_end pls_integer
        );
        type tp_autofilters is table of tp_autofilter index by pls_integer;
        type tp_hyperlink is record
        ( cell varchar2(10)
        , url  varchar2(1000)
        );
        type tp_hyperlinks is table of tp_hyperlink index by pls_integer;
        subtype tp_author is varchar2(32767 char);
        type tp_authors is table of pls_integer index by tp_author;
        authors tp_authors;
        type tp_comment is record
        ( text varchar2(32767 char)
        , author tp_author
        , row pls_integer
        , column pls_integer
        , width pls_integer
        , height pls_integer
        );
        type tp_comments is table of tp_comment index by pls_integer;
        type tp_mergecells is table of varchar2(21) index by pls_integer;
        type tp_validation is record
        ( type varchar2(10)
        , errorstyle varchar2(32)
        , showinputmessage boolean
        , prompt varchar2(32767 char)
        , title varchar2(32767 char)
        , error_title varchar2(32767 char)
        , error_txt varchar2(32767 char)
        , showerrormessage boolean
        , formula1 varchar2(32767 char)
        , formula2 varchar2(32767 char)
        , allowBlank boolean
        , sqref varchar2(32767 char)
        );
        type tp_validations is table of tp_validation index by pls_integer;
        type tp_sheet is record
        ( rows tp_rows
        , widths tp_widths
        , name varchar2(100)
        , freeze_rows pls_integer
        , freeze_cols pls_integer
        , autofilters tp_autofilters
        , hyperlinks tp_hyperlinks
        , col_fmts tp_col_fmts
        , row_fmts tp_row_fmts
        , comments tp_comments
        , mergecells tp_mergecells
        , validations tp_validations
        , tabcolor varchar2(8)
        );
        type tp_sheets is table of tp_sheet index by pls_integer;
        type tp_numFmt is record
        ( numFmtId pls_integer
        , formatCode varchar2(100)
        );
        type tp_numFmts is table of tp_numFmt index by pls_integer;
        type tp_fill is record
        ( patternType varchar2(30)
        , fgRGB varchar2(8)
        );
        type tp_fills is table of tp_fill index by pls_integer;
        type tp_cellXfs is table of tp_xf_fmt index by pls_integer;
        type tp_font is record
        ( name varchar2(100)
        , family pls_integer
        , fontsize number
        , theme pls_integer
        , RGB varchar2(8)
        , underline boolean
        , italic boolean
        , bold boolean
        );
        type tp_fonts is table of tp_font index by pls_integer;
        type tp_border is record
        ( top varchar2(17)
        , bottom varchar2(17)
        , left varchar2(17)
        , right varchar2(17)
        );
        type tp_borders is table of tp_border index by pls_integer;
        type tp_numFmtIndexes is table of pls_integer index by pls_integer;
        type tp_strings is table of pls_integer index by varchar2(32767 char);
        type tp_str_ind is table of varchar2(32767 char) index by pls_integer;
        type tp_defined_name is record
        ( name varchar2(32767 char)
        , ref varchar2(32767 char)
        , sheet pls_integer
        );
        type tp_defined_names is table of tp_defined_name index by pls_integer;
        type tp_book is record
        ( sheets tp_sheets
        , strings tp_strings
        , str_ind tp_str_ind
        , str_cnt pls_integer := 0
        , fonts tp_fonts
        , fills tp_fills
        , borders tp_borders
        , numFmts tp_numFmts
        , cellXfs tp_cellXfs
        , numFmtIndexes tp_numFmtIndexes
        , defined_names tp_defined_names
        );
        workbook tp_book;
    --
        g_useXf boolean := true;
    --
        g_addtxt2utf8blob_tmp varchar2(32767);
        procedure addtxt2utf8blob_init( p_blob in out nocopy blob )
        is
        begin
        g_addtxt2utf8blob_tmp := null;
        dbms_lob.createtemporary( p_blob, true );
        end;
        procedure addtxt2utf8blob_finish( p_blob in out nocopy blob )
        is
        t_raw raw(32767);
        begin
        t_raw := utl_i18n.string_to_raw( g_addtxt2utf8blob_tmp, 'AL32UTF8' );
        dbms_lob.writeappend( p_blob, utl_raw.length( t_raw ), t_raw );
        exception
        when value_error
        then
            t_raw := utl_i18n.string_to_raw( substr( g_addtxt2utf8blob_tmp, 1, 16381 ), 'AL32UTF8' );
            dbms_lob.writeappend( p_blob, utl_raw.length( t_raw ), t_raw );
            t_raw := utl_i18n.string_to_raw( substr( g_addtxt2utf8blob_tmp, 16382 ), 'AL32UTF8' );
            dbms_lob.writeappend( p_blob, utl_raw.length( t_raw ), t_raw );
        end;
        procedure addtxt2utf8blob( p_txt varchar2, p_blob in out nocopy blob )
        is
        begin
        g_addtxt2utf8blob_tmp := g_addtxt2utf8blob_tmp || p_txt;
        exception
        when value_error
        then
            addtxt2utf8blob_finish( p_blob );
            g_addtxt2utf8blob_tmp := p_txt;
        end;
    --
        procedure blob2file
        ( p_blob blob
        , p_directory varchar2 := 'MY_DIR'
        , p_filename varchar2 := 'my.xlsx'
        )
        is
        t_fh utl_file.file_type;
        t_len pls_integer := 32767;
        begin
        t_fh := utl_file.fopen( p_directory
                                , p_filename
                                , 'wb'
                                );
        for i in 0 .. trunc( ( dbms_lob.getlength( p_blob ) - 1 ) / t_len )
        loop
            utl_file.put_raw( t_fh
                            , dbms_lob.substr( p_blob
                                            , t_len
                                            , i * t_len + 1
                                            )
                            );
        end loop;
        utl_file.fclose( t_fh );
        end;
    --
        function raw2num( p_raw raw, p_len integer, p_pos integer )
        return number
        is
        begin
        return utl_raw.cast_to_binary_integer( utl_raw.substr( p_raw, p_pos, p_len ), utl_raw.little_endian );
        end;
    --
        function little_endian( p_big number, p_bytes pls_integer := 4 )
        return raw
        is
        begin
        return utl_raw.substr( utl_raw.cast_from_binary_integer( p_big, utl_raw.little_endian ), 1, p_bytes );
        end;
    --
        function blob2num( p_blob blob, p_len integer, p_pos integer )
        return number
        is
        begin
        return utl_raw.cast_to_binary_integer( dbms_lob.substr( p_blob, p_len, p_pos ), utl_raw.little_endian );
        end;
    --
        procedure add1file
        ( p_zipped_blob in out blob
        , p_name varchar2
        , p_content blob
        )
        is
        t_now date;
        t_blob blob;
        t_len integer;
        t_clen integer;
        t_crc32 raw(4) := hextoraw( '00000000' );
        t_compressed boolean := false;
        t_name raw(32767);
        begin
        t_now := sysdate;
        t_len := nvl( dbms_lob.getlength( p_content ), 0 );
        if t_len > 0
        then
            t_blob := utl_compress.lz_compress( p_content );
            t_clen := dbms_lob.getlength( t_blob ) - 18;
            t_compressed := t_clen < t_len;
            t_crc32 := dbms_lob.substr( t_blob, 4, t_clen + 11 );
        end if;
        if not t_compressed
        then
            t_clen := t_len;
            t_blob := p_content;
        end if;
        if p_zipped_blob is null
        then
            dbms_lob.createtemporary( p_zipped_blob, true );
        end if;
        t_name := utl_i18n.string_to_raw( p_name, 'AL32UTF8' );
        dbms_lob.append( p_zipped_blob
                        , utl_raw.concat( c_LOCAL_FILE_HEADER -- Local file header signature
                                        , hextoraw( '1400' )  -- version 2.0
                                        , case when t_name = utl_i18n.string_to_raw( p_name, 'US8PC437' )
                                            then hextoraw( '0000' ) -- no General purpose bits
                                            else hextoraw( '0008' ) -- set Language encoding flag (EFS)
                                            end
                                        , case when t_compressed
                                            then hextoraw( '0800' ) -- deflate
                                            else hextoraw( '0000' ) -- stored
                                            end
                                        , little_endian( to_number( to_char( t_now, 'ss' ) ) / 2
                                                        + to_number( to_char( t_now, 'mi' ) ) * 32
                                                        + to_number( to_char( t_now, 'hh24' ) ) * 2048
                                                        , 2
                                                        ) -- File last modification time
                                        , little_endian( to_number( to_char( t_now, 'dd' ) )
                                                        + to_number( to_char( t_now, 'mm' ) ) * 32
                                                        + ( to_number( to_char( t_now, 'yyyy' ) ) - 1980 ) * 512
                                                        , 2
                                                        ) -- File last modification date
                                        , t_crc32 -- CRC-32
                                        , little_endian( t_clen )                      -- compressed size
                                        , little_endian( t_len )                       -- uncompressed size
                                        , little_endian( utl_raw.length( t_name ), 2 ) -- File name length
                                        , hextoraw( '0000' )                           -- Extra field length
                                        , t_name                                       -- File name
                                        )
                        );
        if t_compressed
        then
            dbms_lob.copy( p_zipped_blob, t_blob, t_clen, dbms_lob.getlength( p_zipped_blob ) + 1, 11 ); -- compressed content
        elsif t_clen > 0
        then
            dbms_lob.copy( p_zipped_blob, t_blob, t_clen, dbms_lob.getlength( p_zipped_blob ) + 1, 1 ); --  content
        end if;
        if dbms_lob.istemporary( t_blob ) = 1
        then
            dbms_lob.freetemporary( t_blob );
        end if;
        end;
    --
        procedure finish_zip( p_zipped_blob in out blob )
        is
        t_cnt pls_integer := 0;
        t_offs integer;
        t_offs_dir_header integer;
        t_offs_end_header integer;
        t_comment raw(32767) := utl_raw.cast_to_raw( 'Implementation by Anton Scheffer, as_xlsx18' );
        begin
        t_offs_dir_header := dbms_lob.getlength( p_zipped_blob );
        t_offs := 1;
        while dbms_lob.substr( p_zipped_blob, utl_raw.length( c_LOCAL_FILE_HEADER ), t_offs ) = c_LOCAL_FILE_HEADER
        loop
            t_cnt := t_cnt + 1;
            dbms_lob.append( p_zipped_blob
                            , utl_raw.concat( hextoraw( '504B0102' )      -- Central directory file header signature
                                            , hextoraw( '1400' )          -- version 2.0
                                            , dbms_lob.substr( p_zipped_blob, 26, t_offs + 4 )
                                            , hextoraw( '0000' )          -- File comment length
                                            , hextoraw( '0000' )          -- Disk number where file starts
                                            , hextoraw( '0000' )          -- Internal file attributes =>
                                                                        --     0000 binary file
                                                                        --     0100 (ascii)text file
                                            , case
                                                when dbms_lob.substr( p_zipped_blob
                                                                    , 1
                                                                    , t_offs + 30 + blob2num( p_zipped_blob, 2, t_offs + 26 ) - 1
                                                                    ) in ( hextoraw( '2F' ) -- /
                                                                        , hextoraw( '5C' ) -- \\
                                                                        )
                                                then hextoraw( '10000000' ) -- a directory/folder
                                                else hextoraw( '2000B681' ) -- a file
                                            end                         -- External file attributes
                                            , little_endian( t_offs - 1 ) -- Relative offset of local file header
                                            , dbms_lob.substr( p_zipped_blob
                                                            , blob2num( p_zipped_blob, 2, t_offs + 26 )
                                                            , t_offs + 30
                                                            )            -- File name
                                            )
                            );
            t_offs := t_offs + 30 + blob2num( p_zipped_blob, 4, t_offs + 18 )  -- compressed size
                                + blob2num( p_zipped_blob, 2, t_offs + 26 )  -- File name length
                                + blob2num( p_zipped_blob, 2, t_offs + 28 ); -- Extra field length
        end loop;
        t_offs_end_header := dbms_lob.getlength( p_zipped_blob );
        dbms_lob.append( p_zipped_blob
                        , utl_raw.concat( c_END_OF_CENTRAL_DIRECTORY                                -- End of central directory signature
                                        , hextoraw( '0000' )                                        -- Number of this disk
                                        , hextoraw( '0000' )                                        -- Disk where central directory starts
                                        , little_endian( t_cnt, 2 )                                 -- Number of central directory records on this disk
                                        , little_endian( t_cnt, 2 )                                 -- Total number of central directory records
                                        , little_endian( t_offs_end_header - t_offs_dir_header )    -- Size of central directory
                                        , little_endian( t_offs_dir_header )                        -- Offset of start of central directory, relative to start of archive
                                        , little_endian( nvl( utl_raw.length( t_comment ), 0 ), 2 ) -- ZIP file comment length
                                        , t_comment
                                        )
                        );
        end;
    --
        function alfan_col( p_col pls_integer )
        return varchar2
        is
        begin
        return case
                    when p_col > 702 then chr( 64 + trunc( ( p_col - 27 ) / 676 ) ) || chr( 65 + mod( trunc( ( p_col - 1 ) / 26 ) - 1, 26 ) ) || chr( 65 + mod( p_col - 1, 26 ) )
                    when p_col > 26  then chr( 64 + trunc( ( p_col - 1 ) / 26 ) ) || chr( 65 + mod( p_col - 1, 26 ) )
                    else chr( 64 + p_col )
                end;
        end;
    --
        function col_alfan( p_col varchar2 )
        return pls_integer
        is
        begin
        return ascii( substr( p_col, -1 ) ) - 64
                + nvl( ( ascii( substr( p_col, -2, 1 ) ) - 64 ) * 26, 0 )
                + nvl( ( ascii( substr( p_col, -3, 1 ) ) - 64 ) * 676, 0 );
        end;
    --
        procedure clear_workbook
        is
        s pls_integer;
        t_row_ind pls_integer;
        begin
        s := workbook.sheets.first;
        while s is not null
        loop
            t_row_ind := workbook.sheets( s ).rows.first();
            while t_row_ind is not null
            loop
            workbook.sheets( s ).rows( t_row_ind ).delete();
            t_row_ind := workbook.sheets( s ).rows.next( t_row_ind );
            end loop;
            workbook.sheets( s ).rows.delete();
            workbook.sheets( s ).widths.delete();
            workbook.sheets( s ).autofilters.delete();
            workbook.sheets( s ).hyperlinks.delete();
            workbook.sheets( s ).col_fmts.delete();
            workbook.sheets( s ).row_fmts.delete();
            workbook.sheets( s ).comments.delete();
            workbook.sheets( s ).mergecells.delete();
            workbook.sheets( s ).validations.delete();
            s := workbook.sheets.next( s );
        end loop;
        workbook.strings.delete();
        workbook.str_ind.delete();
        workbook.fonts.delete();
        workbook.fills.delete();
        workbook.borders.delete();
        workbook.numFmts.delete();
        workbook.cellXfs.delete();
        workbook.defined_names.delete();
        workbook := null;
        end;
    --
        procedure set_tabcolor
        ( p_tabcolor varchar2 -- this is a hex ALPHA Red Green Blue value
        , p_sheet pls_integer := null
        )
        is
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        begin
        workbook.sheets( t_sheet ).tabcolor := substr( p_tabcolor, 1, 8 );
        end;
    --
        procedure new_sheet
        ( p_sheetname varchar2 := null
        , p_tabcolor varchar2 := null -- this is a hex ALPHA Red Green Blue value
        )
        is
        t_nr pls_integer := workbook.sheets.count() + 1;
        t_ind pls_integer;
        begin
        workbook.sheets( t_nr ).name := nvl( dbms_xmlgen.convert( translate( p_sheetname, 'a/\\[]*:?', 'a' ) ), 'Sheet' || t_nr );
        if workbook.strings.count() = 0
        then
            workbook.str_cnt := 0;
        end if;
        if workbook.fonts.count() = 0
        then
            t_ind := get_font( 'Calibri' );
        end if;
        if workbook.fills.count() = 0
        then
            t_ind := get_fill( 'none' );
            t_ind := get_fill( 'gray125' );
        end if;
        if workbook.borders.count() = 0
        then
            t_ind := get_border( '', '', '', '' );
        end if;
        set_tabcolor( p_tabcolor, t_nr );
        end;
    --
        procedure set_col_width
        ( p_sheet pls_integer
        , p_col pls_integer
        , p_format varchar2
        )
        is
        t_width number;
        t_nr_chr pls_integer;
        begin
        if p_format is null
        then
            return;
        end if;
        if instr( p_format, ';' ) > 0
        then
            t_nr_chr := length( translate( substr( p_format, 1, instr( p_format, ';' ) - 1 ), 'a\\\"', 'a' ) );
        else
            t_nr_chr := length( translate( p_format, 'a\\\"', 'a' ) );
        end if;
        t_width := trunc( ( t_nr_chr * 7 + 5 ) / 7 * 256 ) / 256; -- assume default 11 point Calibri
        if workbook.sheets( p_sheet ).widths.exists( p_col )
        then
            workbook.sheets( p_sheet ).widths( p_col ) :=
            greatest( workbook.sheets( p_sheet ).widths( p_col )
                    , t_width
                    );
        else
            workbook.sheets( p_sheet ).widths( p_col ) := greatest( t_width, 8.43 );
        end if;
        end;
    --
        function OraFmt2Excel( p_format varchar2 := null )
        return varchar2
        is
        t_format varchar2(1000) := substr( p_format, 1, 1000 );
        begin
        t_format := replace( replace( t_format, 'hh24', 'hh' ), 'hh12', 'hh' );
        t_format := replace( t_format, 'mi', 'mm' );
        t_format := replace( replace( replace( t_format, 'AM', '~~' ), 'PM', '~~' ), '~~', 'AM/PM' );
        t_format := replace( replace( replace( t_format, 'am', '~~' ), 'pm', '~~' ), '~~', 'AM/PM' );
        t_format := replace( replace( t_format, 'day', 'DAY' ), 'DAY', 'dddd' );
        t_format := replace( replace( t_format, 'dy', 'DY' ), 'DAY', 'ddd' );
        t_format := replace( replace( t_format, 'RR', 'RR' ), 'RR', 'YY' );
        t_format := replace( replace( t_format, 'month', 'MONTH' ), 'MONTH', 'mmmm' );
        t_format := replace( replace( t_format, 'mon', 'MON' ), 'MON', 'mmm' );
        t_format := replace( t_format, '9', '#' );
        t_format := replace( t_format, 'D', '.' );
        t_format := replace( t_format, 'G', ',' );
        return t_format;
        end;
    --
        function get_numFmt( p_format varchar2 := null )
        return pls_integer
        is
        t_cnt pls_integer;
        t_numFmtId pls_integer;
        begin
        if p_format is null
        then
            return 0;
        end if;
        t_cnt := workbook.numFmts.count();
        for i in 1 .. t_cnt
        loop
            if workbook.numFmts( i ).formatCode = p_format
            then
            t_numFmtId := workbook.numFmts( i ).numFmtId;
            exit;
            end if;
        end loop;
        if t_numFmtId is null
        then
            t_numFmtId := case when t_cnt = 0 then 164 else workbook.numFmts( t_cnt ).numFmtId + 1 end;
            t_cnt := t_cnt + 1;
            workbook.numFmts( t_cnt ).numFmtId := t_numFmtId;
            workbook.numFmts( t_cnt ).formatCode := p_format;
            workbook.numFmtIndexes( t_numFmtId ) := t_cnt;
        end if;
        return t_numFmtId;
        end;
    --
        function get_font
        ( p_name varchar2
        , p_family pls_integer := 2
        , p_fontsize number := 11
        , p_theme pls_integer := 1
        , p_underline boolean := false
        , p_italic boolean := false
        , p_bold boolean := false
        , p_rgb varchar2 := null -- this is a hex ALPHA Red Green Blue value
        )
        return pls_integer
        is
        t_ind pls_integer;
        begin
        if workbook.fonts.count() > 0
        then
            for f in 0 .. workbook.fonts.count() - 1
            loop
            if (   workbook.fonts( f ).name = p_name
                and workbook.fonts( f ).family = p_family
                and workbook.fonts( f ).fontsize = p_fontsize
                and workbook.fonts( f ).theme = p_theme
                and workbook.fonts( f ).underline = p_underline
                and workbook.fonts( f ).italic = p_italic
                and workbook.fonts( f ).bold = p_bold
                and ( workbook.fonts( f ).rgb = p_rgb
                    or ( workbook.fonts( f ).rgb is null and p_rgb is null )
                    )
                )
            then
                return f;
            end if;
            end loop;
        end if;
        t_ind := workbook.fonts.count();
        workbook.fonts( t_ind ).name := p_name;
        workbook.fonts( t_ind ).family := p_family;
        workbook.fonts( t_ind ).fontsize := p_fontsize;
        workbook.fonts( t_ind ).theme := p_theme;
        workbook.fonts( t_ind ).underline := p_underline;
        workbook.fonts( t_ind ).italic := p_italic;
        workbook.fonts( t_ind ).bold := p_bold;
        workbook.fonts( t_ind ).rgb := p_rgb;
        return t_ind;
        end;
    --
        function get_fill
        ( p_patternType varchar2
        , p_fgRGB varchar2 := null
        )
        return pls_integer
        is
        t_ind pls_integer;
        begin
        if workbook.fills.count() > 0
        then
            for f in 0 .. workbook.fills.count() - 1
            loop
            if (   workbook.fills( f ).patternType = p_patternType
                and nvl( workbook.fills( f ).fgRGB, 'x' ) = nvl( upper( p_fgRGB ), 'x' )
                )
            then
                return f;
            end if;
            end loop;
        end if;
        t_ind := workbook.fills.count();
        workbook.fills( t_ind ).patternType := p_patternType;
        workbook.fills( t_ind ).fgRGB := upper( p_fgRGB );
        return t_ind;
        end;
    --
        function get_border
        ( p_top varchar2 := 'thin'
        , p_bottom varchar2 := 'thin'
        , p_left varchar2 := 'thin'
        , p_right varchar2 := 'thin'
        )
        return pls_integer
        is
        t_ind pls_integer;
        begin
        if workbook.borders.count() > 0
        then
            for b in 0 .. workbook.borders.count() - 1
            loop
            if (   nvl( workbook.borders( b ).top, 'x' ) = nvl( p_top, 'x' )
                and nvl( workbook.borders( b ).bottom, 'x' ) = nvl( p_bottom, 'x' )
                and nvl( workbook.borders( b ).left, 'x' ) = nvl( p_left, 'x' )
                and nvl( workbook.borders( b ).right, 'x' ) = nvl( p_right, 'x' )
                )
            then
                return b;
            end if;
            end loop;
        end if;
        t_ind := workbook.borders.count();
        workbook.borders( t_ind ).top := p_top;
        workbook.borders( t_ind ).bottom := p_bottom;
        workbook.borders( t_ind ).left := p_left;
        workbook.borders( t_ind ).right := p_right;
        return t_ind;
        end;
    --
        function get_alignment
        ( p_vertical varchar2 := null
        , p_horizontal varchar2 := null
        , p_wrapText boolean := null
        )
        return tp_alignment
        is
        t_rv tp_alignment;
        begin
        t_rv.vertical := p_vertical;
        t_rv.horizontal := p_horizontal;
        t_rv.wrapText := p_wrapText;
        return t_rv;
        end;
    --
        function get_XfId
        ( p_sheet pls_integer
        , p_col pls_integer
        , p_row pls_integer
        , p_numFmtId pls_integer := null
        , p_fontId pls_integer := null
        , p_fillId pls_integer := null
        , p_borderId pls_integer := null
        , p_alignment tp_alignment := null
        )
        return varchar2
        is
        t_cnt pls_integer;
        t_XfId pls_integer;
        t_XF tp_XF_fmt;
        t_col_XF tp_XF_fmt;
        t_row_XF tp_XF_fmt;
        begin
        if not g_useXf
        then
            return '';
        end if;
        if workbook.sheets( p_sheet ).col_fmts.exists( p_col )
        then
            t_col_XF := workbook.sheets( p_sheet ).col_fmts( p_col );
        end if;
        if workbook.sheets( p_sheet ).row_fmts.exists( p_row )
        then
            t_row_XF := workbook.sheets( p_sheet ).row_fmts( p_row );
        end if;
        t_XF.numFmtId := coalesce( p_numFmtId, t_col_XF.numFmtId, t_row_XF.numFmtId, 0 );
        t_XF.fontId := coalesce( p_fontId, t_col_XF.fontId, t_row_XF.fontId, 0 );
        t_XF.fillId := coalesce( p_fillId, t_col_XF.fillId, t_row_XF.fillId, 0 );
        t_XF.borderId := coalesce( p_borderId, t_col_XF.borderId, t_row_XF.borderId, 0 );
        t_XF.alignment := get_alignment
                            ( coalesce( p_alignment.vertical, t_col_XF.alignment.vertical, t_row_XF.alignment.vertical )
                            , coalesce( p_alignment.horizontal, t_col_XF.alignment.horizontal, t_row_XF.alignment.horizontal )
                            , coalesce( p_alignment.wrapText, t_col_XF.alignment.wrapText, t_row_XF.alignment.wrapText )
                            );
        if (   t_XF.numFmtId + t_XF.fontId + t_XF.fillId + t_XF.borderId = 0
            and t_XF.alignment.vertical is null
            and t_XF.alignment.horizontal is null
            and not nvl( t_XF.alignment.wrapText, false )
            )
        then
            return '';
        end if;
        if t_XF.numFmtId > 0
        then
            set_col_width( p_sheet, p_col, workbook.numFmts( workbook.numFmtIndexes( t_XF.numFmtId ) ).formatCode );
        end if;
        t_cnt := workbook.cellXfs.count();
        for i in 1 .. t_cnt
        loop
            if (   workbook.cellXfs( i ).numFmtId = t_XF.numFmtId
                and workbook.cellXfs( i ).fontId = t_XF.fontId
                and workbook.cellXfs( i ).fillId = t_XF.fillId
                and workbook.cellXfs( i ).borderId = t_XF.borderId
                and nvl( workbook.cellXfs( i ).alignment.vertical, 'x' ) = nvl( t_XF.alignment.vertical, 'x' )
                and nvl( workbook.cellXfs( i ).alignment.horizontal, 'x' ) = nvl( t_XF.alignment.horizontal, 'x' )
                and nvl( workbook.cellXfs( i ).alignment.wrapText, false ) = nvl( t_XF.alignment.wrapText, false )
                )
            then
            t_XfId := i;
            exit;
            end if;
        end loop;
        if t_XfId is null
        then
            t_cnt := t_cnt + 1;
            t_XfId := t_cnt;
            workbook.cellXfs( t_cnt ) := t_XF;
        end if;
        return 's=\"' || t_XfId || '\"';
        end;
    --
        procedure cell
        ( p_col pls_integer
        , p_row pls_integer
        , p_value number
        , p_numFmtId pls_integer := null
        , p_fontId pls_integer := null
        , p_fillId pls_integer := null
        , p_borderId pls_integer := null
        , p_alignment tp_alignment := null
        , p_sheet pls_integer := null
        )
        is
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        begin
        workbook.sheets( t_sheet ).rows( p_row )( p_col ).value := p_value;
        workbook.sheets( t_sheet ).rows( p_row )( p_col ).style := null;
        workbook.sheets( t_sheet ).rows( p_row )( p_col ).style := get_XfId( t_sheet, p_col, p_row, p_numFmtId, p_fontId, p_fillId, p_borderId, p_alignment );
        end;
    --
        function add_string( p_string varchar2 )
        return pls_integer
        is
        t_cnt pls_integer;
        begin
        if workbook.strings.exists( nvl( p_string, '' ) )
        then
            t_cnt := workbook.strings( nvl( p_string, '' ) );
        else
            t_cnt := workbook.strings.count();
            workbook.str_ind( t_cnt ) := p_string;
            workbook.strings( nvl( p_string, '' ) ) := t_cnt;
        end if;
        workbook.str_cnt := workbook.str_cnt + 1;
        return t_cnt;
        end;
    --
        procedure cell
        ( p_col pls_integer
        , p_row pls_integer
        , p_value varchar2
        , p_numFmtId pls_integer := null
        , p_fontId pls_integer := null
        , p_fillId pls_integer := null
        , p_borderId pls_integer := null
        , p_alignment tp_alignment := null
        , p_sheet pls_integer := null
        )
        is
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        t_alignment tp_alignment := p_alignment;
        begin
        workbook.sheets( t_sheet ).rows( p_row )( p_col ).value := add_string( p_value );
        if t_alignment.wrapText is null and instr( p_value, chr(13) ) > 0
        then
            t_alignment.wrapText := true;
        end if;
        workbook.sheets( t_sheet ).rows( p_row )( p_col ).style := 't=\"s\" ' || get_XfId( t_sheet, p_col, p_row, p_numFmtId, p_fontId, p_fillId, p_borderId, t_alignment );
        end;
    --
        procedure cell
        ( p_col pls_integer
        , p_row pls_integer
        , p_value date
        , p_numFmtId pls_integer := null
        , p_fontId pls_integer := null
        , p_fillId pls_integer := null
        , p_borderId pls_integer := null
        , p_alignment tp_alignment := null
        , p_sheet pls_integer := null
        )
        is
        t_numFmtId pls_integer := p_numFmtId;
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        begin
        workbook.sheets( t_sheet ).rows( p_row )( p_col ).value := p_value - to_date('01-01-1904','DD-MM-YYYY');
        if t_numFmtId is null
            and not (   workbook.sheets( t_sheet ).col_fmts.exists( p_col )
                    and workbook.sheets( t_sheet ).col_fmts( p_col ).numFmtId is not null
                    )
            and not (   workbook.sheets( t_sheet ).row_fmts.exists( p_row )
                    and workbook.sheets( t_sheet ).row_fmts( p_row ).numFmtId is not null
                    )
        then
            t_numFmtId := get_numFmt( 'dd/mm/yyyy' );
        end if;
        workbook.sheets( t_sheet ).rows( p_row )( p_col ).style := get_XfId( t_sheet, p_col, p_row, t_numFmtId, p_fontId, p_fillId, p_borderId, p_alignment );
        end;
    --
        procedure hyperlink
        ( p_col pls_integer
        , p_row pls_integer
        , p_url varchar2
        , p_value varchar2 := null
        , p_sheet pls_integer := null
        )
        is
        t_ind pls_integer;
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        begin
        workbook.sheets( t_sheet ).rows( p_row )( p_col ).value := add_string( nvl( p_value, p_url ) );
        workbook.sheets( t_sheet ).rows( p_row )( p_col ).style := 't=\"s\" ' || get_XfId( t_sheet, p_col, p_row, '', get_font( 'Calibri', p_theme => 10, p_underline => true ) );
        t_ind := workbook.sheets( t_sheet ).hyperlinks.count() + 1;
        workbook.sheets( t_sheet ).hyperlinks( t_ind ).cell := alfan_col( p_col ) || p_row;
        workbook.sheets( t_sheet ).hyperlinks( t_ind ).url := p_url;
        end;
    --
        procedure comment
        ( p_col pls_integer
        , p_row pls_integer
        , p_text varchar2
        , p_author varchar2 := null
        , p_width pls_integer := 150
        , p_height pls_integer := 100
        , p_sheet pls_integer := null
        )
        is
        t_ind pls_integer;
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        begin
        t_ind := workbook.sheets( t_sheet ).comments.count() + 1;
        workbook.sheets( t_sheet ).comments( t_ind ).row := p_row;
        workbook.sheets( t_sheet ).comments( t_ind ).column := p_col;
        workbook.sheets( t_sheet ).comments( t_ind ).text := dbms_xmlgen.convert( p_text );
        workbook.sheets( t_sheet ).comments( t_ind ).author := dbms_xmlgen.convert( p_author );
        workbook.sheets( t_sheet ).comments( t_ind ).width := p_width;
        workbook.sheets( t_sheet ).comments( t_ind ).height := p_height;
        end;
    --
        procedure mergecells
        ( p_tl_col pls_integer -- top left
        , p_tl_row pls_integer
        , p_br_col pls_integer -- bottom right
        , p_br_row pls_integer
        , p_sheet pls_integer := null
        )
        is
        t_ind pls_integer;
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        begin
        t_ind := workbook.sheets( t_sheet ).mergecells.count() + 1;
        workbook.sheets( t_sheet ).mergecells( t_ind ) := alfan_col( p_tl_col ) || p_tl_row || ':' || alfan_col( p_br_col ) || p_br_row;
        end;
    --
        procedure add_validation
        ( p_type varchar2
        , p_sqref varchar2
        , p_style varchar2 := 'stop' -- stop, warning, information
        , p_formula1 varchar2 := null
        , p_formula2 varchar2 := null
        , p_title varchar2 := null
        , p_prompt varchar := null
        , p_show_error boolean := false
        , p_error_title varchar2 := null
        , p_error_txt varchar2 := null
        , p_sheet pls_integer := null
        )
        is
        t_ind pls_integer;
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        begin
        t_ind := workbook.sheets( t_sheet ).validations.count() + 1;
        workbook.sheets( t_sheet ).validations( t_ind ).type := p_type;
        workbook.sheets( t_sheet ).validations( t_ind ).errorstyle := p_style;
        workbook.sheets( t_sheet ).validations( t_ind ).sqref := p_sqref;
        workbook.sheets( t_sheet ).validations( t_ind ).formula1 := p_formula1;
        workbook.sheets( t_sheet ).validations( t_ind ).error_title := p_error_title;
        workbook.sheets( t_sheet ).validations( t_ind ).error_txt := p_error_txt;
        workbook.sheets( t_sheet ).validations( t_ind ).title := p_title;
        workbook.sheets( t_sheet ).validations( t_ind ).prompt := p_prompt;
        workbook.sheets( t_sheet ).validations( t_ind ).showerrormessage := p_show_error;
        end;
    --
        procedure list_validation
        ( p_sqref_col pls_integer
        , p_sqref_row pls_integer
        , p_tl_col pls_integer -- top left
        , p_tl_row pls_integer
        , p_br_col pls_integer -- bottom right
        , p_br_row pls_integer
        , p_style varchar2 := 'stop' -- stop, warning, information
        , p_title varchar2 := null
        , p_prompt varchar := null
        , p_show_error boolean := false
        , p_error_title varchar2 := null
        , p_error_txt varchar2 := null
        , p_sheet pls_integer := null
        )
        is
        begin
        add_validation( 'list'
                        , alfan_col( p_sqref_col ) || p_sqref_row
                        , p_style => lower( p_style )
                        , p_formula1 => '$' || alfan_col( p_tl_col ) || '$' ||  p_tl_row || ':$' || alfan_col( p_br_col ) || '$' || p_br_row
                        , p_title => p_title
                        , p_prompt => p_prompt
                        , p_show_error => p_show_error
                        , p_error_title => p_error_title
                        , p_error_txt => p_error_txt
                        , p_sheet => p_sheet
                        );
        end;
    --
        procedure list_validation
        ( p_sqref_col pls_integer
        , p_sqref_row pls_integer
        , p_defined_name varchar2
        , p_style varchar2 := 'stop' -- stop, warning, information
        , p_title varchar2 := null
        , p_prompt varchar := null
        , p_show_error boolean := false
        , p_error_title varchar2 := null
        , p_error_txt varchar2 := null
        , p_sheet pls_integer := null
        )
        is
        begin
        add_validation( 'list'
                        , alfan_col( p_sqref_col ) || p_sqref_row
                        , p_style => lower( p_style )
                        , p_formula1 => p_defined_name
                        , p_title => p_title
                        , p_prompt => p_prompt
                        , p_show_error => p_show_error
                        , p_error_title => p_error_title
                        , p_error_txt => p_error_txt
                        , p_sheet => p_sheet
                        );
        end;
    --
        procedure defined_name
        ( p_tl_col pls_integer -- top left
        , p_tl_row pls_integer
        , p_br_col pls_integer -- bottom right
        , p_br_row pls_integer
        , p_name varchar2
        , p_sheet pls_integer := null
        , p_localsheet pls_integer := null
        )
        is
        t_ind pls_integer;
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        begin
        t_ind := workbook.defined_names.count() + 1;
        workbook.defined_names( t_ind ).name := p_name;
        workbook.defined_names( t_ind ).ref := 'Sheet' || t_sheet || '!$' || alfan_col( p_tl_col ) || '$' ||  p_tl_row || ':$' || alfan_col( p_br_col ) || '$' || p_br_row;
        workbook.defined_names( t_ind ).sheet := p_localsheet;
        end;
    --
        procedure set_column_width
        ( p_col pls_integer
        , p_width number
        , p_sheet pls_integer := null
        )
        is
        begin
        workbook.sheets( nvl( p_sheet, workbook.sheets.count() ) ).widths( p_col ) := p_width;
        end;
    --
        procedure set_column
        ( p_col pls_integer
        , p_numFmtId pls_integer := null
        , p_fontId pls_integer := null
        , p_fillId pls_integer := null
        , p_borderId pls_integer := null
        , p_alignment tp_alignment := null
        , p_sheet pls_integer := null
        )
        is
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        begin
        workbook.sheets( t_sheet ).col_fmts( p_col ).numFmtId := p_numFmtId;
        workbook.sheets( t_sheet ).col_fmts( p_col ).fontId := p_fontId;
        workbook.sheets( t_sheet ).col_fmts( p_col ).fillId := p_fillId;
        workbook.sheets( t_sheet ).col_fmts( p_col ).borderId := p_borderId;
        workbook.sheets( t_sheet ).col_fmts( p_col ).alignment := p_alignment;
        end;
    --
        procedure set_row
        ( p_row pls_integer
        , p_numFmtId pls_integer := null
        , p_fontId pls_integer := null
        , p_fillId pls_integer := null
        , p_borderId pls_integer := null
        , p_alignment tp_alignment := null
        , p_sheet pls_integer := null
        , p_height number := null
        )
        is
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        begin
        workbook.sheets( t_sheet ).row_fmts( p_row ).numFmtId := p_numFmtId;
        workbook.sheets( t_sheet ).row_fmts( p_row ).fontId := p_fontId;
        workbook.sheets( t_sheet ).row_fmts( p_row ).fillId := p_fillId;
        workbook.sheets( t_sheet ).row_fmts( p_row ).borderId := p_borderId;
        workbook.sheets( t_sheet ).row_fmts( p_row ).alignment := p_alignment;
        workbook.sheets( t_sheet ).row_fmts( p_row ).height := p_height;
        end;
    --
        procedure freeze_rows
        ( p_nr_rows pls_integer := 1
        , p_sheet pls_integer := null
        )
        is
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        begin
        workbook.sheets( t_sheet ).freeze_cols := null;
        workbook.sheets( t_sheet ).freeze_rows := p_nr_rows;
        end;
    --
        procedure freeze_cols
        ( p_nr_cols pls_integer := 1
        , p_sheet pls_integer := null
        )
        is
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        begin
        workbook.sheets( t_sheet ).freeze_rows := null;
        workbook.sheets( t_sheet ).freeze_cols := p_nr_cols;
        end;
    --
        procedure freeze_pane
        ( p_col pls_integer
        , p_row pls_integer
        , p_sheet pls_integer := null
        )
        is
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        begin
        workbook.sheets( t_sheet ).freeze_rows := p_row;
        workbook.sheets( t_sheet ).freeze_cols := p_col;
        end;
    --
        procedure set_autofilter
        ( p_column_start pls_integer := null
        , p_column_end pls_integer := null
        , p_row_start pls_integer := null
        , p_row_end pls_integer := null
        , p_sheet pls_integer := null
        )
        is
        t_ind pls_integer;
        t_sheet pls_integer := nvl( p_sheet, workbook.sheets.count() );
        begin
        t_ind := 1;
        workbook.sheets( t_sheet ).autofilters( t_ind ).column_start := p_column_start;
        workbook.sheets( t_sheet ).autofilters( t_ind ).column_end := p_column_end;
        workbook.sheets( t_sheet ).autofilters( t_ind ).row_start := p_row_start;
        workbook.sheets( t_sheet ).autofilters( t_ind ).row_end := p_row_end;
        defined_name
            ( p_column_start
            , p_row_start
            , p_column_end
            , p_row_end
            , '_xlnm._FilterDatabase'
            , t_sheet
            , t_sheet - 1
            );
        end;
    --
    /*
        procedure add1xml
        ( p_excel in out nocopy blob
        , p_filename varchar2
        , p_xml clob
        )
        is
        t_tmp blob;
        c_step constant number := 24396;
        begin
        dbms_lob.createtemporary( t_tmp, true );
        for i in 0 .. trunc( length( p_xml ) / c_step )
        loop
            dbms_lob.append( t_tmp, utl_i18n.string_to_raw( substr( p_xml, i * c_step + 1, c_step ), 'AL32UTF8' ) );
        end loop;
        add1file( p_excel, p_filename, t_tmp );
        dbms_lob.freetemporary( t_tmp );
        end;
    */
    --
        procedure add1xml
        ( p_excel in out nocopy blob
        , p_filename varchar2
        , p_xml clob
        )
        is
        t_tmp blob;
        dest_offset integer := 1;
        src_offset integer := 1;
        lang_context integer;
        warning integer;
        begin
        lang_context := dbms_lob.DEFAULT_LANG_CTX;
        dbms_lob.createtemporary( t_tmp, true );
        dbms_lob.converttoblob
            ( t_tmp
            , p_xml
            , dbms_lob.lobmaxsize
            , dest_offset
            , src_offset
            ,  nls_charset_id( 'AL32UTF8'  )
            , lang_context
            , warning
            );
        add1file( p_excel, p_filename, t_tmp );
        dbms_lob.freetemporary( t_tmp );
        end;
    --
        function finish
        return blob
        is
        t_excel blob;
        t_yyy blob;
        t_xxx clob;
        t_tmp varchar2(32767 char);
        t_str varchar2(32767 char);
        t_c number;
        t_h number;
        t_w number;
        t_cw number;
        s pls_integer;
        t_row_ind pls_integer;
        t_col_min pls_integer;
        t_col_max pls_integer;
        t_col_ind pls_integer;
        t_len pls_integer;
        begin
        dbms_lob.createtemporary( t_excel, true );
        t_xxx := '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
    <Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">
    <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>
    <Default Extension=\"xml\" ContentType=\"application/xml\"/>
    <Default Extension=\"vml\" ContentType=\"application/vnd.openxmlformats-officedocument.vmlDrawing\"/>
    <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>';
        s := workbook.sheets.first;
        while s is not null
        loop
            t_xxx := t_xxx || ( '
    <Override PartName=\"/xl/worksheets/sheet' || s || '.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>' );
            s := workbook.sheets.next( s );
        end loop;
        t_xxx := t_xxx || '
    <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>
    <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>
    <Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>
    <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>
    <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>';
        s := workbook.sheets.first;
        while s is not null
        loop
            if workbook.sheets( s ).comments.count() > 0
            then
            t_xxx := t_xxx || ( '
    <Override PartName=\"/xl/comments' || s || '.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\"/>' );
            end if;
            s := workbook.sheets.next( s );
        end loop;
        t_xxx := t_xxx || '
    </Types>';
        add1xml( t_excel, '[Content_Types].xml', t_xxx );
        t_xxx := '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
    <cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">
    <dc:creator>' || sys_context( 'userenv', 'os_user' ) || '</dc:creator>
    <cp:lastModifiedBy>' || sys_context( 'userenv', 'os_user' ) || '</cp:lastModifiedBy>
    <dcterms:created xsi:type=\"dcterms:W3CDTF\">' || to_char( current_timestamp, 'yyyy-mm-dd\"T\"hh24:mi:ssTZH:TZM' ) || '</dcterms:created>
    <dcterms:modified xsi:type=\"dcterms:W3CDTF\">' || to_char( current_timestamp, 'yyyy-mm-dd\"T\"hh24:mi:ssTZH:TZM' ) || '</dcterms:modified>
    </cp:coreProperties>';
        add1xml( t_excel, 'docProps/core.xml', t_xxx );
        t_xxx := '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
    <Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\">
    <Application>Microsoft Excel</Application>
    <DocSecurity>0</DocSecurity>
    <ScaleCrop>false</ScaleCrop>
    <HeadingPairs>
    <vt:vector size=\"2\" baseType=\"variant\">
    <vt:variant>
    <vt:lpstr>Worksheets</vt:lpstr>
    </vt:variant>
    <vt:variant>
    <vt:i4>' || workbook.sheets.count() || '</vt:i4>
    </vt:variant>
    </vt:vector>
    </HeadingPairs>
    <TitlesOfParts>
    <vt:vector size=\"' || workbook.sheets.count() || '\" baseType=\"lpstr\">';
        s := workbook.sheets.first;
        while s is not null
        loop
            t_xxx := t_xxx || ( '
    <vt:lpstr>' || workbook.sheets( s ).name || '</vt:lpstr>' );
            s := workbook.sheets.next( s );
        end loop;
        t_xxx := t_xxx || '</vt:vector>
    </TitlesOfParts>
    <LinksUpToDate>false</LinksUpToDate>
    <SharedDoc>false</SharedDoc>
    <HyperlinksChanged>false</HyperlinksChanged>
    <AppVersion>14.0300</AppVersion>
    </Properties>';
        add1xml( t_excel, 'docProps/app.xml', t_xxx );
        t_xxx := '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
    <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">
    <Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/>
    <Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/>
    <Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/>
    </Relationships>';
        add1xml( t_excel, '_rels/.rels', t_xxx );
        t_xxx := '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
    <styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">';
        if workbook.numFmts.count() > 0
        then
            t_xxx := t_xxx || ( '<numFmts count=\"' || workbook.numFmts.count() || '\">' );
            for n in 1 .. workbook.numFmts.count()
            loop
            t_xxx := t_xxx || ( '<numFmt numFmtId=\"' || workbook.numFmts( n ).numFmtId || '\" formatCode=\"' || workbook.numFmts( n ).formatCode || '\"/>' );
            end loop;
            t_xxx := t_xxx || '</numFmts>';
        end if;
        t_xxx := t_xxx || ( '<fonts count=\"' || workbook.fonts.count() || '\" x14ac:knownFonts=\"1\">' );
        for f in 0 .. workbook.fonts.count() - 1
        loop
            t_xxx := t_xxx || ( '<font>' ||
            case when workbook.fonts( f ).bold then '<b/>' end ||
            case when workbook.fonts( f ).italic then '<i/>' end ||
            case when workbook.fonts( f ).underline then '<u/>' end ||
    '<sz val=\"' || to_char( workbook.fonts( f ).fontsize, 'TM9', 'NLS_NUMERIC_CHARACTERS=.,' )  || '\"/>
    <color ' || case when workbook.fonts( f ).rgb is not null
                    then 'rgb=\"' || workbook.fonts( f ).rgb
                    else 'theme=\"' || workbook.fonts( f ).theme
                end || '\"/>
    <name val=\"' || workbook.fonts( f ).name || '\"/>
    <family val=\"' || workbook.fonts( f ).family || '\"/>
    <scheme val=\"none\"/>
    </font>' );
        end loop;
        t_xxx := t_xxx || ( '</fonts>
    <fills count=\"' || workbook.fills.count() || '\">' );
        for f in 0 .. workbook.fills.count() - 1
        loop
            t_xxx := t_xxx || ( '<fill><patternFill patternType=\"' || workbook.fills( f ).patternType || '\">' ||
                case when workbook.fills( f ).fgRGB is not null then '<fgColor rgb=\"' || workbook.fills( f ).fgRGB || '\"/>' end ||
                '</patternFill></fill>' );
        end loop;
        t_xxx := t_xxx || ( '</fills>
    <borders count=\"' || workbook.borders.count() || '\">' );
        for b in 0 .. workbook.borders.count() - 1
        loop
            t_xxx := t_xxx || ( '<border>' ||
                case when workbook.borders( b ).left   is null then '<left/>'   else '<left style=\"'   || workbook.borders( b ).left   || '\"/>' end ||
                case when workbook.borders( b ).right  is null then '<right/>'  else '<right style=\"'  || workbook.borders( b ).right  || '\"/>' end ||
                case when workbook.borders( b ).top    is null then '<top/>'    else '<top style=\"'    || workbook.borders( b ).top    || '\"/>' end ||
                case when workbook.borders( b ).bottom is null then '<bottom/>' else '<bottom style=\"' || workbook.borders( b ).bottom || '\"/>' end ||
                '</border>' );
        end loop;
        t_xxx := t_xxx || ( '</borders>
    <cellStyleXfs count=\"1\">
    <xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/>
    </cellStyleXfs>
    <cellXfs count=\"' || ( workbook.cellXfs.count() + 1 ) || '\">
    <xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>' );
        for x in 1 .. workbook.cellXfs.count()
        loop
            t_xxx := t_xxx || ( '<xf numFmtId=\"' || workbook.cellXfs( x ).numFmtId || '\" fontId=\"' || workbook.cellXfs( x ).fontId || '\" fillId=\"' || workbook.cellXfs( x ).fillId || '\" borderId=\"' || workbook.cellXfs( x ).borderId || '\">' );
            if (  workbook.cellXfs( x ).alignment.horizontal is not null
                or workbook.cellXfs( x ).alignment.vertical is not null
                or workbook.cellXfs( x ).alignment.wrapText
                )
            then
            t_xxx := t_xxx || ( '<alignment' ||
                case when workbook.cellXfs( x ).alignment.horizontal is not null then ' horizontal=\"' || workbook.cellXfs( x ).alignment.horizontal || '\"' end ||
                case when workbook.cellXfs( x ).alignment.vertical is not null then ' vertical=\"' || workbook.cellXfs( x ).alignment.vertical || '\"' end ||
                case when workbook.cellXfs( x ).alignment.wrapText then ' wrapText=\"true\"' end || '/>' );
            end if;
            t_xxx := t_xxx || '</xf>';
        end loop;
        t_xxx := t_xxx || ( '</cellXfs>
    <cellStyles count=\"1\">
    <cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/>
    </cellStyles>
    <dxfs count=\"0\"/>
    <tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/>
    <extLst>
    <ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\">
    <x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/>
    </ext>
    </extLst>
    </styleSheet>' );
        add1xml( t_excel, 'xl/styles.xml', t_xxx );
        t_xxx := '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
    <workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\">
    <fileVersion appName=\"xl\" lastEdited=\"5\" lowestEdited=\"5\" rupBuild=\"9302\"/>
    <workbookPr date1904=\"true\" defaultThemeVersion=\"124226\"/>
    <bookViews>
    <workbookView xWindow=\"120\" yWindow=\"45\" windowWidth=\"19155\" windowHeight=\"4935\"/>
    </bookViews>
    <sheets>';
        s := workbook.sheets.first;
        while s is not null
        loop
            t_xxx := t_xxx || ( '
    <sheet name=\"' || workbook.sheets( s ).name || '\" sheetId=\"' || s || '\" r:id=\"rId' || ( 9 + s ) || '\"/>' );
            s := workbook.sheets.next( s );
        end loop;
        t_xxx := t_xxx || '</sheets>';
        if workbook.defined_names.count() > 0
        then
            t_xxx := t_xxx || '<definedNames>';
            for s in 1 .. workbook.defined_names.count()
            loop
            t_xxx := t_xxx || ( '
    <definedName name=\"' || workbook.defined_names( s ).name || '\"' ||
                case when workbook.defined_names( s ).sheet is not null then ' localSheetId=\"' || to_char( workbook.defined_names( s ).sheet ) || '\"' end ||
                '>' || workbook.defined_names( s ).ref || '</definedName>' );
            end loop;
            t_xxx := t_xxx || '</definedNames>';
        end if;
        t_xxx := t_xxx || '<calcPr calcId=\"144525\"/></workbook>';
        add1xml( t_excel, 'xl/workbook.xml', t_xxx );
        t_xxx := '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
    <a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\">
    <a:themeElements>
    <a:clrScheme name=\"Office\">
    <a:dk1>
    <a:sysClr val=\"windowText\" lastClr=\"000000\"/>
    </a:dk1>
    <a:lt1>
    <a:sysClr val=\"window\" lastClr=\"FFFFFF\"/>
    </a:lt1>
    <a:dk2>
    <a:srgbClr val=\"1F497D\"/>
    </a:dk2>
    <a:lt2>
    <a:srgbClr val=\"EEECE1\"/>
    </a:lt2>
    <a:accent1>
    <a:srgbClr val=\"4F81BD\"/>
    </a:accent1>
    <a:accent2>
    <a:srgbClr val=\"C0504D\"/>
    </a:accent2>
    <a:accent3>
    <a:srgbClr val=\"9BBB59\"/>
    </a:accent3>
    <a:accent4>
    <a:srgbClr val=\"8064A2\"/>
    </a:accent4>
    <a:accent5>
    <a:srgbClr val=\"4BACC6\"/>
    </a:accent5>
    <a:accent6>
    <a:srgbClr val=\"F79646\"/>
    </a:accent6>
    <a:hlink>
    <a:srgbClr val=\"0000FF\"/>
    </a:hlink>
    <a:folHlink>
    <a:srgbClr val=\"800080\"/>
    </a:folHlink>
    </a:clrScheme>
    <a:fontScheme name=\"Office\">
    <a:majorFont>
    <a:latin typeface=\"Cambria\"/>
    <a:ea typeface=\"\"/>
    <a:cs typeface=\"\"/>
    <a:font script=\"Jpan\" typeface=\"MS P????\"/>
    <a:font script=\"Hang\" typeface=\"?? ??\"/>
    <a:font script=\"Hans\" typeface=\"??\"/>
    <a:font script=\"Hant\" typeface=\"????\"/>
    <a:font script=\"Arab\" typeface=\"Times New Roman\"/>
    <a:font script=\"Hebr\" typeface=\"Times New Roman\"/>
    <a:font script=\"Thai\" typeface=\"Tahoma\"/>
    <a:font script=\"Ethi\" typeface=\"Nyala\"/>
    <a:font script=\"Beng\" typeface=\"Vrinda\"/>
    <a:font script=\"Gujr\" typeface=\"Shruti\"/>
    <a:font script=\"Khmr\" typeface=\"MoolBoran\"/>
    <a:font script=\"Knda\" typeface=\"Tunga\"/>
    <a:font script=\"Guru\" typeface=\"Raavi\"/>
    <a:font script=\"Cans\" typeface=\"Euphemia\"/>
    <a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/>
    <a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/>
    <a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/>
    <a:font script=\"Thaa\" typeface=\"MV Boli\"/>
    <a:font script=\"Deva\" typeface=\"Mangal\"/>
    <a:font script=\"Telu\" typeface=\"Gautami\"/>
    <a:font script=\"Taml\" typeface=\"Latha\"/>
    <a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/>
    <a:font script=\"Orya\" typeface=\"Kalinga\"/>
    <a:font script=\"Mlym\" typeface=\"Kartika\"/>
    <a:font script=\"Laoo\" typeface=\"DokChampa\"/>
    <a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/>
    <a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/>
    <a:font script=\"Viet\" typeface=\"Times New Roman\"/>
    <a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/>
    <a:font script=\"Geor\" typeface=\"Sylfaen\"/>
    </a:majorFont>
    <a:minorFont>
    <a:latin typeface=\"Calibri\"/>
    <a:ea typeface=\"\"/>
    <a:cs typeface=\"\"/>
    <a:font script=\"Jpan\" typeface=\"MS P????\"/>
    <a:font script=\"Hang\" typeface=\"?? ??\"/>
    <a:font script=\"Hans\" typeface=\"??\"/>
    <a:font script=\"Hant\" typeface=\"????\"/>
    <a:font script=\"Arab\" typeface=\"Arial\"/>
    <a:font script=\"Hebr\" typeface=\"Arial\"/>
    <a:font script=\"Thai\" typeface=\"Tahoma\"/>
    <a:font script=\"Ethi\" typeface=\"Nyala\"/>
    <a:font script=\"Beng\" typeface=\"Vrinda\"/>
    <a:font script=\"Gujr\" typeface=\"Shruti\"/>
    <a:font script=\"Khmr\" typeface=\"DaunPenh\"/>
    <a:font script=\"Knda\" typeface=\"Tunga\"/>
    <a:font script=\"Guru\" typeface=\"Raavi\"/>
    <a:font script=\"Cans\" typeface=\"Euphemia\"/>
    <a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/>
    <a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/>
    <a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/>
    <a:font script=\"Thaa\" typeface=\"MV Boli\"/>
    <a:font script=\"Deva\" typeface=\"Mangal\"/>
    <a:font script=\"Telu\" typeface=\"Gautami\"/>
    <a:font script=\"Taml\" typeface=\"Latha\"/>
    <a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/>
    <a:font script=\"Orya\" typeface=\"Kalinga\"/>
    <a:font script=\"Mlym\" typeface=\"Kartika\"/>
    <a:font script=\"Laoo\" typeface=\"DokChampa\"/>
    <a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/>
    <a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/>
    <a:font script=\"Viet\" typeface=\"Arial\"/>
    <a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/>
    <a:font script=\"Geor\" typeface=\"Sylfaen\"/>
    </a:minorFont>
    </a:fontScheme>
    <a:fmtScheme name=\"Office\">
    <a:fillStyleLst>
    <a:solidFill>
    <a:schemeClr val=\"phClr\"/>
    </a:solidFill>
    <a:gradFill rotWithShape=\"1\">
    <a:gsLst>
    <a:gs pos=\"0\">
    <a:schemeClr val=\"phClr\">
    <a:tint val=\"50000\"/>
    <a:satMod val=\"300000\"/>
    </a:schemeClr>
    </a:gs>
    <a:gs pos=\"35000\">
    <a:schemeClr val=\"phClr\">
    <a:tint val=\"37000\"/>
    <a:satMod val=\"300000\"/>
    </a:schemeClr>
    </a:gs>
    <a:gs pos=\"100000\">
    <a:schemeClr val=\"phClr\">
    <a:tint val=\"15000\"/>
    <a:satMod val=\"350000\"/>
    </a:schemeClr>
    </a:gs>
    </a:gsLst>
    <a:lin ang=\"16200000\" scaled=\"1\"/>
    </a:gradFill>
    <a:gradFill rotWithShape=\"1\">
    <a:gsLst>
    <a:gs pos=\"0\">
    <a:schemeClr val=\"phClr\">
    <a:shade val=\"51000\"/>
    <a:satMod val=\"130000\"/>
    </a:schemeClr>
    </a:gs>
    <a:gs pos=\"80000\">
    <a:schemeClr val=\"phClr\">
    <a:shade val=\"93000\"/>
    <a:satMod val=\"130000\"/>
    </a:schemeClr>
    </a:gs>
    <a:gs pos=\"100000\">
    <a:schemeClr val=\"phClr\">
    <a:shade val=\"94000\"/>
    <a:satMod val=\"135000\"/>
    </a:schemeClr>
    </a:gs>
    </a:gsLst>
    <a:lin ang=\"16200000\" scaled=\"0\"/>
    </a:gradFill>
    </a:fillStyleLst>
    <a:lnStyleLst>
    <a:ln w=\"9525\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\">
    <a:solidFill>
    <a:schemeClr val=\"phClr\">
    <a:shade val=\"95000\"/>
    <a:satMod val=\"105000\"/>
    </a:schemeClr>
    </a:solidFill>
    <a:prstDash val=\"solid\"/>
    </a:ln>
    <a:ln w=\"25400\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\">
    <a:solidFill>
    <a:schemeClr val=\"phClr\"/>
    </a:solidFill>
    <a:prstDash val=\"solid\"/>
    </a:ln>
    <a:ln w=\"38100\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\">
    <a:solidFill>
    <a:schemeClr val=\"phClr\"/>
    </a:solidFill>
    <a:prstDash val=\"solid\"/>
    </a:ln>
    </a:lnStyleLst>
    <a:effectStyleLst>
    <a:effectStyle>
    <a:effectLst>
    <a:outerShdw blurRad=\"40000\" dist=\"20000\" dir=\"5400000\" rotWithShape=\"0\">
    <a:srgbClr val=\"000000\">
    <a:alpha val=\"38000\"/>
    </a:srgbClr>
    </a:outerShdw>
    </a:effectLst>
    </a:effectStyle>
    <a:effectStyle>
    <a:effectLst>
    <a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\">
    <a:srgbClr val=\"000000\">
    <a:alpha val=\"35000\"/>
    </a:srgbClr>
    </a:outerShdw>
    </a:effectLst>
    </a:effectStyle>
    <a:effectStyle>
    <a:effectLst>
    <a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\">
    <a:srgbClr val=\"000000\">
    <a:alpha val=\"35000\"/>
    </a:srgbClr>
    </a:outerShdw>
    </a:effectLst>
    <a:scene3d>
    <a:camera prst=\"orthographicFront\">
    <a:rot lat=\"0\" lon=\"0\" rev=\"0\"/>
    </a:camera>
    <a:lightRig rig=\"threePt\" dir=\"t\">
    <a:rot lat=\"0\" lon=\"0\" rev=\"1200000\"/>
    </a:lightRig>
    </a:scene3d>
    <a:sp3d>
    <a:bevelT w=\"63500\" h=\"25400\"/>
    </a:sp3d>
    </a:effectStyle>
    </a:effectStyleLst>
    <a:bgFillStyleLst>
    <a:solidFill>
    <a:schemeClr val=\"phClr\"/>
    </a:solidFill>
    <a:gradFill rotWithShape=\"1\">
    <a:gsLst>
    <a:gs pos=\"0\">
    <a:schemeClr val=\"phClr\">
    <a:tint val=\"40000\"/>
    <a:satMod val=\"350000\"/>
    </a:schemeClr>
    </a:gs>
    <a:gs pos=\"40000\">
    <a:schemeClr val=\"phClr\">
    <a:tint val=\"45000\"/>
    <a:shade val=\"99000\"/>
    <a:satMod val=\"350000\"/>
    </a:schemeClr>
    </a:gs>
    <a:gs pos=\"100000\">
    <a:schemeClr val=\"phClr\">
    <a:shade val=\"20000\"/>
    <a:satMod val=\"255000\"/>
    </a:schemeClr>
    </a:gs>
    </a:gsLst>
    <a:path path=\"circle\">
    <a:fillToRect l=\"50000\" t=\"-80000\" r=\"50000\" b=\"180000\"/>
    </a:path>
    </a:gradFill>
    <a:gradFill rotWithShape=\"1\">
    <a:gsLst>
    <a:gs pos=\"0\">
    <a:schemeClr val=\"phClr\">
    <a:tint val=\"80000\"/>
    <a:satMod val=\"300000\"/>
    </a:schemeClr>
    </a:gs>
    <a:gs pos=\"100000\">
    <a:schemeClr val=\"phClr\">
    <a:shade val=\"30000\"/>
    <a:satMod val=\"200000\"/>
    </a:schemeClr>
    </a:gs>
    </a:gsLst>
    <a:path path=\"circle\">
    <a:fillToRect l=\"50000\" t=\"50000\" r=\"50000\" b=\"50000\"/>
    </a:path>
    </a:gradFill>
    </a:bgFillStyleLst>
    </a:fmtScheme>
    </a:themeElements>
    <a:objectDefaults/>
    <a:extraClrSchemeLst/>
    </a:theme>';
        add1xml( t_excel, 'xl/theme/theme1.xml', t_xxx );
        s := workbook.sheets.first;
        while s is not null
        loop
            t_col_min := 16384;
            t_col_max := 1;
            t_row_ind := workbook.sheets( s ).rows.first();
            while t_row_ind is not null
            loop
            t_col_min := least( t_col_min, workbook.sheets( s ).rows( t_row_ind ).first() );
            t_col_max := greatest( t_col_max, workbook.sheets( s ).rows( t_row_ind ).last() );
            t_row_ind := workbook.sheets( s ).rows.next( t_row_ind );
            end loop;
            addtxt2utf8blob_init( t_yyy );
            addtxt2utf8blob( '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
    <worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">' ||
    case when workbook.sheets( s ).tabcolor is not null then '<sheetPr><tabColor rgb=\"' || workbook.sheets( s ).tabcolor || '\"/></sheetPr>' end ||
    '<dimension ref=\"' || alfan_col( t_col_min ) || workbook.sheets( s ).rows.first() || ':' || alfan_col( t_col_max ) || workbook.sheets( s ).rows.last() || '\"/>
    <sheetViews>
    <sheetView' || case when s = 1 then ' tabSelected=\"1\"' end || ' workbookViewId=\"0\">'
                            , t_yyy
                            );
            if workbook.sheets( s ).freeze_rows > 0 and workbook.sheets( s ).freeze_cols > 0
            then
            addtxt2utf8blob( '<pane xSplit=\"' || workbook.sheets( s ).freeze_cols || '\" '
                                || 'ySplit=\"' || workbook.sheets( s ).freeze_rows || '\" '
                                || 'topLeftCell=\"' || alfan_col( workbook.sheets( s ).freeze_cols + 1 ) || ( workbook.sheets( s ).freeze_rows + 1 ) || '\" '
                                || 'activePane=\"bottomLeft\" state=\"frozen\"/>'
                            , t_yyy
                            );
            else
            if workbook.sheets( s ).freeze_rows > 0
            then
                addtxt2utf8blob( '<pane ySplit=\"' || workbook.sheets( s ).freeze_rows || '\" topLeftCell=\"A' || ( workbook.sheets( s ).freeze_rows + 1 ) || '\" activePane=\"bottomLeft\" state=\"frozen\"/>'
                                , t_yyy
                                );
            end if;
            if workbook.sheets( s ).freeze_cols > 0
            then
                addtxt2utf8blob( '<pane xSplit=\"' || workbook.sheets( s ).freeze_cols || '\" topLeftCell=\"' || alfan_col( workbook.sheets( s ).freeze_cols + 1 ) || '1\" activePane=\"bottomLeft\" state=\"frozen\"/>'
                                , t_yyy
                                );
            end if;
            end if;
            addtxt2utf8blob( '</sheetView>
    </sheetViews>
    <sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>'
                            , t_yyy
                            );
            if workbook.sheets( s ).widths.count() > 0
            then
            addtxt2utf8blob( '<cols>', t_yyy );
            t_col_ind := workbook.sheets( s ).widths.first();
            while t_col_ind is not null
            loop
                addtxt2utf8blob( '<col min=\"' || t_col_ind || '\" max=\"' || t_col_ind || '\" width=\"' || to_char( workbook.sheets( s ).widths( t_col_ind ), 'TM9', 'NLS_NUMERIC_CHARACTERS=.,' ) || '\" customWidth=\"1\"/>', t_yyy );
                t_col_ind := workbook.sheets( s ).widths.next( t_col_ind );
            end loop;
            addtxt2utf8blob( '</cols>', t_yyy );
            end if;
            addtxt2utf8blob( '<sheetData>', t_yyy );
            t_row_ind := workbook.sheets( s ).rows.first();
            while t_row_ind is not null
            loop
            if workbook.sheets( s ).row_fmts.exists( t_row_ind ) and workbook.sheets( s ).row_fmts( t_row_ind ).height is not null
            then
                addtxt2utf8blob( '<row r=\"' || t_row_ind || '\" spans=\"' || t_col_min || ':' || t_col_max || '\" customHeight=\"1\" ht=\"'
                                || to_char( workbook.sheets( s ).row_fmts( t_row_ind ).height, 'TM9', 'NLS_NUMERIC_CHARACTERS=.,' ) || '\" >', t_yyy );
            else
                addtxt2utf8blob( '<row r=\"' || t_row_ind || '\" spans=\"' || t_col_min || ':' || t_col_max || '\">', t_yyy );
            end if;
            t_col_ind := workbook.sheets( s ).rows( t_row_ind ).first();
            while t_col_ind is not null
            loop
                addtxt2utf8blob( '<c r=\"' || alfan_col( t_col_ind ) || t_row_ind || '\"'
                        || ' ' || workbook.sheets( s ).rows( t_row_ind )( t_col_ind ).style
                        || '><v>'
                        || to_char( workbook.sheets( s ).rows( t_row_ind )( t_col_ind ).value, 'TM9', 'NLS_NUMERIC_CHARACTERS=.,' )
                        || '</v></c>', t_yyy );
                t_col_ind := workbook.sheets( s ).rows( t_row_ind ).next( t_col_ind );
            end loop;
            addtxt2utf8blob( '</row>', t_yyy );
            t_row_ind := workbook.sheets( s ).rows.next( t_row_ind );
            end loop;
            addtxt2utf8blob( '</sheetData>', t_yyy );
            for a in 1 ..  workbook.sheets( s ).autofilters.count()
            loop
            addtxt2utf8blob( '<autoFilter ref=\"' ||
                alfan_col( nvl( workbook.sheets( s ).autofilters( a ).column_start, t_col_min ) ) ||
                nvl( workbook.sheets( s ).autofilters( a ).row_start, workbook.sheets( s ).rows.first() ) || ':' ||
                alfan_col( coalesce( workbook.sheets( s ).autofilters( a ).column_end, workbook.sheets( s ).autofilters( a ).column_start, t_col_max ) ) ||
                nvl( workbook.sheets( s ).autofilters( a ).row_end, workbook.sheets( s ).rows.last() ) || '\"/>', t_yyy );
            end loop;
            if workbook.sheets( s ).mergecells.count() > 0
            then
            addtxt2utf8blob( '<mergeCells count=\"' || to_char( workbook.sheets( s ).mergecells.count() ) || '\">', t_yyy );
            for m in 1 ..  workbook.sheets( s ).mergecells.count()
            loop
                addtxt2utf8blob( '<mergeCell ref=\"' || workbook.sheets( s ).mergecells( m ) || '\"/>', t_yyy );
            end loop;
            addtxt2utf8blob( '</mergeCells>', t_yyy );
            end if;
    --
            if workbook.sheets( s ).validations.count() > 0
            then
            addtxt2utf8blob( '<dataValidations count=\"' || to_char( workbook.sheets( s ).validations.count() ) || '\">', t_yyy );
            for m in 1 ..  workbook.sheets( s ).validations.count()
            loop
                addtxt2utf8blob( '<dataValidation' ||
                    ' type=\"' || workbook.sheets( s ).validations( m ).type || '\"' ||
                    ' errorStyle=\"' || workbook.sheets( s ).validations( m ).errorstyle || '\"' ||
                    ' allowBlank=\"' || case when nvl( workbook.sheets( s ).validations( m ).allowBlank, true ) then '1' else '0' end || '\"' ||
                    ' sqref=\"' || workbook.sheets( s ).validations( m ).sqref || '\"', t_yyy );
                if workbook.sheets( s ).validations( m ).prompt is not null
                then
                addtxt2utf8blob( ' showInputMessage=\"1\" prompt=\"' || workbook.sheets( s ).validations( m ).prompt || '\"', t_yyy );
                if workbook.sheets( s ).validations( m ).title is not null
                then
                    addtxt2utf8blob( ' promptTitle=\"' || workbook.sheets( s ).validations( m ).title || '\"', t_yyy );
                end if;
                end if;
                if workbook.sheets( s ).validations( m ).showerrormessage
                then
                addtxt2utf8blob( ' showErrorMessage=\"1\"', t_yyy );
                if workbook.sheets( s ).validations( m ).error_title is not null
                then
                    addtxt2utf8blob( ' errorTitle=\"' || workbook.sheets( s ).validations( m ).error_title || '\"', t_yyy );
                end if;
                if workbook.sheets( s ).validations( m ).error_txt is not null
                then
                    addtxt2utf8blob( ' error=\"' || workbook.sheets( s ).validations( m ).error_txt || '\"', t_yyy );
                end if;
                end if;
                addtxt2utf8blob( '>', t_yyy );
                if workbook.sheets( s ).validations( m ).formula1 is not null
                then
                addtxt2utf8blob( '<formula1>' || workbook.sheets( s ).validations( m ).formula1 || '</formula1>', t_yyy );
                end if;
                if workbook.sheets( s ).validations( m ).formula2 is not null
                then
                addtxt2utf8blob( '<formula2>' || workbook.sheets( s ).validations( m ).formula2 || '</formula2>', t_yyy );
                end if;
                addtxt2utf8blob( '</dataValidation>', t_yyy );
            end loop;
            addtxt2utf8blob( '</dataValidations>', t_yyy );
            end if;
    --
            if workbook.sheets( s ).hyperlinks.count() > 0
            then
            addtxt2utf8blob( '<hyperlinks>', t_yyy );
            for h in 1 ..  workbook.sheets( s ).hyperlinks.count()
            loop
                addtxt2utf8blob( '<hyperlink ref=\"' || workbook.sheets( s ).hyperlinks( h ).cell || '\" r:id=\"rId' || h || '\"/>', t_yyy );
            end loop;
            addtxt2utf8blob( '</hyperlinks>', t_yyy );
            end if;
            addtxt2utf8blob( '<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>', t_yyy );
            if workbook.sheets( s ).comments.count() > 0
            then
            addtxt2utf8blob( '<legacyDrawing r:id=\"rId' || ( workbook.sheets( s ).hyperlinks.count() + 1 ) || '\"/>', t_yyy );
            end if;
    --
            addtxt2utf8blob( '</worksheet>', t_yyy );
            addtxt2utf8blob_finish( t_yyy );
            add1file( t_excel, 'xl/worksheets/sheet' || s || '.xml', t_yyy );
            if workbook.sheets( s ).hyperlinks.count() > 0 or workbook.sheets( s ).comments.count() > 0
            then
            t_xxx := '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
    <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';
            if workbook.sheets( s ).comments.count() > 0
            then
                t_xxx := t_xxx || ( '<Relationship Id=\"rId' || ( workbook.sheets( s ).hyperlinks.count() + 2 ) || '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments\" Target=\"../comments' || s || '.xml\"/>' );
                t_xxx := t_xxx || ( '<Relationship Id=\"rId' || ( workbook.sheets( s ).hyperlinks.count() + 1 ) || '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing\" Target=\"../drawings/vmlDrawing' || s || '.vml\"/>' );
            end if;
            for h in 1 ..  workbook.sheets( s ).hyperlinks.count()
            loop
                t_xxx := t_xxx || ( '<Relationship Id=\"rId' || h || '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\" Target=\"' || workbook.sheets( s ).hyperlinks( h ).url || '\" TargetMode=\"External\"/>' );
            end loop;
            t_xxx := t_xxx || '</Relationships>';
            add1xml( t_excel, 'xl/worksheets/_rels/sheet' || s || '.xml.rels', t_xxx );
            end if;
    --
            if workbook.sheets( s ).comments.count() > 0
            then
            declare
                cnt pls_integer;
                author_ind tp_author;
    --          t_col_ind := workbook.sheets( s ).widths.next( t_col_ind );
            begin
                authors.delete();
                for c in 1 .. workbook.sheets( s ).comments.count()
                loop
                authors( workbook.sheets( s ).comments( c ).author ) := 0;
                end loop;
                t_xxx := '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
    <comments xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">
    <authors>';
                cnt := 0;
                author_ind := authors.first();
                while author_ind is not null or authors.next( author_ind ) is not null
                loop
                authors( author_ind ) := cnt;
                t_xxx := t_xxx || ( '<author>' || author_ind || '</author>' );
                cnt := cnt + 1;
                author_ind := authors.next( author_ind );
                end loop;
            end;
            t_xxx := t_xxx || '</authors><commentList>';
            for c in 1 .. workbook.sheets( s ).comments.count()
            loop
                t_xxx := t_xxx || ( '<comment ref=\"' || alfan_col( workbook.sheets( s ).comments( c ).column ) ||
                    to_char( workbook.sheets( s ).comments( c ).row || '\" authorId=\"' || authors( workbook.sheets( s ).comments( c ).author ) ) || '\">
    <text>' );
                if workbook.sheets( s ).comments( c ).author is not null
                then
                t_xxx := t_xxx || ( '<r><rPr><b/><sz val=\"9\"/><color indexed=\"81\"/><rFont val=\"Tahoma\"/><charset val=\"1\"/></rPr><t xml:space=\"preserve\">' ||
                    workbook.sheets( s ).comments( c ).author || ':</t></r>' );
                end if;
                t_xxx := t_xxx || ( '<r><rPr><sz val=\"9\"/><color indexed=\"81\"/><rFont val=\"Tahoma\"/><charset val=\"1\"/></rPr><t xml:space=\"preserve\">' ||
                    case when workbook.sheets( s ).comments( c ).author is not null then '
    ' end || workbook.sheets( s ).comments( c ).text || '</t></r></text></comment>' );
            end loop;
            t_xxx := t_xxx || '</commentList></comments>';
            add1xml( t_excel, 'xl/comments' || s || '.xml', t_xxx );
            t_xxx := '<xml xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\">
    <o:shapelayout v:ext=\"edit\"><o:idmap v:ext=\"edit\" data=\"2\"/></o:shapelayout>
    <v:shapetype id=\"_x0000_t202\" coordsize=\"21600,21600\" o:spt=\"202\" path=\"m,l,21600r21600,l21600,xe\"><v:stroke joinstyle=\"miter\"/><v:path gradientshapeok=\"t\" o:connecttype=\"rect\"/></v:shapetype>';
            for c in 1 .. workbook.sheets( s ).comments.count()
            loop
                t_xxx := t_xxx || ( '<v:shape id=\"_x0000_s' || to_char( c ) || '\" type=\"#_x0000_t202\"
    style=\"position:absolute;margin-left:35.25pt;margin-top:3pt;z-index:' || to_char( c ) || ';visibility:hidden;\" fillcolor=\"#ffffe1\" o:insetmode=\"auto\">
    <v:fill color2=\"#ffffe1\"/><v:shadow on=\"t\" color=\"black\" obscured=\"t\"/><v:path o:connecttype=\"none\"/>
    <v:textbox style=\"mso-direction-alt:auto\"><div style=\"text-align:left\"></div></v:textbox>
    <x:ClientData ObjectType=\"Note\"><x:MoveWithCells/><x:SizeWithCells/>' );
                t_w := workbook.sheets( s ).comments( c ).width;
                t_c := 1;
                loop
                if workbook.sheets( s ).widths.exists( workbook.sheets( s ).comments( c ).column + t_c )
                then
                    t_cw := 256 * workbook.sheets( s ).widths( workbook.sheets( s ).comments( c ).column + t_c );
                    t_cw := trunc( ( t_cw + 18 ) / 256 * 7); -- assume default 11 point Calibri
                else
                    t_cw := 64;
                end if;
                exit when t_w < t_cw;
                t_c := t_c + 1;
                t_w := t_w - t_cw;
                end loop;
                t_h := workbook.sheets( s ).comments( c ).height;
                t_xxx := t_xxx || ( '<x:Anchor>' || workbook.sheets( s ).comments( c ).column || ',15,' ||
                            workbook.sheets( s ).comments( c ).row || ',30,' ||
                            ( workbook.sheets( s ).comments( c ).column + t_c - 1 ) || ',' || round( t_w ) || ',' ||
                            ( workbook.sheets( s ).comments( c ).row + 1 + trunc( t_h / 20 ) ) || ',' || mod( t_h, 20 ) || '</x:Anchor>' );
                t_xxx := t_xxx || ( '<x:AutoFill>False</x:AutoFill><x:Row>' ||
                ( workbook.sheets( s ).comments( c ).row - 1 ) || '</x:Row><x:Column>' ||
                ( workbook.sheets( s ).comments( c ).column - 1 ) || '</x:Column></x:ClientData></v:shape>' );
            end loop;
            t_xxx := t_xxx || '</xml>';
            add1xml( t_excel, 'xl/drawings/vmlDrawing' || s || '.vml', t_xxx );
            end if;
    --
            s := workbook.sheets.next( s );
        end loop;
        t_xxx := '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
    <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">
    <Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\"/>
    <Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/>
    <Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/>';
        s := workbook.sheets.first;
        while s is not null
        loop
            t_xxx := t_xxx || ( '
    <Relationship Id=\"rId' || ( 9 + s ) || '\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet' || s || '.xml\"/>' );
            s := workbook.sheets.next( s );
        end loop;
        t_xxx := t_xxx || '</Relationships>';
        add1xml( t_excel, 'xl/_rels/workbook.xml.rels', t_xxx );
        addtxt2utf8blob_init( t_yyy );
        addtxt2utf8blob( '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>
    <sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' || workbook.str_cnt || '\" uniqueCount=\"' || workbook.strings.count() || '\">'
                        , t_yyy
                        );
        for i in 0 .. workbook.str_ind.count() - 1
        loop
            addtxt2utf8blob( '<si><t xml:space=\"preserve\">' || dbms_xmlgen.convert( substr( workbook.str_ind( i ), 1, 32000 ) ) || '</t></si>', t_yyy );
        end loop;
        addtxt2utf8blob( '</sst>', t_yyy );
        addtxt2utf8blob_finish( t_yyy );
        add1file( t_excel, 'xl/sharedStrings.xml', t_yyy );
        finish_zip( t_excel );
        clear_workbook;
        return t_excel;
        end;
    --
        procedure save
        ( p_directory varchar2
        , p_filename varchar2
        )
        is
        begin
        blob2file( finish, p_directory, p_filename );
        end;
    --
        procedure query2sheet
        ( p_sql clob
        , p_column_headers boolean := true
        , p_directory varchar2 := null
        , p_filename varchar2 := null
        , p_sheet pls_integer := null
        , p_UseXf boolean := false
        )
        is
        t_sheet pls_integer;
        t_c integer;
        t_col_cnt integer;
        t_desc_tab dbms_sql.desc_tab2;
        d_tab dbms_sql.date_table;
        n_tab dbms_sql.number_table;
        v_tab dbms_sql.varchar2_table;
        t_bulk_size pls_integer := 200;
        t_r integer;
        t_cur_row pls_integer;
        t_useXf boolean := g_useXf;
        begin
        setUseXf( p_UseXf );
        if p_sheet is null
        then
            new_sheet;
        end if;
        t_c := dbms_sql.open_cursor;
        dbms_sql.parse( t_c, p_sql, dbms_sql.native );
        dbms_sql.describe_columns2( t_c, t_col_cnt, t_desc_tab );
        for c in 1 .. t_col_cnt
        loop
            if p_column_headers
            then
            cell( c, 1, t_desc_tab( c ).col_name, p_sheet => t_sheet );
            end if;
            case
            when t_desc_tab( c ).col_type in ( 2, 100, 101 )
            then
                dbms_sql.define_array( t_c, c, n_tab, t_bulk_size, 1 );
            when t_desc_tab( c ).col_type in ( 12, 178, 179, 180, 181 , 231 )
            then
                dbms_sql.define_array( t_c, c, d_tab, t_bulk_size, 1 );
            when t_desc_tab( c ).col_type in ( 1, 8, 9, 96, 112 )
            then
                dbms_sql.define_array( t_c, c, v_tab, t_bulk_size, 1 );
            else
                null;
            end case;
        end loop;
    --
        t_cur_row := case when p_column_headers then 2 else 1 end;
        t_sheet := nvl( p_sheet, workbook.sheets.count() );
    --
        t_r := dbms_sql.execute( t_c );
        loop
            t_r := dbms_sql.fetch_rows( t_c );
            if t_r > 0
            then
            for c in 1 .. t_col_cnt
            loop
                case
                when t_desc_tab( c ).col_type in ( 2, 100, 101 )
                then
                    dbms_sql.column_value( t_c, c, n_tab );
                    for i in 0 .. t_r - 1
                    loop
                    if n_tab( i + n_tab.first() ) is not null
                    then
                        cell( c, t_cur_row + i, n_tab( i + n_tab.first() ), p_sheet => t_sheet );
                    end if;
                    end loop;
                    n_tab.delete;
                when t_desc_tab( c ).col_type in ( 12, 178, 179, 180, 181 , 231 )
                then
                    dbms_sql.column_value( t_c, c, d_tab );
                    for i in 0 .. t_r - 1
                    loop
                    if d_tab( i + d_tab.first() ) is not null
                    then
                        cell( c, t_cur_row + i, d_tab( i + d_tab.first() ), p_sheet => t_sheet );
                    end if;
                    end loop;
                    d_tab.delete;
                when t_desc_tab( c ).col_type in ( 1, 8, 9, 96, 112 )
                then
                    dbms_sql.column_value( t_c, c, v_tab );
                    for i in 0 .. t_r - 1
                    loop
                    if v_tab( i + v_tab.first() ) is not null
                    then
                        cell( c, t_cur_row + i, v_tab( i + v_tab.first() ), p_sheet => t_sheet );
                    end if;
                    end loop;
                    v_tab.delete;
                else
                    null;
                end case;
            end loop;
            end if;
            exit when t_r <> t_bulk_size;
            t_cur_row := t_cur_row + t_r;
        end loop;
        dbms_sql.close_cursor( t_c );
        if ( p_directory is not null and  p_filename is not null )
        then
            save( p_directory, p_filename );
        end if;
        setUseXf( t_useXf );
        exception
        when others
        then
            if dbms_sql.is_open( t_c )
            then
            dbms_sql.close_cursor( t_c );
            end if;
            setUseXf( t_useXf );
        dbms_output.put_line(sqlerrm);
        dbms_output.put_line(dbms_utility.format_error_backtrace);
        dbms_output.put_line(dbms_utility.format_call_stack);
        dbms_output.put_line(dbms_utility.format_error_stack);
        end;
    --
        procedure setUseXf( p_val boolean := true )
        is
        begin
        g_useXf := p_val;
        end;
    --
end AS_XLSX;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},	
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo AS
    FUNCTION verificar_arquivo_existe (
        p_var_dir        VARCHAR2,
        p_nome_arquivo   VARCHAR2
    ) RETURN BOOLEAN;


    FUNCTION abrir_arquivo (
        p_var_dir        VARCHAR2,
        p_nome_arquivo   VARCHAR2,
        p_existe         IN OUT BOOLEAN
    ) RETURN utl_file.file_type;


    PROCEDURE criar_arquivo_xlsx (
        p_comando_select   CLOB,
        p_nome_dir         VARCHAR2,
        p_nome_arquivo     VARCHAR2
    );


    FUNCTION ler_arquivo (
        p_dir_nome    VARCHAR2,
        p_file_name   VARCHAR2
    ) RETURN BLOB;


    FUNCTION descomprimir_blob (
        p_blob BLOB
    ) RETURN BLOB;


    PROCEDURE blob_to_file (
        p_blob IN OUT NOCOPY BLOB,
        p_dir        IN   VARCHAR2,
        p_filename   IN   VARCHAR2
    );


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo AS


    FUNCTION verificar_arquivo_existe (
        p_var_dir        VARCHAR2,
        p_nome_arquivo   VARCHAR2
    ) RETURN BOOLEAN AS
        v_exists      BOOLEAN;
        v_length      NUMBER;
        v_blocksize   NUMBER;
    BEGIN
        v_exists := false;
        BEGIN
            utl_file.fgetattr(p_var_dir, p_nome_arquivo, v_exists, v_length, v_blocksize);
        EXCEPTION
            WHEN utl_file.invalid_path THEN
                dbms_output.put_line('Caminho invalido');
            WHEN utl_file.invalid_filename THEN
                dbms_output.put_line('nome de arquivo invalido');
            WHEN utl_file.invalid_operation THEN
                dbms_output.put_line('operacao invalida');
            WHEN utl_file.read_error THEN
                dbms_output.put_line('erro de leitura');
            WHEN utl_file.access_denied THEN
                dbms_output.put_line('acesso negado');
            WHEN OTHERS THEN
                __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
        END;


        RETURN v_exists;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN false;
    END verificar_arquivo_existe;


    FUNCTION abrir_arquivo (
        p_var_dir        VARCHAR2,
        p_nome_arquivo   VARCHAR2,
        p_existe         IN OUT BOOLEAN
    ) RETURN utl_file.file_type AS
        v_arq utl_file.file_type;
    BEGIN
        p_existe := false;
        v_arq := NULL;
        p_existe := verificar_arquivo_existe(p_var_dir, p_nome_arquivo);
        IF p_existe = true THEN
            dbms_output.put_line('arquivo encontrado');
            v_arq := utl_file.fopen(p_var_dir, p_nome_arquivo, 'R');
        END IF;


        RETURN v_arq;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END abrir_arquivo;


    PROCEDURE criar_arquivo_xlsx (
        p_comando_select   CLOB,
        p_nome_dir         VARCHAR2,
        p_nome_arquivo     VARCHAR2
    ) AS
    BEGIN
        IF __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => 'as_xlsx', p_owner => '__FNV_GET_NOMESCHEMA__') THEN
            as_xlsx.query2sheet(p_comando_select);
            as_xlsx.save(p_nome_dir, p_nome_arquivo);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END criar_arquivo_xlsx;


    FUNCTION ler_arquivo (
        p_dir_nome    VARCHAR2,
        p_file_name   VARCHAR2
    ) RETURN BLOB AS
        dest_loc   BLOB := empty_blob();
        src_loc    BFILE := bfilename(p_dir_nome, p_file_name);
    BEGIN
        BEGIN
            dbms_lob.open(src_loc, dbms_lob.lob_readonly);
            dbms_lob.createtemporary(lob_loc => dest_loc, cache => true, dur => dbms_lob.session);


            dbms_lob.open(dest_loc, dbms_lob.lob_readwrite);
            dbms_lob.loadfromfile(dest_lob => dest_loc, src_lob => src_loc, amount => dbms_lob.getlength(src_loc));


        EXCEPTION
            WHEN dbms_lob.operation_failed --Wenn die Datei nicht vorhanden ist
                THEN
                dbms_lob.close(src_loc);
                RETURN empty_blob();
            WHEN dbms_lob.invalid_argval  --Wenn die Datei 0 KB gross ist.
                THEN
                dbms_lob.close(dest_loc);
                dbms_lob.close(src_loc);
                RETURN empty_blob();
        END;


        dbms_lob.close(dest_loc);
        dbms_lob.close(src_loc);
        RETURN dest_loc;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END ler_arquivo;


    FUNCTION descomprimir_blob (
        p_blob BLOB
    ) RETURN BLOB AS
        retorno   BLOB;
        handle    BINARY_INTEGER;
    BEGIN
        retorno := to_blob('1');
        dbms_output.put_line('tamanho do blob comprimido: ' || dbms_lob.getlength(p_blob));
        SELECT
            utl_compress.lz_uncompress_open(p_blob)
        INTO handle
        FROM
            dual;


        utl_compress.lz_uncompress_extract(handle, retorno);
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END descomprimir_blob;


    PROCEDURE blob_to_file (
        p_blob IN OUT NOCOPY BLOB,
        p_dir        IN   VARCHAR2,
        p_filename   IN   VARCHAR2
    ) AS


        l_file       utl_file.file_type;
        l_buffer     RAW(32767);
        l_amount     BINARY_INTEGER := 32767;
        l_pos        INTEGER := 1;
        l_blob_len   INTEGER;
    BEGIN
        l_blob_len := dbms_lob.getlength(p_blob);
        l_file := utl_file.fopen(p_dir, p_filename, 'wb', 32767);
        WHILE l_pos <= l_blob_len LOOP
            dbms_lob.read(p_blob, l_amount, l_pos, l_buffer);
            utl_file.put_raw(l_file, l_buffer, true);
            l_pos := l_pos + l_amount;
        END LOOP;


        utl_file.fclose(l_file);
    EXCEPTION
        WHEN OTHERS THEN
            IF utl_file.is_open(l_file) THEN
                utl_file.fclose(l_file);
            END IF;
            RAISE;
    END blob_to_file;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sistema":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sistema",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sistema",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sistema AS
    FUNCTION get_caminho_arquivo (
        caminho_arquivo IN VARCHAR2
    ) RETURN VARCHAR2;


    FUNCTION get_nome_arquivo (
        caminho_arquivo IN VARCHAR2
    ) RETURN VARCHAR2;


    FUNCTION arquivo_existe (
        p_caminho_arquivo VARCHAR2
    ) RETURN BOOLEAN;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sistema;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sistema AS


    FUNCTION get_caminho_arquivo (
        caminho_arquivo IN VARCHAR2
    ) RETURN VARCHAR2 IS
        v_dir VARCHAR2(1500);
    BEGIN
        IF instr(caminho_arquivo, '/') > 0 THEN
            v_dir := substr(caminho_arquivo, 1,(instr(caminho_arquivo, '/', -1, 1) - 1));
        ELSIF instr(caminho_arquivo, '\\') > 0 THEN
            v_dir := substr(caminho_arquivo, 1,(instr(caminho_arquivo, '\\', -1, 1) - 1));
        ELSE
            v_dir := caminho_arquivo;
        END IF;


        RETURN v_dir;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END get_caminho_arquivo;


    FUNCTION get_nome_arquivo (
        caminho_arquivo IN VARCHAR2
    ) RETURN VARCHAR2 IS
        nome_arquivo VARCHAR2(1500);
    BEGIN
        IF instr(caminho_arquivo, '/') > 0 THEN
            nome_arquivo := substr(caminho_arquivo, instr(caminho_arquivo, '/', -1, 1) + 1);
        ELSIF instr(caminho_arquivo, '\\') > 0 THEN
            nome_arquivo := substr(caminho_arquivo, instr(caminho_arquivo, '\\', -1, 1) + 1);
        ELSE
            nome_arquivo := caminho_arquivo;
        END IF;


        RETURN nome_arquivo;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END get_nome_arquivo;


    FUNCTION arquivo_existe (
        p_caminho_arquivo VARCHAR2
    ) RETURN BOOLEAN AS


        v_caminho        VARCHAR2(4000) DEFAULT NULL;
        v_nome_dir       VARCHAR2(4000) DEFAULT NULL;
        v_nome_arquivo   VARCHAR2(4000) DEFAULT NULL;
        v_exists         BOOLEAN;
        v_length         NUMBER;
        v_blocksize      NUMBER;
    BEGIN
        v_exists := false;
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_caminho := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sistema.get_caminho_arquivo(p_caminho_arquivo);
            v_nome_dir := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.procurar_diretorio(v_caminho);
            v_nome_arquivo := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sistema.get_nome_arquivo(p_caminho_arquivo);
            utl_file.fgetattr(v_nome_dir, v_nome_arquivo, v_exists, v_length, v_blocksize);
        END IF;


        RETURN v_exists;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            RETURN false;
    END;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sistema;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet AS
    FUNCTION requisitar_endereco (
        endereco     VARCHAR2,
        parametros   VARCHAR2 DEFAULT NULL
    ) RETURN CLOB;


    FUNCTION montar_cabecalho_email (
        p_servidor_smtp           VARCHAR2 DEFAULT 'smtp.jumboalimentos.com.br',
        p_porta_smtp              PLS_INTEGER DEFAULT 587,
        p_email_de                VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        p_usuario_servidor_smtp   VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        p_senha_servidor_smtp     VARCHAR2 DEFAULT 'Jumbo#2019',
        p_email_para              VARCHAR2,
        p_email_copias_para       VARCHAR2,
        p_titulo_email            VARCHAR2,
        p_comanexo                BOOLEAN DEFAULT false
    ) RETURN VARCHAR2;


    FUNCTION iniciar_email (
        p_servidor_smtp           VARCHAR2,
        p_porta_smtp              NUMBER,
        p_usuario_servidor_smtp   VARCHAR2,
        p_senha_servidor_smtp     VARCHAR2,
        p_email_de                VARCHAR2,
        p_email_para              VARCHAR2,
        p_email_copias_para       VARCHAR2,
        p_num_tentativas          NUMBER DEFAULT 0
    ) RETURN utl_smtp.connection;


    PROCEDURE enviar_email (
        pr_servidor_smtp       VARCHAR2 DEFAULT 'smtp.jumboalimentos.com.br',
        pr_porta_smtp          VARCHAR2 DEFAULT 587,
        pr_usuario_servidor    VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        pr_senha_servidor      VARCHAR2 DEFAULT 'Jumbo#2019',
        pr_email_de            VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        pr_email_para          VARCHAR2 DEFAULT 'jumbo.ti@jumboalimentos.com.br',
        pr_email_copias_para   VARCHAR2 DEFAULT 'jumbo.ti@jumboalimentos.com.br',
        pr_titulo_email        VARCHAR2 DEFAULT 'Jumbo Email',
        pr_corpo_email         CLOB DEFAULT 'Email',
        pr_tab_html            ttabela DEFAULT NULL,
        pr_usar_limitador      BOOLEAN DEFAULT true
    );


    PROCEDURE enviar_email_com_anexo_dados (
        pr_servidor_smtp       VARCHAR2 DEFAULT 'smtp.jumboalimentos.com.br',
        pr_porta_smtp          VARCHAR2 DEFAULT 587,
        pr_usuario_servidor    VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        pr_senha_servidor      VARCHAR2 DEFAULT 'Jumbo#2019',
        pr_email_de            VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        pr_email_para          VARCHAR2 DEFAULT 'jumbo.ti@jumboalimentos.com.br',
        pr_email_copias_para   VARCHAR2 DEFAULT 'jumbo.ti@jumboalimentos.com.br',
        pr_titulo_email        VARCHAR2 DEFAULT 'Jumbo Email',
        pr_corpo_email         VARCHAR2 DEFAULT 'Segue em anexo',
        pr_nome_anexo          VARCHAR2 DEFAULT 'anexo.csv',
        pr_mime_anexo          VARCHAR2 DEFAULT 'text/plain',
        pr_comando_sql_anexo   CLOB DEFAULT 'select ''a'' as a from dual',
        pr_gravar_cabecalho    BOOLEAN DEFAULT true,
        pr_eliminar_espacos    BOOLEAN DEFAULT true,
        pr_tab_html            ttabela DEFAULT NULL,
        pr_cursor_id           NUMBER DEFAULT NULL
    );


    PROCEDURE enviar_email_com_varios_anexos (
        pr_servidor_smtp         VARCHAR2 DEFAULT 'smtp.jumboalimentos.com.br',
        pr_porta_smtp            VARCHAR2 DEFAULT 587,
        pr_usuario_servidor      VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        pr_senha_servidor        VARCHAR2 DEFAULT 'Jumbo#2019',
        pr_email_de              VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        pr_email_para            VARCHAR2 DEFAULT 'jumbo.ti@jumboalimentos.com.br',
        pr_email_copias_para     VARCHAR2 DEFAULT 'jumbo.ti@jumboalimentos.com.br',
        pr_titulo_email          VARCHAR2 DEFAULT 'Jumbo Email',
        pr_corpo_email           VARCHAR2 DEFAULT 'Segue em anexo',
        pr_nomes_anexos          tcnjstr,
        pr_mime_anexo            VARCHAR2 DEFAULT 'text/plain',
        pr_comandos_sql_anexos   tcnjstrlong,
        pr_gravar_cabecalho      BOOLEAN DEFAULT true,
        pr_eliminar_espacos      BOOLEAN DEFAULT true
    );


    PROCEDURE baixar_arquivo (
        p_caminho         VARCHAR2,
        p_nome_dir_dest   VARCHAR2,
        p_nome_arq_dest   VARCHAR2
    );


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet AS


    numtemp1     NUMBER default NULL;
    l_boundary   VARCHAR2(50) := '----=*#abc1234321cba#*=';
    v_contador   NUMBER DEFAULT 0;


    PROCEDURE inserir_erro (
        p_msg            VARCHAR2 DEFAULT NULL,
        p_vlrs           VARCHAR2 DEFAULT NULL,
        p_linha          INTEGER DEFAULT NULL,
        p_enviar_email   BOOLEAN DEFAULT false
    ) AS


        PRAGMA autonomous_transaction;
        c_lim_erro_seg    CONSTANT INTEGER := 1;
        c_lim_erro_min    CONSTANT INTEGER := 10;
        c_lim_erro_hora   CONSTANT INTEGER := 100;
        v_ler             __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__erros%rowtype default NULL;
        v_qt              INTEGER default NULL;
        v_permitido       BOOLEAN DEFAULT true;
    BEGIN
        v_qt := 0;
        SELECT
            COUNT(1)
        INTO v_qt
        FROM
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__erros
        WHERE
            to_char(dtocorrencia, 'dd/mm/yyyy hh24') = to_char(sysdate, 'dd/mm/yyyy hh24');


        IF v_qt < c_lim_erro_hora THEN
            SELECT
                COUNT(1)
            INTO v_qt
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__erros
            WHERE
                to_char(dtocorrencia, 'dd/mm/yyyy hh24:mi') = to_char(sysdate, 'dd/mm/yyyy hh24:mi');


            IF v_qt < c_lim_erro_min THEN
                SELECT
                    COUNT(1)
                INTO v_qt
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__erros
                WHERE
                    to_char(dtocorrencia, 'dd/mm/yyyy hh24:mi:ss') = to_char(sysdate, 'dd/mm/yyyy hh24:mi:ss');


                IF v_qt < c_lim_erro_seg THEN
                    v_permitido := true;
                ELSE
                    v_permitido := false;
                END IF;


            ELSE
                v_permitido := false;
            END IF;


        ELSE
            v_permitido := false;
        END IF;


        IF v_permitido = true THEN
            v_ler.dtocorrencia := sysdate;
            v_ler.tipoobjeto := 'package';
            v_ler.nomeobjeto := $$plsql_unit;
            v_ler.linha := nvl(p_linha, $$plsql_line);
            v_ler.coderro := sqlcode;
            v_ler.msg := substr(sqlerrm
                                || ' '
                                || dbms_utility.format_error_backtrace
                                || ' '
                                || p_msg, 1, 4000);


            v_ler.valores := p_vlrs;
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__errosemail VALUES v_ler;


            COMMIT;
            IF p_enviar_email = true THEN
                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__erros VALUES v_ler;


                COMMIT;
            END IF;
        ELSE
            dbms_output.put_line('MOSTRANDO ERRO NA FUNCAO INSERIR ERRO POR NAO SER PERMITIDO INCLUIR ERRO: '
                                    || substr(sqlerrm
                                            || ' '
                                            || dbms_utility.format_error_backtrace
                                            || ' '
                                            || p_msg, 1, 4000));
        END IF;


    EXCEPTION
        WHEN OTHERS THEN
            /*se esta procedure falhar, somente lhe resta mostrar o erro ocorrido*/
            dbms_output.put_line('MOSTRANDO ERRO NA FUNCAO INSERIR ERRO POR ERRO OCORRIDO NA FUNCAO:  '
                                    || substr(sqlerrm
                                            || ' '
                                            || dbms_utility.format_error_backtrace
                                            || ' '
                                            || p_msg, 1, 4000));


            NULL;
    END;


    PROCEDURE fechar_conexao (
        pv_conn IN OUT utl_smtp.connection
    ) AS
    BEGIN
        IF pv_conn.host IS NOT NULL THEN
            utl_smtp.close_connection(pv_conn);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line, p_enviar_email => true);
    END fechar_conexao;


    FUNCTION requisitar_endereco (
        endereco     VARCHAR2,
        parametros   VARCHAR2 DEFAULT NULL
    ) RETURN CLOB AS


        req        utl_http.req;
        res        utl_http.resp;
        retorno    CLOB DEFAULT '';
        v_buffer   VARCHAR2(32767);
    BEGIN
        req := utl_http.begin_request(endereco, 'POST', utl_http.http_version_1_1);
        utl_http.set_transfer_timeout(3600);
        utl_http.write_text(req, parametros);
        res := utl_http.get_response(req);
        retorno := '';
        IF res.status_code IN (
            100,
            200
        ) THEN
            BEGIN
                LOOP
                    utl_http.read_line(res, v_buffer);
                    retorno := retorno || v_buffer;
                END LOOP;


                utl_http.end_response(res);
            EXCEPTION
                WHEN utl_http.end_of_body THEN
                    utl_http.end_response(res);
                    NULL;
                WHEN OTHERS THEN
                    utl_http.end_response(res);
                    inserir_erro(p_vlrs => endereco || parametros, p_linha => $$plsql_line);
            END;
        ELSE
            raise_application_error(-20001, 'Requisicao retornou erro: || endereco: '
                                            || endereco
                                            || ' parametros: '
                                            || parametros
                                            || ' statuscode: '
                                            || to_char(res.status_code));
        END IF;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            utl_http.end_response(res);
            inserir_erro(p_linha => $$plsql_line, p_vlrs => endereco
                                                            || parametros
                                                            || ' status: '
                                                            || res.status_code, p_enviar_email => true);


            RETURN NULL;
    END requisitar_endereco;


    FUNCTION requisitar_endereco_blob (
        endereco     VARCHAR2,
        parametros   VARCHAR2 DEFAULT NULL
    ) RETURN BLOB AS


        req             utl_http.req;
        res             utl_http.resp;
        retorno         BLOB DEFAULT empty_blob();
        buffer          VARCHAR2(4000);
        l_http_buffer   RAW(32767);
    BEGIN
        req := utl_http.begin_request(endereco, 'POST', utl_http.http_version_1_1);
        utl_http.set_header(req, 'user-agent', 'mozilla/4.0');
        utl_http.set_header(req, 'content-type', 'application/json');
        utl_http.set_header(req, 'Content-Length', length(parametros));
        utl_http.write_text(req, parametros);
        res := utl_http.get_response(req);
        BEGIN
            LOOP
                utl_http.read_raw(res, l_http_buffer, 32766);
                dbms_lob.writeappend(retorno, utl_raw.length(l_http_buffer), l_http_buffer);
            END LOOP;


            utl_http.end_response(res);
        EXCEPTION
            WHEN utl_http.end_of_body THEN
                utl_http.end_response(res);
                NULL;
            WHEN OTHERS THEN
                utl_http.end_response(res);
                inserir_erro(p_linha => $$plsql_line, p_enviar_email => true);
        END;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            utl_http.end_response(res);
            inserir_erro(p_linha => $$plsql_line, p_enviar_email => true);
    END requisitar_endereco_blob;


    FUNCTION montar_cabecalho_email (
        p_servidor_smtp           VARCHAR2 DEFAULT 'smtp.jumboalimentos.com.br',
        p_porta_smtp              PLS_INTEGER DEFAULT 587,
        p_email_de                VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        p_usuario_servidor_smtp   VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        p_senha_servidor_smtp     VARCHAR2 DEFAULT 'Jumbo#2019',
        p_email_para              VARCHAR2,
        p_email_copias_para       VARCHAR2,
        p_titulo_email            VARCHAR2,
        p_comanexo                BOOLEAN DEFAULT false
    ) RETURN VARCHAR2 AS
        v_retorno VARCHAR2(4000);
    BEGIN
        v_retorno := 'Date: '
                        || to_char(systimestamp, 'Dy\",\" fmddfm Mon YYYY HH24:MI:SS TZHTZM', 'NLS_DATE_LANGUAGE=ENGLISH')
                        || utl_tcp.crlf
                        || 'From: '
                        || p_email_de
                        || utl_tcp.crlf
                        || 'To: '
                        || p_email_para
                        || utl_tcp.crlf
                        || 'Subject: '
                        || p_titulo_email
                        || utl_tcp.crlf;


        IF length(trim(p_email_copias_para)) > 0 THEN
            v_retorno := v_retorno
                            || 'Cc:'
                            || p_email_copias_para
                            || utl_tcp.crlf;
        END IF;


        v_retorno := v_retorno
                        || 'MIME-Version: 1.0'
                        || utl_tcp.crlf;
        IF p_comanexo = true THEN
            v_retorno := v_retorno
                            || 'Content-Type: multipart/mixed; boundary=\"'
                            || l_boundary
                            || '\"';
            /*mixed vai aparecer que tem anexo no email*/
        ELSE
            v_retorno := v_retorno
                            || 'Content-Type: multipart/alternative; boundary=\"'
                            || l_boundary
                            || '\"';
        END IF;


        v_retorno := v_retorno
                        || utl_tcp.crlf
                        || utl_tcp.crlf;
        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END montar_cabecalho_email;


    PROCEDURE incluir_receptores_email (
        p_conn      IN OUT utl_smtp.connection,
        enderecos   VARCHAR2
    ) AS
        v_array_receptores tcnjstr;
    BEGIN
        IF length(trim(enderecos)) > 0 THEN
            IF __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_FUNCS_ARRAY', p_owner => '__FNV_GET_NOMESCHEMA__') THEN
                v_array_receptores := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_array_str(enderecos, ';');
                FOR i IN 1..v_array_receptores.count LOOP utl_smtp.rcpt(p_conn, v_array_receptores(i));
                END LOOP;


            END IF;


        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END incluir_receptores_email;


    FUNCTION iniciar_email (
        p_servidor_smtp           VARCHAR2,
        p_porta_smtp              NUMBER,
        p_usuario_servidor_smtp   VARCHAR2,
        p_senha_servidor_smtp     VARCHAR2,
        p_email_de                VARCHAR2,
        p_email_para              VARCHAR2,
        p_email_copias_para       VARCHAR2,
        p_num_tentativas          NUMBER DEFAULT 0
    ) RETURN utl_smtp.connection AS


        v_conn               utl_smtp.connection;
        v_encoded_username   VARCHAR2(4000);
        v_encoded_password   VARCHAR2(4000);
        v_array_copias       tcnjstr;
        strtemp2             VARCHAR2(4000);
    BEGIN
        v_encoded_username := utl_raw.cast_to_varchar2(utl_encode.base64_encode(utl_raw.cast_to_raw(p_usuario_servidor_smtp)));


        v_encoded_password := utl_raw.cast_to_varchar2(utl_encode.base64_encode(utl_raw.cast_to_raw(p_senha_servidor_smtp)));


        v_conn := utl_smtp.open_connection(p_servidor_smtp, p_porta_smtp);
        utl_smtp.ehlo(v_conn, p_servidor_smtp);
        utl_smtp.command(v_conn, 'AUTH', 'LOGIN');
        utl_smtp.command(v_conn, v_encoded_username);
        utl_smtp.command(v_conn, v_encoded_password);
        utl_smtp.mail(v_conn, p_email_de);
        incluir_receptores_email(v_conn, p_email_para);
        incluir_receptores_email(v_conn, p_email_copias_para);
        RETURN v_conn;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line(sqlcode);
            dbms_output.put_line(sqlerrm);
            numtemp1 := sqlcode;
            IF numtemp1 IN (
                - 29278,
                29278
            ) AND p_num_tentativas < 100 THEN
                /*esse codigo de erro indica falha temporaria de logon no servidor de email, que pode ser resolvida em outra tentativa*/
                dbms_output.put_line(p_num_tentativas);
                RETURN iniciar_email(p_servidor_smtp, p_porta_smtp, p_usuario_servidor_smtp, p_senha_servidor_smtp, p_email_de,
                p_email_para, p_email_copias_para, p_num_tentativas + 1);


            ELSE
                dbms_output.put_line('erro no iniciar_email');
                inserir_erro(p_vlrs => substr('p_usuario_servidor_smtp: '
                                                || p_usuario_servidor_smtp
                                                || ' p_senha_servidor_smtp: '
                                                || p_senha_servidor_smtp
                                                || ' p_email_de: '
                                                || p_email_de
                                                || ' p_email_para: '
                                                || p_email_para
                                                || ' p_emil_copias_para: '
                                                || p_email_copias_para, 1, 4000), p_linha => $$plsql_line);


                fechar_conexao(v_conn);
                RETURN NULL;
            END IF;


    END iniciar_email;


    PROCEDURE escrever_tabela_html_email (
        p_conn       IN OUT utl_smtp.connection,
        p_tab_html   ttabela DEFAULT NULL
    ) AS


        v_lim           NUMBER DEFAULT 1000;
        v_acresc        NUMBER DEFAULT 50;
        v_cont          NUMBER DEFAULT 0;
        v_abert_linha   VARCHAR2(4000);
    BEGIN
        utl_smtp.write_data(p_conn, utl_tcp.crlf
                                    || '<table style=\"'
                                    || p_tab_html.prop_style
                                    || '\">'
                                    || p_tab_html.titulo
                                    || utl_tcp.crlf
                                    || '<tbody>');


        IF p_tab_html IS NOT NULL THEN
            if p_tab_html.linhas is not null then
                FOR i IN p_tab_html.linhas.first..p_tab_html.linhas.last LOOP
                    v_abert_linha := '<tr';
                    IF MOD(round(i / nvl(p_tab_html.passo_zebra, 1)), 2) = 1 THEN
                        v_abert_linha := v_abert_linha || ' style=\"background-color:lightblue\">';
                    ELSE
                        v_abert_linha := v_abert_linha || '>';
                    END IF;
    
    
                    utl_smtp.write_data(p_conn, v_abert_linha);
                    FOR j IN p_tab_html.linhas(i).celulas.first..p_tab_html.linhas(i).celulas.last LOOP 
                        utl_smtp.write_data(p_conn, p_tab_html.linhas(i).celulas(j)||utl_tcp.crlf);
                    END LOOP;
    
    
                    utl_smtp.write_data(p_conn, '</tr>' || utl_tcp.crlf);
                END LOOP;
            end if;

        END IF;


        utl_smtp.write_data(p_conn, '</tbody>'
                                    || utl_tcp.crlf
                                    || '</table>'
                                    || utl_tcp.crlf);


    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END escrever_tabela_html_email;


    PROCEDURE escrever_conteudo_email (
        p_conn             IN OUT utl_smtp.connection,
        p_conteudo         CLOB,
        p_tab_html         ttabela DEFAULT NULL,
        p_usar_limitador   BOOLEAN DEFAULT true
    ) AS
        v_conteudo        CLOB DEFAULT '';
        v_limitador       INTEGER DEFAULT 4000;
        v_conteudo_part   VARCHAR2(4000) DEFAULT '';
    BEGIN
        v_contador := v_contador + length('--'
                                            || l_boundary
                                            || utl_tcp.crlf
                                            || 'Content-Type: text/html; charset=\"iso-8859-1\"'
                                            || utl_tcp.crlf
                                            || utl_tcp.crlf);


        utl_smtp.write_data(p_conn, '--'
                                    || l_boundary
                                    || utl_tcp.crlf
                                    || 'Content-Type: text/html; charset=\"iso-8859-1\"'
                                    || utl_tcp.crlf
                                    || utl_tcp.crlf);


        IF ( dbms_lob.getlength(p_conteudo) > v_limitador ) AND ( p_usar_limitador = true ) THEN
            v_conteudo := p_conteudo;
            WHILE dbms_lob.getlength(v_conteudo) > 0 LOOP IF ( instr(v_conteudo, '__TABHTML__') > 0 ) AND ( instr(v_conteudo, '__TABHTML__') <
            v_limitador ) THEN
                v_contador := v_contador + length(substr(v_conteudo, 1, instr(v_conteudo, '__TABHTML__') - 1));


                utl_smtp.write_data(p_conn, substr(v_conteudo, 1, instr(v_conteudo, '__TABHTML__') - 1));


                v_contador := v_contador + length('em desenvolvimento...');
                utl_smtp.write_data(p_conn, 'em desenvolvimento...');
                v_contador := v_contador + length(substr(v_conteudo, instr(v_conteudo, '__TABHTML__') + length('__TABHTML__'), length
                (v_conteudo)));


                utl_smtp.write_data(p_conn, substr(v_conteudo, instr(v_conteudo, '__TABHTML__') + length('__TABHTML__'), length(
                v_conteudo)));


            ELSE
                v_conteudo_part := substr(v_conteudo, 1, v_limitador);
                v_conteudo := substr(v_conteudo, v_limitador + 1, length(v_conteudo));
                v_contador := v_contador + length(v_conteudo_part);
                utl_smtp.write_data(p_conn, v_conteudo_part);
            END IF;
            END LOOP;


        ELSE
            IF instr(p_conteudo, '__TABHTML__') > 0 THEN
                v_contador := v_contador + length(substr(p_conteudo, 1, instr(p_conteudo, '__TABHTML__') - 1));


                utl_smtp.write_data(p_conn, substr(p_conteudo, 1, instr(p_conteudo, '__TABHTML__') - 1));


                escrever_tabela_html_email(p_conn, p_tab_html);
                v_contador := v_contador + length(substr(p_conteudo, instr(p_conteudo, '__TABHTML__') + length('__TABHTML__'), length
                (p_conteudo)));


                utl_smtp.write_data(p_conn, substr(p_conteudo, instr(p_conteudo, '__TABHTML__') + length('__TABHTML__'), length(
                p_conteudo)));


            ELSE
                utl_smtp.write_data(p_conn, p_conteudo);
            END IF;
        END IF;


        utl_smtp.write_data(p_conn, utl_tcp.crlf || utl_tcp.crlf);
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END escrever_conteudo_email;


    PROCEDURE escrever_anexo_email (
        p_conn                IN OUT utl_smtp.connection,
        p_mime_anexo          VARCHAR2,
        p_nome_anexo          VARCHAR2,
        p_comando_sql_anexo   CLOB,
        p_gravar_cabecalho    BOOLEAN DEFAULT true,
        p_eliminar_espacos    BOOLEAN DEFAULT true,
        p_cursor_aberto       BOOLEAN DEFAULT false,
        p_cursor_id           INTEGER DEFAULT NULL
    ) AS


        v_cols        tcnjstr;
        v_cursor_id   INTEGER;
        v_col_cnt     INTEGER;
        v_desc_tab    dbms_sql.desc_tab2;
        v_linha       VARCHAR2(32000);
        strtemp2      VARCHAR2(4000) DEFAULT NULL;
    BEGIN
        utl_smtp.write_data(p_conn, '--'
                                    || l_boundary
                                    || utl_tcp.crlf);
        utl_smtp.write_data(p_conn, 'Content-Type: '
                                    || p_mime_anexo
                                    || '; name=\"'
                                    || p_nome_anexo
                                    || '\"'
                                    || utl_tcp.crlf);


        utl_smtp.write_data(p_conn, 'Content-Transfer-Encoding: quoted-printable;' || utl_tcp.crlf);
        utl_smtp.write_data(p_conn, 'Content-Disposition: attachment; filename=\"'
                                    || p_nome_anexo
                                    || '\"'
                                    || utl_tcp.crlf
                                    || utl_tcp.crlf);


        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_FUNCS_ARRAY', p_owner => '__FNV_GET_NOMESCHEMA__') ) 
            AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_FUNCS_CURSOR', p_owner => '__FNV_GET_NOMESCHEMA__') ) 
            AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_FUNCS_SQL', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            IF p_cursor_aberto = false THEN
                v_cursor_id := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor.abrir_cursor(p_comando_sql_anexo);
            ELSE
                v_cursor_id := p_cursor_id;
            END IF;


            v_cols := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor.obter_nomes_e_def_col_cursor(v_cursor_id, v_col_cnt, v_desc_tab);
            v_linha := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_str_array(v_cols, ';')
                        || ';'
                        || utl_tcp.crlf;


            IF p_gravar_cabecalho = true THEN
                utl_smtp.write_data(p_conn, v_linha);
            END IF;
            WHILE dbms_sql.fetch_rows(v_cursor_id) > 0 LOOP
                v_linha := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_linha_cursor(
                    p_cursor_id => v_cursor_id, 
                    p_desc_tab => v_desc_tab, 
                    p_col_cnt=> v_col_cnt, 
                    p_eliminar_espacos => p_eliminar_espacos
                ) || utl_tcp.crlf;


                utl_smtp.write_data(p_conn, v_linha);
            END LOOP;


            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor.fechar_cursor(v_cursor_id);
            utl_smtp.write_data(p_conn, utl_tcp.crlf || utl_tcp.crlf);
        END IF;


    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_vlrs => substr(p_comando_sql_anexo, 1, 4000), p_linha => $$plsql_line);


            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor.fechar_cursor(v_cursor_id);
    END escrever_anexo_email;


    PROCEDURE escrever_fechamento_email (
        p_conn IN OUT utl_smtp.connection
    ) AS
    BEGIN
        utl_smtp.write_data(p_conn, '--'
                                    || l_boundary
                                    || '--'
                                    || utl_tcp.crlf);
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END escrever_fechamento_email;


    PROCEDURE enviar_email (
        pr_servidor_smtp       VARCHAR2 DEFAULT 'smtp.jumboalimentos.com.br',
        pr_porta_smtp          VARCHAR2 DEFAULT 587,
        pr_usuario_servidor    VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        pr_senha_servidor      VARCHAR2 DEFAULT 'Jumbo#2019',
        pr_email_de            VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        pr_email_para          VARCHAR2 DEFAULT 'jumbo.ti@jumboalimentos.com.br',
        pr_email_copias_para   VARCHAR2 DEFAULT 'jumbo.ti@jumboalimentos.com.br',
        pr_titulo_email        VARCHAR2 DEFAULT 'Jumbo Email',
        pr_corpo_email         CLOB DEFAULT 'Email',
        pr_tab_html            ttabela DEFAULT NULL,
        pr_usar_limitador      BOOLEAN DEFAULT true
    ) AS


        PRAGMA autonomous_transaction;
        v_conn                    utl_smtp.connection;
        v_conteudo_inicial        VARCHAR2(32000);
        numtemp                   NUMBER;
        strtemp                   VARCHAR2(4000);
        v_email_para              VARCHAR2(4000);
        v_email_copias_para       VARCHAR2(4000);
        v_email_titulo            VARCHAR2(4000);
        v_email_corpo             VARCHAR2(4000);
        v_email_para_retificado   CLOB DEFAULT '';
    BEGIN
        v_contador := 0;
        v_email_para_retificado := pr_email_para;
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_FUNCS_ARRAY', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_email_para_retificado := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_str_array(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.excluir_duplicatas(
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_array_str(v_email_para_retificado, ';')), ';');


            NULL;
        END IF;


        v_conn := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.iniciar_email(p_servidor_smtp => pr_servidor_smtp, p_porta_smtp => pr_porta_smtp, p_usuario_servidor_smtp => pr_usuario_servidor, p_senha_servidor_smtp => pr_senha_servidor, p_email_de => pr_email_de,p_email_para => v_email_para_retificado, p_email_copias_para => pr_email_copias_para);


        IF v_conn.host IS NOT NULL THEN
            utl_smtp.open_data(v_conn);
            v_conteudo_inicial := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.montar_cabecalho_email(p_servidor_smtp => pr_servidor_smtp, p_porta_smtp=> pr_porta_smtp, p_email_de => pr_email_de, p_usuario_servidor_smtp => pr_usuario_servidor, p_senha_servidor_smtp =>pr_senha_servidor,p_email_para => v_email_para_retificado, p_email_copias_para => pr_email_copias_para, p_titulo_email=> pr_titulo_email, p_comanexo => false);


            v_contador := v_contador + length(v_conteudo_inicial);
            utl_smtp.write_data(v_conn, v_conteudo_inicial);
            escrever_conteudo_email(p_conn => v_conn, p_conteudo => pr_corpo_email, p_tab_html => pr_tab_html, p_usar_limitador => pr_usar_limitador);


            escrever_fechamento_email(v_conn);
            utl_smtp.close_data(v_conn);
            utl_smtp.quit(v_conn);
            v_email_para := substr(v_email_para_retificado, 1, 4000);
            v_email_copias_para := substr(pr_email_copias_para, 1, 4000);
            v_email_titulo := substr(pr_titulo_email, 1, 4000);
            v_email_corpo := substr(pr_corpo_email, 1, 4000);
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__envioemail (
                data,
                destinatario,
                copias,
                titulo,
                corpo
            ) VALUES (
                sysdate,
                v_email_para,
                v_email_copias_para,
                v_email_titulo,
                v_email_corpo
            );


            COMMIT;
        ELSE
            dbms_output.put_line(sqlerrm);
            raise_application_error(-20001, 'iniciar email retornou nulo');
        END IF;


    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            fechar_conexao(v_conn);
    END enviar_email;


    PROCEDURE enviar_email_com_anexo_dados (
        pr_servidor_smtp       VARCHAR2 DEFAULT 'smtp.jumboalimentos.com.br',
        pr_porta_smtp          VARCHAR2 DEFAULT 587,
        pr_usuario_servidor    VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        pr_senha_servidor      VARCHAR2 DEFAULT 'Jumbo#2019',
        pr_email_de            VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        pr_email_para          VARCHAR2 DEFAULT 'jumbo.ti@jumboalimentos.com.br',
        pr_email_copias_para   VARCHAR2 DEFAULT 'jumbo.ti@jumboalimentos.com.br',
        pr_titulo_email        VARCHAR2 DEFAULT 'Jumbo Email',
        pr_corpo_email         VARCHAR2 DEFAULT 'Segue em anexo',
        pr_nome_anexo          VARCHAR2 DEFAULT 'anexo.csv',
        pr_mime_anexo          VARCHAR2 DEFAULT 'text/plain',
        pr_comando_sql_anexo   CLOB DEFAULT 'select ''a'' as a from dual',
        pr_gravar_cabecalho    BOOLEAN DEFAULT true,
        pr_eliminar_espacos    BOOLEAN DEFAULT true,
        pr_tab_html            ttabela DEFAULT NULL,
        pr_cursor_id           NUMBER DEFAULT NULL
    ) AS


        sep_campo                 VARCHAR2(1) DEFAULT ';';
        v_conteudo_anexo          CLOB DEFAULT '';
        v_conn                    utl_smtp.connection;
        v_array_copias            tcnjstr;
        v_conteudo_inicial        CLOB DEFAULT '';
        v_corpo_email             VARCHAR2(32767);
        numtemp                   NUMBER;
        strtemp                   VARCHAR2(4000);
        v_cursor_id               INTEGER default NULL;
        v_email_para              VARCHAR2(4000);
        v_email_copias_para       VARCHAR2(4000);
        v_email_titulo            VARCHAR2(4000);
        v_email_corpo             VARCHAR2(4000);
        v_email_para_retificado   CLOB DEFAULT '';
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_FUNCS_CURSOR', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            IF ( pr_cursor_id <> NULL ) THEN
                v_cursor_id := pr_cursor_id;
            ELSE
                v_cursor_id := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor.abrir_cursor(pr_comando_sql_anexo);
            END IF;


            v_email_para_retificado := pr_email_para;
            IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_FUNCS_ARRAY', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
                v_email_para_retificado := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_str_array(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.excluir_duplicatas
                (__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_array_str(v_email_para_retificado, ';')), ';');


                NULL;
            END IF;


            v_conn := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.iniciar_email(p_servidor_smtp => pr_servidor_smtp, p_porta_smtp => pr_porta_smtp, p_usuario_servidor_smtp => pr_usuario_servidor, p_senha_servidor_smtp => pr_senha_servidor, p_email_de => pr_email_de,p_email_para => v_email_para_retificado, p_email_copias_para => pr_email_copias_para);


            IF v_conn.host IS NOT NULL THEN
                utl_smtp.open_data(v_conn);
                v_conteudo_inicial := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.montar_cabecalho_email(p_servidor_smtp => pr_servidor_smtp, p_porta_smtp=> pr_porta_smtp, p_email_de => pr_email_de, p_usuario_servidor_smtp => pr_usuario_servidor, p_senha_servidor_smtp=> pr_senha_servidor,p_email_para => v_email_para_retificado, p_email_copias_para => pr_email_copias_para, p_titulo_email=> pr_titulo_email, p_comanexo => true);


                utl_smtp.write_data(v_conn, v_conteudo_inicial);
                escrever_conteudo_email(p_conn => v_conn, p_conteudo => pr_corpo_email, p_tab_html => pr_tab_html);
                escrever_anexo_email(
                    p_conn => v_conn, 
                    p_mime_anexo => pr_mime_anexo, 
                    p_nome_anexo => pr_nome_anexo, 
                    p_comando_sql_anexo=> pr_comando_sql_anexo, 
                    p_gravar_cabecalho => pr_gravar_cabecalho,
                    p_eliminar_espacos => pr_eliminar_espacos,
                    p_cursor_aberto => true, 
                    p_cursor_id => v_cursor_id
                );


                escrever_fechamento_email(v_conn);
                utl_smtp.close_data(v_conn);
                utl_smtp.quit(v_conn);
                v_email_para := substr(pr_email_para, 1, 4000);
                v_email_copias_para := substr(pr_email_copias_para, 1, 4000);
                v_email_titulo := substr(pr_titulo_email, 1, 4000);
                v_email_corpo := substr(pr_corpo_email, 1, 4000);
                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__envioemail (
                    data,
                    destinatario,
                    copias,
                    titulo,
                    corpo
                ) VALUES (
                    sysdate,
                    v_email_para,
                    v_email_copias_para,
                    v_email_titulo,
                    v_email_corpo
                );


                IF deleting OR inserting OR updating THEN
                    NULL;
                ELSE
                    COMMIT;
                END IF;
            ELSE
                raise_application_error(-20001, 'iniciar email retornou nulo');
            END IF;


        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            fechar_conexao(v_conn);
    END enviar_email_com_anexo_dados;


    PROCEDURE enviar_email_com_varios_anexos (
        pr_servidor_smtp         VARCHAR2 DEFAULT 'smtp.jumboalimentos.com.br',
        pr_porta_smtp            VARCHAR2 DEFAULT 587,
        pr_usuario_servidor      VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        pr_senha_servidor        VARCHAR2 DEFAULT 'Jumbo#2019',
        pr_email_de              VARCHAR2 DEFAULT 'dba2@jumboalimentos.com.br',
        pr_email_para            VARCHAR2 DEFAULT 'jumbo.ti@jumboalimentos.com.br',
        pr_email_copias_para     VARCHAR2 DEFAULT 'jumbo.ti@jumboalimentos.com.br',
        pr_titulo_email          VARCHAR2 DEFAULT 'Jumbo Email',
        pr_corpo_email           VARCHAR2 DEFAULT 'Segue em anexo',
        pr_nomes_anexos          tcnjstr,
        pr_mime_anexo            VARCHAR2 DEFAULT 'text/plain',
        pr_comandos_sql_anexos   tcnjstrlong,
        pr_gravar_cabecalho      BOOLEAN DEFAULT true,
        pr_eliminar_espacos      BOOLEAN DEFAULT true
    ) AS


        sep_campo                 VARCHAR2(1) DEFAULT ';';
        v_conteudo_anexo          CLOB DEFAULT '';
        v_conn                    utl_smtp.connection;
        v_array_copias            tcnjstr;
        v_conteudo_inicial        CLOB DEFAULT '';
        v_corpo_email             VARCHAR2(32767);
        numtemp                   NUMBER;
        strtemp                   VARCHAR2(4000);
        qtelementos               INTEGER;
        v_email_para              VARCHAR2(4000);
        v_email_copias_para       VARCHAR2(4000);
        v_email_titulo            VARCHAR2(4000);
        v_email_corpo             VARCHAR2(4000);
        v_email_para_retificado   CLOB DEFAULT '';
    BEGIN
        v_email_para_retificado := pr_email_para;
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_FUNCS_ARRAY', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_email_para_retificado := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_str_array(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.excluir_duplicatas(
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_array_str(v_email_para_retificado, ';')), ';');


            NULL;
        END IF;


        v_conn := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.iniciar_email(p_servidor_smtp => pr_servidor_smtp, p_porta_smtp => pr_porta_smtp
        , p_usuario_servidor_smtp => pr_usuario_servidor, p_senha_servidor_smtp => pr_senha_servidor, p_email_de => pr_email_de,
                                p_email_para => v_email_para_retificado, p_email_copias_para => pr_email_copias_para);


        IF v_conn.host IS NOT NULL THEN
            utl_smtp.open_data(v_conn);
            v_conteudo_inicial := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.montar_cabecalho_email(p_servidor_smtp => pr_servidor_smtp, p_porta_smtp=> pr_porta_smtp, p_email_de => pr_email_de, p_usuario_servidor_smtp => pr_usuario_servidor, p_senha_servidor_smtp =>pr_senha_servidor,
                                p_email_para => v_email_para_retificado, p_email_copias_para => pr_email_copias_para, p_titulo_email=> pr_titulo_email, p_comanexo => true);


            utl_smtp.write_data(v_conn, v_conteudo_inicial);
            escrever_conteudo_email(p_conn => v_conn, p_conteudo => pr_corpo_email);
            qtelementos := pr_comandos_sql_anexos.count;
            FOR c IN 1..qtelementos LOOP 
                escrever_anexo_email(p_conn => v_conn, p_mime_anexo => pr_mime_anexo, p_nome_anexo => pr_nomes_anexos(c), p_comando_sql_anexo => pr_comandos_sql_anexos(c), p_gravar_cabecalho => pr_gravar_cabecalho,p_eliminar_espacos => pr_eliminar_espacos);
            END LOOP;


            escrever_fechamento_email(v_conn);
            utl_smtp.close_data(v_conn);
            utl_smtp.quit(v_conn);
            v_email_para := substr(pr_email_para, 1, 4000);
            v_email_copias_para := substr(pr_email_copias_para, 1, 4000);
            v_email_titulo := substr(pr_titulo_email, 1, 4000);
            v_email_corpo := substr(pr_corpo_email, 1, 4000);
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__envioemail (
                data,
                destinatario,
                copias,
                titulo,
                corpo
            ) VALUES (
                sysdate,
                v_email_para,
                v_email_copias_para,
                v_email_titulo,
                v_email_corpo
            );


            IF deleting OR inserting OR updating THEN
                NULL;
            ELSE
                COMMIT;
            END IF;
        ELSE
            raise_application_error(-20001, 'iniciar email retornou nulo');
        END IF;


    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            fechar_conexao(v_conn);
    END enviar_email_com_varios_anexos;


    PROCEDURE get_blob_from_https (
        pi_url IN VARCHAR2,
        po_blob IN OUT NOCOPY BLOB
    ) IS
        l_http_request    utl_http.req;
        l_http_response   utl_http.resp;
        l_http_buffer     RAW(32767);
    BEGIN
        l_http_request := utl_http.begin_request(pi_url);
        l_http_response := utl_http.get_response(l_http_request);
        BEGIN
            LOOP
                utl_http.read_raw(l_http_response, l_http_buffer, 32766);
                dbms_lob.writeappend(po_blob, utl_raw.length(l_http_buffer), l_http_buffer);
            END LOOP;
        EXCEPTION
            WHEN utl_http.end_of_body THEN
                utl_http.end_response(l_http_response);
        END;


    EXCEPTION
        WHEN utl_http.network_access_denied THEN
            dbms_output.put_line(' Check your ACL with DBMS_NETWORK_ACL_ADMIN or Your  Oracle wallet');
            RAISE;
        WHEN utl_http.transfer_timeout THEN
            dbms_output.put_line('No data is read and a read timeout occurred');
            RAISE;
        WHEN OTHERS THEN
            utl_http.end_response(l_http_response);
            dbms_output.put_line(sqlerrm || dbms_utility.format_error_backtrace);
            RAISE;
    END get_blob_from_https;


    PROCEDURE baixar_arquivo (
        p_caminho         VARCHAR2,
        p_nome_dir_dest   VARCHAR2,
        p_nome_arq_dest   VARCHAR2
    ) AS


        lv_url       VARCHAR2(500) := 'https://docs.oracle.com/cd/E11882_01/appdev.112/e25519.pdf';
        lc_return    BLOB := empty_blob();
        l_file       utl_file.file_type;
        l_buffer     RAW(32767);
        l_amount     BINARY_INTEGER := 32767;
        l_pos        INTEGER := 1;
        l_blob       BLOB := empty_blob();
        l_blob_len   INTEGER;
    BEGIN
        BEGIN
            dbms_lob.createtemporary(lc_return, true);
            lv_url := p_caminho;
            get_blob_from_https(lv_url, lc_return);
            l_buffer := NULL;
            l_file := utl_file.fopen(p_nome_dir_dest, p_nome_arq_dest, 'wb');
            l_blob_len := dbms_lob.getlength(lc_return);
            WHILE l_pos < l_blob_len LOOP
                dbms_lob.read(lc_return, l_amount, l_pos, l_buffer);
                utl_file.put_raw(l_file, l_buffer, false);
                l_pos := l_pos + l_amount;
            END LOOP;


            utl_file.fclose(l_file);
        EXCEPTION
            WHEN OTHERS THEN
                IF utl_file.is_open(l_file) THEN
                    utl_file.fclose(l_file);
                END IF;
                dbms_output.put_line(sqlerrm || dbms_utility.format_error_backtrace);
                RAISE;
        END;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm || dbms_utility.format_error_backtrace);
            inserir_erro(p_linha => $$plsql_line, p_enviar_email => true);
    END baixar_arquivo;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor":{
		"nomepackagesqldb":"__CHAVE__",
		"nomepackagesqlsistema":"__CHAVE__",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor AS
    FUNCTION obter_param (
        p_nomeparam      VARCHAR2 DEFAULT NULL,
        p_tipoentidade   VARCHAR2 DEFAULT NULL,
        p_codentidade    VARCHAR2 DEFAULT NULL,
        p_codprocesso    NUMBER DEFAULT NULL,
        p_valor_padrao   VARCHAR2 DEFAULT NULL
    ) RETURN VARCHAR2;


    PROCEDURE importar_pedidos_2596;


    PROCEDURE validacoes_extras_pedido (
        p_cabped       IN OUT  jumbo.integradora_comple.t_cabped,
        p_vsmensagem   IN OUT  VARCHAR2
    );


    PROCEDURE importar_ie_sintegra_ativos;


    PROCEDURE imp_ie_sintegra_cancelados;


    PROCEDURE imp_cadsit_sintegra;


    PROCEDURE zerar_saldo_rcas;


    PROCEDURE creditar_saldo_mensal_ccrcas;


    FUNCTION cliente_existe (
        p_cnpj      VARCHAR2,
        p_considerar_excluido   boolean default true
    ) RETURN boolean;
    
    FUNCTION usuario_existe (
        p_codusur NUMBER
    ) RETURN boolean;
    
    FUNCTION cidade_existe (
        p_cidade      VARCHAR2,
        p_estado      VARCHAR2
    ) RETURN boolean;
    
    FUNCTION rede_existe (
        p_rede      VARCHAR2
    ) RETURN boolean;

END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor AS


    FUNCTION obter_param (
        p_nomeparam      VARCHAR2 DEFAULT NULL,
        p_tipoentidade   VARCHAR2 DEFAULT NULL,
        p_codentidade    VARCHAR2 DEFAULT NULL,
        p_codprocesso    NUMBER DEFAULT NULL,
        p_valor_padrao   VARCHAR2 DEFAULT NULL
    ) RETURN VARCHAR2 AS
        existe    NUMBER DEFAULT 0;
        retorno   VARCHAR2(4000) DEFAULT NULL;
    BEGIN
        existe := 1;
        BEGIN
            SELECT
                valor
            INTO retorno
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__param p
            WHERE
                ( ( p_nomeparam IS NOT NULL
                    AND lower(TRIM(p.param)) = lower(TRIM(p_nomeparam)) ) )
                AND ( ( p_tipoentidade IS NOT NULL
                        AND lower(TRIM(p.tipoentidade)) = lower(TRIM(p_tipoentidade)) ) )
                AND ( ( p_codentidade IS NOT NULL
                        AND lower(TRIM(p.codentidade)) = lower(TRIM(p_codentidade)) ) )
                AND ( ( p_codprocesso IS NOT NULL
                        AND lower(TRIM(p.codprocessorelacionado)) = lower(TRIM(p_codprocesso)) ) );


        EXCEPTION
            WHEN no_data_found THEN
                existe := 0;
                NULL;
            WHEN OTHERS THEN
                __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
        END;


        IF existe = 0 THEN
            existe := 1;
            BEGIN
                SELECT
                    valor
                INTO retorno
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__param p
                WHERE
                    ( ( p_nomeparam IS NOT NULL
                        AND lower(TRIM(p.param)) = lower(TRIM(p_nomeparam)) ) )
                    AND ( ( p_tipoentidade IS NOT NULL
                            AND lower(TRIM(p.tipoentidade)) = lower(TRIM(p_tipoentidade)) ) )
                    AND ( ( p_codentidade IS NOT NULL
                            AND lower(TRIM(p.codentidade)) = lower(TRIM(p_codentidade)) ) )
                    AND p_codprocesso IS NULL;


            EXCEPTION
                WHEN no_data_found THEN
                    existe := 0;
                    NULL;
                WHEN OTHERS THEN
                    __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            END;


        END IF;


        IF existe = 0 THEN
            existe := 1;
            BEGIN
                SELECT
                    valor
                INTO retorno
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__param p
                WHERE
                    ( ( p_nomeparam IS NOT NULL
                        AND lower(TRIM(p.param)) = lower(TRIM(p_nomeparam)) ) )
                    AND ( p.tipoentidade IS NULL )
                    AND ( p.codentidade IS NULL )
                    AND ( ( p_codprocesso IS NOT NULL
                            AND lower(TRIM(p.codprocessorelacionado)) = lower(TRIM(p_codprocesso)) )
                            OR ( p_codprocesso IS NULL
                                AND p.codprocessorelacionado IS NULL ) );


            EXCEPTION
                WHEN no_data_found THEN
                    existe := 0;
                    NULL;
                WHEN OTHERS THEN
                    __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            END;


        END IF;


        IF existe = 0 THEN
            SELECT
                COUNT(1)
            INTO existe
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__param p
            WHERE
                ( ( p_nomeparam IS NOT NULL
                    AND lower(TRIM(p.param)) = lower(TRIM(p_nomeparam)) ) )
                AND p.tipoentidade IS NULL
                AND p.codentidade IS NULL
                AND ( p.codprocessorelacionado IS NULL
                        OR ( p.codprocessorelacionado IS NOT NULL
                            AND p_codprocesso IS NULL ) );


            IF existe = 1 THEN
                SELECT
                    valor
                INTO retorno
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__param p
                WHERE
                    ( ( p_nomeparam IS NOT NULL
                        AND lower(TRIM(p.param)) = lower(TRIM(p_nomeparam)) ) )
                    AND p.tipoentidade IS NULL
                    AND p.codentidade IS NULL
                    AND ( p.codprocessorelacionado IS NULL
                            OR ( p.codprocessorelacionado IS NOT NULL
                                AND p_codprocesso IS NULL ) );


            ELSE
                existe := 0;
            END IF;


        END IF;


        IF existe = 0 THEN
            retorno := p_valor_padrao;
        END IF;
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END obter_param;


    PROCEDURE importar_pedidos_2596 AS


        v_nomeparametro_importar      VARCHAR2(4000) DEFAULT 'importar_pedidos_automaticamente';
        v_entidadeparametro           VARCHAR2(4000) DEFAULT 'filial';
        v_destinatariosemail          VARCHAR2(4000);
        parametro_desativado EXCEPTION;
        v_intervalo_nao_processar     VARCHAR2(100);
        v_str_time_ini_nao_importar   VARCHAR2(100);
        v_str_time_fim_nao_importar   VARCHAR2(100);
        v_num1                        NUMBER;
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => 'INTEGRADORA', p_owner => 'JUMBO') ) THEN
            FOR lf IN (
                SELECT
                    codigo
                FROM
                    jumbo.pcfilial
                WHERE
                    nvl(codigo, 99) <> 99
            ) LOOP
                BEGIN
                    IF ( lower(trim(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor.obter_param(v_nomeparametro_importar, v_entidadeparametro, lf.codigo))) = 's' ) THEN
                        dbms_output.put_line('ativa');
                        /* ultima validacao feita no comando sql utilizado pela rotina 2596 do winthor efetuado em 28/10/2019, apos atualizacao geral do winthor, condicionantes conferem*/                    
                        /*verifica se a hora esta no intervalo configurado para nao processar*/
                        v_intervalo_nao_processar := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor.obter_param('intervalo_nao_importar', v_entidadeparametro, lf.codigo);
                        v_num1 := instr(nvl(v_intervalo_nao_processar, ''), '-');
                        IF ( v_intervalo_nao_processar IS NOT NULL AND length(nvl(v_intervalo_nao_processar, '')) > 0 AND v_num1 >0 ) THEN
                            v_str_time_ini_nao_importar := substr(v_intervalo_nao_processar, 1, v_num1 - 1);
                            v_str_time_fim_nao_importar := substr(v_intervalo_nao_processar, v_num1 + 1);
                            IF sysdate BETWEEN to_date(v_str_time_ini_nao_importar, 'hh24:mi') AND to_date(v_str_time_fim_nao_importar, 'hh24:mi') THEN
                                CONTINUE;
                            END IF;
                        END IF;
                        FOR lped IN (
                            SELECT
                                p.numpedrca
                            FROM
                                jumbo.pcpedcfv p
                            WHERE
                                trunc(p.dtinclusao) BETWEEN sysdate - 10 AND sysdate
                                AND nvl(p.observacao_pc, 'XX') <> 'REMOVIDO PELA ROTINA 2596'
                                AND nvl(nvl(nvl(p.codfilial, p.codfilialnf), p.codfilialretira), lf.codigo) = lf.codigo
                                AND p.importado = 1
                            ORDER BY
                                numpedrca
                        ) LOOP
                            dbms_output.put_line('importando pedido ' || lped.numpedrca);                                
                            /* ultima validacao feita no comando sql utilizado pela rotina 2596 do winthor efetuado em 28/10/2019, apos atualizacao geral do winthor*/
                            jumbo.integradora.importarpedido(p_numpedrca => lped.numpedrca);
                            COMMIT;
                        END LOOP;
                        jumbo.importarcadastros.importar();
                    ELSE
                        dbms_output.put_line('parametro importacao_automatica_ativo = n');
                        v_destinatariosemail := '';
                        IF lf.codigo = 2 THEN
                            v_destinatariosemail := 'pires@jumboalimentos.com.br;cadastro@jumboalimentos.com.br;alana@jumboalimentos.com.br;rafaela@jumboalimentos.com.br';
                        ELSE
                            v_destinatariosemail := 'renan@jumboalimentos.com.br;felipe@jumboalimentos.com.br;patricia@jumboalimentos.com.br;eric.mafioletti@jumboalimentos.com.br';
                        END IF;
                        RAISE parametro_desativado;
                        NULL;
                    END IF;
                EXCEPTION
                    WHEN parametro_desativado THEN
                        __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(
                            p_msg => 'parametro '|| v_nomeparametro_importar|| ' desativado para '|| v_entidadeparametro|| ' '|| lf.codigo, 
                            p_linha => $$plsql_line, 
                            p_destinatariosemail => v_destinatariosemail
                        );
                    WHEN OTHERS THEN
                        RAISE; /*reraising o erro atual*/
                END;
            END LOOP;
        ELSE
            raise_application_error(-20001, 'INTEGRADORA INVALIDA ');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END importar_pedidos_2596;


    PROCEDURE validacoes_extras_pedido (
        p_cabped       IN OUT  jumbo.integradora_comple.t_cabped,
        p_vsmensagem   IN OUT  VARCHAR2
    ) AS


        cnjcrit                  tcnjstr;
        v_enquadrou              BOOLEAN DEFAULT true;
        v_ultrapassou_max        BOOLEAN DEFAULT false;
        v_qtunitcx               NUMBER default NULL;
        v_qtacum_enquad          NUMBER DEFAULT 0;
        v_qtacum_validacao       NUMBER default NULL;
        v_msgnao_enquadramento   VARCHAR2(4000);
        v_validou                BOOLEAN DEFAULT true;
        v_multiplicando          NUMBER DEFAULT 1;
    BEGIN
        dbms_output.put_line('inicio');
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_msgnao_enquadramento := '';
            v_ultrapassou_max := false;
            FOR lval IN (
                SELECT
                    *
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__validacoespeds
                WHERE
                    lower(TRIM(nvl(status, 'I'))) = lower('A')
                ORDER BY
                    1
            ) LOOP
                dbms_output.put_line(lval.nome);
                v_qtacum_enquad := 0;
    
            
                /*verifica o enquadramento*/
                v_enquadrou := true;
                v_validou := true;
                FOR lvali IN (
                    SELECT
                        *
                    FROM
                        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__itensvalidacoespeds
                    WHERE
                        codvalidacao = lval.codvalidacao
                        AND lower(TRIM(tipo)) = lower('criterio de enquadramento')
                ) LOOP
                    dbms_output.put_line(lvali.entidade);
                    cnjcrit := tcnjstr();
                    CASE
                        WHEN lower(trim(lvali.entidade)) = lower('filial') THEN
                            cnjcrit := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_array_str(lvali.codentidades, ',');
                            v_enquadrou := false;
                            FOR i IN cnjcrit.first..cnjcrit.last LOOP
                                dbms_output.put_line(cnjcrit(i));
                                IF nvl(nvl(p_cabped.codfilial, p_cabped.codfilialnf), p_cabped.codfilialretira) = cnjcrit(i) THEN
                                    v_enquadrou := true;
                                    EXIT;
                                END IF;


                            END LOOP;


                            IF v_enquadrou = false THEN
                                v_msgnao_enquadramento := substr('nao enquadrou no criterio filial: '
                                                                    || nvl(nvl(p_cabped.codfilial, p_cabped.codfilialnf), p_cabped.codfilialretira
                                                                    )
                                                                    || ' entidade: '
                                                                    || lvali.entidade
                                                                    || ' cods: '
                                                                    || lvali.codentidades, 1, 4000);


                                dbms_output.put_line(v_msgnao_enquadramento);
                                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__logvalidacoespeds VALUES (
                                    sysdate,
                                    p_cabped.numpedrca,
                                    v_msgnao_enquadramento
                                );


                                IF ( inserting ) OR ( updating ) OR ( deleting ) THEN
                                    NULL;
                                ELSE
                                    COMMIT;
                                END IF;


                                EXIT;
                            ELSE
                                v_msgnao_enquadramento := substr('enquadrou no criterio filial: '
                                                                    || nvl(nvl(p_cabped.codfilial, p_cabped.codfilialnf), p_cabped.codfilialretira
                                                                    )
                                                                    || ' entidade: '
                                                                    || lvali.entidade
                                                                    || ' cods: '
                                                                    || lvali.codentidades, 1, 4000);


                                dbms_output.put_line(v_msgnao_enquadramento);
                                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__logvalidacoespeds VALUES (
                                    sysdate,
                                    p_cabped.numpedrca,
                                    v_msgnao_enquadramento
                                );


                                IF ( inserting ) OR ( updating ) OR ( deleting ) THEN
                                    NULL;
                                ELSE
                                    COMMIT;
                                END IF;


                            END IF;


                        WHEN lower(trim(lvali.entidade)) = lower('produto') THEN
                            cnjcrit := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_array_str(lvali.codentidades, ',');
                            v_enquadrou := false;
                            v_qtacum_enquad := 0;
                            FOR i IN cnjcrit.first..cnjcrit.last LOOP
                                dbms_output.put_line(cnjcrit(i));
                                FOR litens IN (
                                    SELECT DISTINCT
                                        i.codprod,
                                        i.qt,
                                        i.pvenda,
                                        nvl(p.perdescmax, 0) AS perdescmax,
                                        CASE
                                            WHEN c.codplpag = 1 THEN
                                                p.pvenda1
                                            WHEN c.codplpag = 2 THEN
                                                p.pvenda2
                                            WHEN c.codplpag = 3 THEN
                                                p.pvenda3
                                            WHEN c.codplpag = 4 THEN
                                                p.pvenda4
                                            WHEN c.codplpag = 5 THEN
                                                p.pvenda5
                                            WHEN c.codplpag = 6 THEN
                                                p.pvenda6
                                            WHEN c.codplpag = 7 THEN
                                                p.pvenda7
                                            ELSE
                                                p.pvenda1
                                        END AS pvendatab
                                    FROM
                                        jumbo.pcpedifv   i
                                        JOIN jumbo.pcpedcfv   c ON ( c.numpedrca = i.numpedrca )
                                        LEFT OUTER JOIN jumbo.pcclient   cl ON ( cl.codcli = c.codclinf
                                                                                OR ( to_number(regexp_replace(cl.cgcent,'[^0-9]*')) = to_number(regexp_replace(c.cgccli,'[^0-9]*'))
                                                                                    AND cl.dtexclusao IS NULL
                                                                                    AND cl.codusur1 <> 150 ) )
                                        LEFT OUTER JOIN jumbo.pctabpr    p ON ( p.codprod = i.codprod
                                                                                AND p.numregiao = cl.numregiaocli )
                                    WHERE
                                        i.numpedrca = p_cabped.numpedrca
                                        AND i.codprod = to_number(TRIM(nvl(cnjcrit(i), 0)))
                                ) LOOP
                                    IF lower(trim(nvl(lvali.unidade, 'kg'))) = lower('cx') THEN
                                        SELECT
                                            qtunitcx
                                        INTO v_qtunitcx
                                        FROM
                                            jumbo.pcprodut
                                        WHERE
                                            codprod = litens.codprod;


                                        v_qtacum_enquad := nvl(v_qtacum_enquad, 0) + ( litens.qt / nvl(v_qtunitcx, 1) );


                                    ELSE
                                        v_qtacum_enquad := nvl(v_qtacum_enquad, 0) + litens.qt;
                                    END IF;


                                    dbms_output.put_line('v_qtacum_enquad: ' || v_qtacum_enquad);
                                    dbms_output.put_line('pvenda: '
                                                            || nvl(litens.pvenda, 0));
                                    dbms_output.put_line('pvendatab: '
                                                            || nvl(litens.pvendatab, 0));
                                    dbms_output.put_line('perdescmax: '
                                                            || nvl(litens.perdescmax, 0));
                                    dbms_output.put_line('pvendacomdescmax: '
                                                            ||(nvl(litens.pvendatab, 0) *(1 -(nvl(litens.perdescmax, 0) / 100))));


                                    IF ( nvl(litens.pvenda, 0) < ( nvl(litens.pvendatab, 0) * ( 1 - ( nvl(litens.perdescmax, 0) /
                                    100 ) ) ) ) THEN
                                        v_enquadrou := true;
                                        dbms_output.put_line('enquadrou por preco com desconto');
                                        dbms_output.put_line(nvl(litens.pvenda, 0));
                                        dbms_output.put_line(nvl(litens.pvendatab, 0));
                                    END IF;


                                END LOOP;


                            END LOOP;


                            IF ( v_enquadrou = true ) AND ( nvl(v_qtacum_enquad, 0) >= nvl(lvali.qtmin, 0) ) THEN
                                v_enquadrou := true;
                                dbms_output.put_line('v_qtacum_enquad: ' || nvl(v_qtacum_enquad, 0));
                                dbms_output.put_line('qtmin: '
                                                        || nvl(lvali.qtmin, 0));
                                dbms_output.put_line('qtmin: '
                                                        || nvl(lvali.multiplicadorenquadramento, 0));
                                v_multiplicando := trunc(nvl(v_qtacum_enquad, 0) / nvl(lvali.multiplicadorenquadramento, nvl(v_qtacum_enquad
                                , 1)));


                                IF nvl(v_multiplicando, 0) < 1 THEN
                                    v_multiplicando := 1;
                                END IF;
                                dbms_output.put_line('encontrado multiplicando: ' || v_multiplicando);
                            ELSE
                                v_enquadrou := false;
                                dbms_output.put_line('desenquadrado por quantidade ou desconto');
                            END IF;


                            IF ( nvl(v_qtacum_enquad, 0) > nvl(lvali.qtmax, 999999999) ) AND (nvl(lvali.rejeitarsemaiormax,0) = 1) THEN
                                v_enquadrou := false;
                                v_ultrapassou_max := true;
                                dbms_output.put_line('invalidado no por ultrapassar a quantidade maxima');
                                p_vsmensagem := p_vsmensagem || ' Quantidade maxima ultrapassada, Nao atende aos criterios da empresa ';
                                p_cabped.valido := false;
                                EXIT;
                            END IF;


                            IF v_enquadrou = false THEN
                                v_msgnao_enquadramento := substr('nao enquadrou no criterio produto: entidade: '
                                                                    || lvali.entidade
                                                                    || ' cods: '
                                                                    || lvali.codentidades
                                                                    || ' qtmin: '
                                                                    || lvali.qtmin
                                                                    || ' qtped: '
                                                                    || nvl(v_qtacum_enquad, 0)
                                                                    || ' un: '
                                                                    || lvali.unidade, 1, 4000);


                                dbms_output.put_line(v_msgnao_enquadramento);
                                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__logvalidacoespeds VALUES (
                                    sysdate,
                                    p_cabped.numpedrca,
                                    v_msgnao_enquadramento
                                );


                                IF ( inserting ) OR ( updating ) OR ( deleting ) THEN
                                    NULL;
                                ELSE
                                    COMMIT;
                                END IF;


                                EXIT;
                            ELSE
                                v_msgnao_enquadramento := substr('enquadrou no criterio produto: entidade: '
                                                                    || lvali.entidade
                                                                    || ' cods: '
                                                                    || lvali.codentidades
                                                                    || ' qtmin: '
                                                                    || lvali.qtmin
                                                                    || ' qtped: '
                                                                    || nvl(v_qtacum_enquad, 0)
                                                                    || ' un: '
                                                                    || lvali.unidade, 1, 4000);


                                dbms_output.put_line(v_msgnao_enquadramento);
                                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__logvalidacoespeds VALUES (
                                    sysdate,
                                    p_cabped.numpedrca,
                                    v_msgnao_enquadramento
                                );


                                IF ( inserting ) OR ( updating ) OR ( deleting ) THEN
                                    NULL;
                                ELSE
                                    COMMIT;
                                END IF;


                            END IF;


                        ELSE
                            raise_application_error(-20001, 'Entidade nao prevista: ' || lvali.entidade);
                    END CASE;


                    IF v_enquadrou = false THEN
                        EXIT;
                    END IF;
                END LOOP;


                IF v_enquadrou = false THEN
                    EXIT;
                END IF;
                dbms_output.put_line('enquadrou: ' || __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao.boolean_to_char(v_enquadrou));
                IF v_enquadrou = true THEN
            
            
                    /*verifica a validacao*/
                    v_validou := true;
                    FOR lvali IN (
                        SELECT
                            *
                        FROM
                            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__itensvalidacoespeds
                        WHERE
                            codvalidacao = lval.codvalidacao
                            AND lower(TRIM(tipo)) = lower('criterio de validacao')
                        ORDER BY
                            1
                    ) LOOP
                        dbms_output.put_line(lvali.entidade);
                        dbms_output.put_line('multiplicador: '
                                                || nvl(lvali.multiplicadorenquadramento, 1));
                        cnjcrit := tcnjstr();
                        CASE
                            WHEN lower(trim(lvali.entidade)) = lower('produto') THEN
                                cnjcrit := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_array_str(lvali.codentidades, ',');
                                v_validou := false;
                                v_qtacum_validacao := 0;
                                FOR i IN cnjcrit.first..cnjcrit.last LOOP FOR litens IN (
                                    SELECT
                                        codprod,
                                        qt
                                    FROM
                                        jumbo.pcpedifv
                                    WHERE
                                        numpedrca = to_number(TRIM(p_cabped.numpedrca))
                                        AND codprod = to_number(TRIM(nvl(cnjcrit(i), 0)))
                                ) LOOP
                                    IF lower(trim(nvl(lvali.unidade, 'kg'))) = lower('cx') THEN
                                        SELECT
                                            qtunitcx
                                        INTO v_qtunitcx
                                        FROM
                                            jumbo.pcprodut
                                        WHERE
                                            codprod = litens.codprod;


                                        v_qtacum_validacao := nvl(v_qtacum_validacao, 0) + ( litens.qt / nvl(v_qtunitcx, 1) );


                                    ELSE
                                        v_qtacum_validacao := nvl(v_qtacum_validacao, 0) + litens.qt;
                                    END IF;
                                END LOOP;
                                END LOOP;


                                IF ( ( nvl(v_qtacum_validacao, 0) >= nvl(lvali.qtmin, 0) ) AND ( nvl(v_qtacum_validacao, 0) >= (
                                nvl(lvali.qtmin, 0) + ( nvl(lvali.multiplicadorenquadramento, 1) * ( nvl(v_multiplicando, 1) - 1 )
                                ) ) ) ) THEN
                                    dbms_output.put_line('v_qtacum_validacao: ' || nvl(v_qtacum_validacao, 0));
                                    dbms_output.put_line('qtmin: '
                                                            || nvl(lvali.qtmin, 0));
                                    dbms_output.put_line('multiplicador: '
                                                            || nvl(lvali.multiplicadorenquadramento, 1));
                                    dbms_output.put_line('multiplicando: ' || nvl(v_multiplicando, 1));
                                    dbms_output.put_line('resultado: '
                                                            ||(nvl(lvali.qtmin, 0) +(nvl(lvali.multiplicadorenquadramento, 1) *(nvl(
                                                            v_multiplicando, 1) - 1))));


                                    v_validou := true;
                                END IF;


                                IF v_validou = false THEN
                                    v_msgnao_enquadramento := substr('nao enquadrou na validacao do produto: entidade: '
                                                                        || lvali.entidade
                                                                        || ' cods: '
                                                                        || lvali.codentidades
                                                                        || ' qtmin: '
                                                                        || lvali.qtmin
                                                                        || ' qtped: '
                                                                        || nvl(v_qtacum_validacao, 0)
                                                                        || ' multiplicando: '
                                                                        || nvl(v_multiplicando, 1)
                                                                        || ' un: '
                                                                        || lvali.unidade, 1, 4000);


                                    dbms_output.put_line(v_msgnao_enquadramento);
                                    p_vsmensagem := p_vsmensagem || ' VENDA CASADA SEM ITENS NECESSARIOS ';
                                    p_cabped.valido := false;
                                    INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__logvalidacoespeds VALUES (
                                        sysdate,
                                        p_cabped.numpedrca,
                                        v_msgnao_enquadramento
                                    );


                                    IF ( inserting ) OR ( updating ) OR ( deleting ) THEN
                                        NULL;
                                    ELSE
                                        COMMIT;
                                    END IF;


                                    EXIT;
                                ELSE
                                    v_msgnao_enquadramento := substr('enquadrou na validacao do produto: entidade: '
                                                                        || lvali.entidade
                                                                        || ' cods: '
                                                                        || lvali.codentidades
                                                                        || ' qtmin: '
                                                                        || lvali.qtmin
                                                                        || ' qtped: '
                                                                        || nvl(v_qtacum_validacao, 0)
                                                                        || ' multiplicando: '
                                                                        || nvl(v_multiplicando, 1)
                                                                        || ' un: '
                                                                        || lvali.unidade, 1, 4000);


                                    dbms_output.put_line(v_msgnao_enquadramento);
                                    INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__logvalidacoespeds VALUES (
                                        sysdate,
                                        p_cabped.numpedrca,
                                        v_msgnao_enquadramento
                                    );


                                    IF ( inserting ) OR ( updating ) OR ( deleting ) THEN
                                        NULL;
                                    ELSE
                                        COMMIT;
                                    END IF;


                                END IF;


                            ELSE
                                raise_application_error(-20001, 'Entidade nao previsa: ' || lvali.entidade);
                        END CASE;


                        IF v_validou = false THEN
                            dbms_output.put_line('invalidado no final do loop');
                            p_vsmensagem := p_vsmensagem || ' Nao atende aos criterios da empresa ';
                            p_cabped.valido := false;
                            EXIT;
                        END IF;


                    END LOOP;


                END IF;


            END LOOP;


            IF v_validou = false THEN
                dbms_output.put_line('invalidado no fim');
                p_vsmensagem := p_vsmensagem || ' Invalidado pelas validacoes da politica da empresa';
                p_cabped.valido := false;
            END IF;


        END IF;


        dbms_output.put_line('fim');
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END validacoes_extras_pedido;


    PROCEDURE importar_ie_sintegra_ativos AS


        v_exists                 BOOLEAN;
        v_length                 NUMBER;
        v_blocksize              NUMBER;
        v_file_type              utl_file.file_type;
        v_file_name              VARCHAR2(200);
        v_directory_name         VARCHAR2(30);
        v_directory_dest_name    VARCHAR2(30);
        v_file_dest_name         VARCHAR2(200);
        v_line                   VARCHAR2(4000);
        linha_inscricao          __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__inscestaduais%rowtype;
        str1                     VARCHAR2(4000);
        cont_campos              NUMBER DEFAULT 0;
        existe_preco             NUMBER DEFAULT 0;
        num1                     NUMBER DEFAULT 0;
        num_linhas_atualizadas   NUMBER DEFAULT 0;
        num_linhas_inseridas     NUMBER DEFAULT 0;
    BEGIN
        v_directory_name := 'DIR_SINTEGRA';
        v_directory_dest_name := 'DIR_SINTEGRA_IMPORTADOS';
        v_file_name := 'ativos.txt';
        v_file_dest_name := 'ativos'
                            || to_char(sysdate, 'ddmmyyyy HH24miss')
                            || '.txt';
        utl_file.fgetattr(v_directory_name, v_file_name, v_exists, v_length, v_blocksize);
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.tabela_existe('__FNV_GET_PREFIXOBJECTSDB__inscestaduaisbkp') > 0 ) THEN
            EXECUTE IMMEDIATE 'drop table __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__inscestaduaisbkp';
        END IF;


        EXECUTE IMMEDIATE 'create table __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__inscestaduaisbkp as select * from __FNV_GET_PREFIXOBJECTSDB__inscestaduais';
        COMMIT;
        IF v_exists THEN
            dbms_output.put_line('arquivo encontrado');
            v_file_type := utl_file.fopen(v_directory_name, v_file_name, 'R');
            BEGIN
                LOOP
                    BEGIN
                        utl_file.get_line(v_file_type, v_line);
                        linha_inscricao := NULL;
                        cont_campos := 0;
                        LOOP BEGIN
                            IF ( ( nvl(instr(v_line, ';'), 0) = 0 ) AND ( nvl(length(v_line), 0) = 0 ) ) THEN
                                EXIT;
                            END IF;


                            IF ( instr(v_line, ';') = 0 ) THEN
                                str1 := v_line;
                                v_line := '';
                            ELSE
                                str1 := substr(v_line, 0, instr(v_line, ';') - 1);


                                v_line := substr(v_line, instr(v_line, ';') + 1);
                            END IF;


                            CASE cont_campos
                                WHEN 0 THEN
                                    linha_inscricao.inscest := str1;
                                WHEN 1 THEN
                                    linha_inscricao.cnpj := str1;
                                WHEN 2 THEN
                                    linha_inscricao.dthabilitacao := str1;
                                WHEN 3 THEN
                                    linha_inscricao.situacao := str1;
                                WHEN 4 THEN
                                    linha_inscricao.codmunicipio := str1;
                                WHEN 5 THEN
                                    linha_inscricao.codcnae := str1;
                                ELSE
                                    NULL;
                            END CASE;


                            IF ( ( nvl(instr(v_line, ';'), 0) = 0 ) AND ( nvl(length(v_line), 0) = 0 ) ) THEN
                                EXIT;
                            END IF;


                            cont_campos := cont_campos + 1;
                        EXCEPTION
                            WHEN OTHERS THEN
                                __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => v_line, p_linha => $$plsql_line);
                        END;
                        END LOOP;


                        IF ( length(trim(linha_inscricao.inscest)) > 0 ) THEN
                            UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__inscestaduais
                            SET
                                row = linha_inscricao
                            WHERE
                                inscest = linha_inscricao.inscest
                                AND cnpj = linha_inscricao.cnpj;


                            num_linhas_atualizadas := num_linhas_atualizadas + 1;
                            IF ( SQL%rowcount = 0 ) THEN
                                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__inscestaduais VALUES linha_inscricao;


                                num_linhas_inseridas := num_linhas_inseridas + 1;
                                num_linhas_atualizadas := num_linhas_atualizadas - 1;
                            END IF;


                            COMMIT;
                        END IF;


                    EXCEPTION
                        WHEN no_data_found THEN
                            EXIT;
                        WHEN OTHERS THEN
                            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => v_line, p_linha => $$plsql_line);
                    END;
                END LOOP;
            EXCEPTION
                WHEN no_data_found THEN
                    NULL;
            END;


            utl_file.fclose(v_file_type);
            utl_file.frename(v_directory_name, v_file_name, v_directory_dest_name, v_file_dest_name, true);
        ELSE
            dbms_output.put_line('arquivo nao existe na pasta');
        END IF;


        dbms_output.put_line('linhas atualizadas : ' || num_linhas_atualizadas);
        dbms_output.put_line('linhas inseridas : ' || num_linhas_inseridas);
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END importar_ie_sintegra_ativos;


    PROCEDURE imp_ie_sintegra_cancelados AS


        v_exists                BOOLEAN;
        v_length                NUMBER;
        v_blocksize             NUMBER;
        v_file_type             utl_file.file_type;
        v_file_name             VARCHAR2(200);
        v_directory_name        VARCHAR2(30);
        v_directory_dest_name   VARCHAR2(30);
        v_file_dest_name        VARCHAR2(200);
        v_line                  VARCHAR2(4000);
        linha_sintegra          __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__sintegraie%rowtype;
        str1                    VARCHAR2(4000);
        cont_campos             NUMBER DEFAULT 0;
        v_existe                NUMBER DEFAULT 0;
        num1                    NUMBER DEFAULT 0;
    BEGIN
        v_directory_name := 'DIR_SINTEGRA';
        v_directory_dest_name := 'DIR_SINTEGRA_IMPORTADOS';
        v_file_name := 'cancelados.txt';
        v_file_dest_name := 'cancelados'
                            || to_char(sysdate, 'ddmmyyyy HH24miss')
                            || '.txt';
        utl_file.fgetattr(v_directory_name, v_file_name, v_exists, v_length, v_blocksize);
        IF v_exists THEN
            dbms_output.put_line('arquivo encontrado');
            v_file_type := utl_file.fopen(v_directory_name, v_file_name, 'R');
            BEGIN
                LOOP BEGIN
                    utl_file.get_line(v_file_type, v_line);
                    linha_sintegra := NULL;
                    cont_campos := 0;
                    LOOP BEGIN
                        IF ( ( nvl(instr(v_line, ';'), 0) = 0 ) AND ( nvl(length(v_line), 0) = 0 ) ) THEN
                            EXIT;
                        END IF;


                        IF ( instr(v_line, ';') = 0 ) THEN
                            str1 := v_line;
                            v_line := '';
                        ELSE
                            str1 := substr(v_line, 0, instr(v_line, ';') - 1);


                            v_line := substr(v_line, instr(v_line, ';') + 1);
                        END IF;


                        CASE cont_campos
                            WHEN 0 THEN
                                linha_sintegra.ie := str1;
                            WHEN 1 THEN
                                linha_sintegra.cnpj := str1;
                            WHEN 2 THEN
                                linha_sintegra.datahabilitacao := to_date(str1, 'yyyymm');
                            WHEN 3 THEN
                                linha_sintegra.situacaoatual := str1;
                            WHEN 4 THEN
                                linha_sintegra.municipio := str1;
                            WHEN 5 THEN
                                linha_sintegra.cnae := str1;
                            ELSE
                                NULL;
                        END CASE;


                        IF ( ( nvl(instr(v_line, ';'), 0) = 0 ) AND ( nvl(length(v_line), 0) = 0 ) ) THEN
                            EXIT;
                        END IF;


                        cont_campos := cont_campos + 1;
                    EXCEPTION
                        WHEN OTHERS THEN
                            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => str1
                                                                        || '|'
                                                                        || v_line, p_linha => $$plsql_line);
                    END;
                    END LOOP;


                    IF ( length(trim(linha_sintegra.ie)) > 0 ) THEN
                        linha_sintegra.ativo := 0;
                        v_existe := 0;
                        SELECT
                            COUNT(1)
                        INTO v_existe
                        FROM
                            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__sintegraie
                        WHERE
                            TRIM(__FNV_GET_PREFIXOBJECTSDB__sintegraie.ie) = TRIM(linha_sintegra.ie);


                        IF ( v_existe > 0 ) THEN
                            SELECT
                                nvl(dtimportacao, sysdate)
                            INTO linha_sintegra.dtimportacao
                            FROM
                                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__sintegraie
                            WHERE
                                TRIM(__FNV_GET_PREFIXOBJECTSDB__sintegraie.ie) = TRIM(linha_sintegra.ie);


                            linha_sintegra.dtatualizacao := sysdate;
                            UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__sintegraie
                            SET
                                row = linha_sintegra
                            WHERE
                                TRIM(__FNV_GET_PREFIXOBJECTSDB__sintegraie.ie) = TRIM(linha_sintegra.ie);


                        ELSE
                            linha_sintegra.dtimportacao := sysdate;
                            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__sintegraie VALUES linha_sintegra;


                        END IF;


                        COMMIT;
                    END IF;


                EXCEPTION
                    WHEN no_data_found THEN
                        EXIT;
                    WHEN OTHERS THEN
                        __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => v_line, p_linha => $$plsql_line);
                END;
                END LOOP;


                COMMIT;
            EXCEPTION
                WHEN no_data_found THEN
                    NULL;
            END;


            COMMIT;
            utl_file.fclose(v_file_type);
            utl_file.frename(v_directory_name, v_file_name, v_directory_dest_name, v_file_dest_name, true);
        ELSE
            dbms_output.put_line('arquivo nao existe na pasta');
        END IF;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            COMMIT;
    END imp_ie_sintegra_cancelados;


    PROCEDURE imp_cadsit_sintegra AS


        v_exists                BOOLEAN;
        v_length                NUMBER;
        v_blocksize             NUMBER;
        v_file_type             utl_file.file_type;
        v_file_name             VARCHAR2(200);
        v_directory_name        VARCHAR2(30);
        v_directory_dest_name   VARCHAR2(30);
        v_file_dest_name        VARCHAR2(200);
        v_line                  VARCHAR2(4000);
        linha_sintegra          __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__sintegrasitie%rowtype;
        str1                    VARCHAR2(4000);
        cont_campos             NUMBER DEFAULT 0;
        v_existe                NUMBER DEFAULT 0;
        num1                    NUMBER DEFAULT 0;
    BEGIN
        v_directory_name := 'DIR_SINTEGRA';
        v_directory_dest_name := 'DIR_SINTEGRA_IMPORTADOS';
        v_file_name := 'TAB_SRP.txt';
        v_file_dest_name := 'TAB_SRP'
                            || to_char(sysdate, 'ddmmyyyy HH24miss')
                            || '.txt';
        utl_file.fgetattr(v_directory_name, v_file_name, v_exists, v_length, v_blocksize);
        IF v_exists THEN
            dbms_output.put_line('arquivo encontrado');
            v_file_type := utl_file.fopen(v_directory_name, v_file_name, 'R');
            BEGIN
                LOOP BEGIN
                    utl_file.get_line(v_file_type, v_line);
                    linha_sintegra := NULL;
                    cont_campos := 0;
                    v_line := trim(v_line);
                    IF ( length(v_line) > 0 ) THEN
                        LOOP BEGIN
                            IF ( cont_campos = 0 ) OR ( cont_campos = 1 ) THEN
                                str1 := trim(substr(v_line, 0, instr(v_line, ' ') - 1));


                                v_line := trim(substr(v_line, instr(v_line, ' ') + 1));


                            ELSE
                                IF ( cont_campos = 2 ) THEN
                                    str1 := trim(substr(v_line, 0, instr(v_line, ' - ') - 1));


                                    v_line := trim(substr(v_line, instr(v_line, ' - ') + 3));


                                END IF;


                                IF ( cont_campos = 2 ) THEN
                                    str1 := trim(substr(v_line, 0, instr(v_line, ' - ') - 1));


                                    v_line := trim(substr(v_line, instr(v_line, ' - ') + 3));


                                ELSE
                                    IF cont_campos = 3 THEN
                                        str1 := trim(substr(v_line, 0, instr(v_line, ' / ') - 1));


                                        v_line := trim(substr(v_line, instr(v_line, ' / ') + 3));


                                    ELSE
                                        str1 := v_line;
                                        v_line := '';
                                    END IF;
                                END IF;


                            END IF;


                            CASE cont_campos
                                WHEN 0 THEN
                                    linha_sintegra.codgruposit := str1;
                                WHEN 1 THEN
                                    linha_sintegra.codsituacao := str1;
                                WHEN 2 THEN
                                    linha_sintegra.situacao := str1;
                                WHEN 3 THEN
                                    linha_sintegra.compl1situacao := str1;
                                ELSE
                                    NULL;
                            END CASE;


                            cont_campos := cont_campos + 1;
                        EXCEPTION
                            WHEN OTHERS THEN
                                __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => str1
                                                                            || '|'
                                                                            || v_line, p_linha => $$plsql_line);
                        END;
                        END LOOP;


                        IF ( length(trim(linha_sintegra.situacao)) > 0 ) THEN
                            IF linha_sintegra.situacao = 'ATIVO' THEN
                                linha_sintegra.ativo := 1;
                            ELSE
                                linha_sintegra.ativo := 0;
                            END IF;


                            v_existe := 0;
                            SELECT
                                COUNT(1)
                            INTO v_existe
                            FROM
                                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__sintegrasitie
                            WHERE
                                __FNV_GET_PREFIXOBJECTSDB__sintegrasitie.codsituacao = linha_sintegra.codsituacao;


                            IF ( v_existe > 0 ) THEN
                                SELECT
                                    nvl(dtimportacao, sysdate)
                                INTO linha_sintegra.dtimportacao
                                FROM
                                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__sintegrasitie
                                WHERE
                                    __FNV_GET_PREFIXOBJECTSDB__sintegrasitie.codsituacao = linha_sintegra.codsituacao;


                                linha_sintegra.dtatualizacao := sysdate;
                                UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__sintegrasitie
                                SET
                                    row = linha_sintegra
                                WHERE
                                    __FNV_GET_PREFIXOBJECTSDB__sintegrasitie.codsituacao = linha_sintegra.codsituacao;


                            ELSE
                                linha_sintegra.dtimportacao := sysdate;
                                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__sintegrasitie VALUES linha_sintegra;


                            END IF;


                            COMMIT;
                        END IF;


                    END IF;


                EXCEPTION
                    WHEN no_data_found THEN
                        EXIT;
                    WHEN OTHERS THEN
                        __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => v_line, p_linha => $$plsql_line);
                END;
                END LOOP;


                COMMIT;
            EXCEPTION
                WHEN no_data_found THEN
                    NULL;
            END;


            COMMIT;
            utl_file.fclose(v_file_type);
            utl_file.frename(v_directory_name, v_file_name, v_directory_dest_name, v_file_dest_name, true);
        ELSE
            dbms_output.put_line('arquivo nao existe na pasta');
        END IF;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            COMMIT;
    END imp_cadsit_sintegra;


    PROCEDURE zerar_saldo_rcas AS


        v_nomeparametro_importar   VARCHAR2(4000) DEFAULT 'zerar_saldo_rcas';
        v_existe                   NUMBER DEFAULT 0;
        v_vltotal                  NUMBER DEFAULT 0;
        v_perccred                 NUMBER DEFAULT 0.01;
        v_vlcredito                NUMBER DEFAULT 0;
        v_vlcorrenteant            NUMBER DEFAULT 0;
    BEGIN
        v_existe := 0;
        SELECT
            COUNT(1)
        INTO v_existe
        FROM
            all_tables
        WHERE
            lower(TRIM(table_name)) = lower(TRIM('PCUSUARIBKP'))
            AND lower(TRIM(owner)) = lower(TRIM('__FNV_GET_NOMESCHEMA__'));


        IF v_existe > 0 THEN
            EXECUTE IMMEDIATE 'drop table __FNV_GET_NOMESCHEMA__.PCUSUARIBKP';
        END IF;
        EXECUTE IMMEDIATE 'create table __FNV_GET_NOMESCHEMA__.PCUSUARIBKP as select * from JUMBO.PCUSUARI';
        COMMIT;
        FOR li IN (
            SELECT
                u.*
            FROM
                jumbo.pcusuari u
        ) LOOP IF li.vlcorrente > 0 THEN
            v_vlcorrenteant := li.vlcorrente;
            UPDATE jumbo.pcusuari u
            SET
                vlcorrente = 0
            WHERE
                u.codusur = li.codusur;


            INSERT INTO jumbo.pclogrca (
                pclogrca.data,
                pclogrca.codfunc,
                pclogrca.codusur,
                pclogrca.rotina,
                pclogrca.vlcorrente,
                pclogrca.vllimcred,
                pclogrca.vlcorrenteant,
                pclogrca.vllimcredant,
                pclogrca.historico,
                pclogrca.historico2,
                pclogrca.vldiferenca
            ) VALUES (
                (
                    SELECT
                        sysdate
                    FROM
                        dual
                ),
                142,
                li.codusur,
                0,
                0,
                li.vllimcred,
                li.vlcorrente,
                li.vllimcred,
                'LANCAMENTO SALDO',
                'ZERAMENTO AUTOMATICO BIMESTRAL DO SALDO',
                li.vlcorrente * - 1
            );


            INSERT INTO jumbo.pclogdebcred (
                pclogdebcred.data,
                pclogdebcred.codfunc,
                pclogdebcred.codigo,
                pclogdebcred.rotina,
                pclogdebcred.vlcorrente,
                pclogdebcred.vllimcred,
                pclogdebcred.vlcorrenteant,
                pclogdebcred.vllimcredant,
                pclogdebcred.historico,
                pclogdebcred.historico2,
                pclogdebcred.vldiferenca,
                pclogdebcred.tipocontacorrente
            ) VALUES (
                (
                    SELECT
                        sysdate
                    FROM
                        dual
                ),
                142,
                li.codusur,
                0,
                0,
                li.vllimcred,
                li.vlcorrente,
                li.vllimcred,
                'LANCAMENTO SALDO',
                'ZERAMENTO AUTOMATICO BIMESTRAL DO SALDO',
                li.vlcorrente * - 1,
                'R'
            );


            v_vlcorrenteant := 0;
            COMMIT;
        ELSE
            v_vlcorrenteant := li.vlcorrente;
        END IF;
        END LOOP;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END zerar_saldo_rcas;


    PROCEDURE creditar_saldo_mensal_ccrcas AS


        v_nomeparametro_importar   VARCHAR2(4000) DEFAULT 'creditar_saldo_mensal_ccrcas';
        v_existe                   NUMBER DEFAULT 0;
        v_vltotal                  NUMBER DEFAULT 0;
        v_perccred                 NUMBER DEFAULT 0.01;
        v_vlcredito                NUMBER DEFAULT 0;
        v_vlcorrenteant            NUMBER DEFAULT 0;
    BEGIN
        v_existe := 0;
        SELECT
            COUNT(1)
        INTO v_existe
        FROM
            all_tables
        WHERE
            lower(TRIM(table_name)) = lower(TRIM('PCUSUARIBKPCRED'))
            AND lower(TRIM(owner)) = lower(TRIM('__FNV_GET_NOMESCHEMA__'));


        IF v_existe > 0 THEN
            EXECUTE IMMEDIATE 'drop table __FNV_GET_NOMESCHEMA__.PCUSUARIBKPCRED';
        END IF;
        COMMIT;
        FOR li IN (
            SELECT
                u.*
            FROM
                jumbo.pcusuari u
        ) LOOP
            v_vltotal := 0;
            v_existe := 0;
            SELECT
                COUNT(1)
            INTO v_existe
            FROM
                jumbo.pcmov      m
                JOIN jumbo.pcnfsaid   s ON ( s.numtransvenda = m.numtransvenda )
            WHERE
                trunc(s.dtsaida) BETWEEN trunc(last_day(add_months(sysdate, - 2)) + 1) AND trunc(last_day(add_months(sysdate, - 1
                )))
                AND s.dtcancel IS NULL
                AND s.especie = 'NF'
                AND m.codoper = 'S'
                AND m.dtcancel IS NULL
                AND s.codusur = li.codusur;


            IF v_existe > 0 THEN
                SELECT
                    SUM((nvl(nvl(m.qt, m.qtcont), 0) - nvl(m.qtdevol, 0)) * nvl(nvl(m.punit, m.punitcont), 0)) AS total
                INTO v_vltotal
                FROM
                    jumbo.pcmov      m
                    JOIN jumbo.pcnfsaid   s ON ( s.numtransvenda = m.numtransvenda )
                WHERE
                    trunc(s.dtsaida) BETWEEN trunc(last_day(add_months(sysdate, - 2)) + 1) AND trunc(last_day(add_months(sysdate,
                    - 1)))
                    AND s.dtcancel IS NULL
                    AND s.especie = 'NF'
                    AND m.codoper = 'S'
                    AND m.dtcancel IS NULL
                    AND s.codusur = li.codusur;


                v_vltotal := nvl(v_vltotal, 0);
                IF v_vltotal > 0 THEN
                    v_vlcredito := v_vltotal * v_perccred;
                    IF v_vlcredito > 0 THEN
                        v_vlcorrenteant := li.vlcorrente;
                        UPDATE jumbo.pcusuari u
                        SET
                            vlcorrente = nvl(u.vlcorrente, 0) + v_vlcredito
                        WHERE
                            u.codusur = li.codusur;


                        INSERT INTO jumbo.pclogrca (
                            pclogrca.data,
                            pclogrca.codfunc,
                            pclogrca.codusur,
                            pclogrca.rotina,
                            pclogrca.vlcorrente,
                            pclogrca.vllimcred,
                            pclogrca.vlcorrenteant,
                            pclogrca.vllimcredant,
                            pclogrca.historico,
                            pclogrca.historico2,
                            pclogrca.vldiferenca
                        ) VALUES (
                            (
                                SELECT
                                    sysdate
                                FROM
                                    dual
                            ),
                            142,
                            li.codusur,
                            0,
                            nvl(v_vlcorrenteant, 0) + nvl(v_vlcredito, 0),
                            li.vllimcred,
                            v_vlcorrenteant,
                            li.vllimcred,
                            'LANCAMENTO SALDO',
                            'LANCAMENTO AUTOMATICO MENSAL DO SALDO',
                            nvl(v_vlcredito, 0)
                        );


                        INSERT INTO jumbo.pclogdebcred (
                            pclogdebcred.data,
                            pclogdebcred.codfunc,
                            pclogdebcred.codigo,
                            pclogdebcred.rotina,
                            pclogdebcred.vlcorrente,
                            pclogdebcred.vllimcred,
                            pclogdebcred.vlcorrenteant,
                            pclogdebcred.vllimcredant,
                            pclogdebcred.historico,
                            pclogdebcred.historico2,
                            pclogdebcred.vldiferenca,
                            pclogdebcred.tipocontacorrente
                        ) VALUES (
                            (
                                SELECT
                                    sysdate
                                FROM
                                    dual
                            ),
                            142,
                            li.codusur,
                            0,
                            nvl(v_vlcorrenteant, 0) + nvl(v_vlcredito, 0),
                            li.vllimcred,
                            v_vlcorrenteant,
                            li.vllimcred,
                            'LANCAMENTO SALDO',
                            'LANCAMENTO AUTOMATICO MENSAL DO SALDO',
                            nvl(v_vlcredito, 0),
                            'R'
                        );


                        COMMIT;
                    END IF;


                END IF;


            END IF;


        END LOOP;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END creditar_saldo_mensal_ccrcas;


    FUNCTION cliente_existe (
        p_cnpj      VARCHAR2,
        p_considerar_excluido   boolean default true
    ) RETURN boolean AS
        v_condicionantes varchar2(200) default '';
    BEGIN
        v_condicionantes := 'to_number(regexp_replace(cgcent,''[^0-9]*'')) = to_number(regexp_replace('''||p_cnpj||''',''[^0-9]*''))';
        if not(p_considerar_excluido) then
            v_condicionantes := v_condicionantes || ' and dtexclusao is null';            
        end if;        
        RETURN __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('jumbo.pcclient',v_condicionantes);
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END cliente_existe;
    
    FUNCTION usuario_existe (
        p_codusur NUMBER
    ) RETURN boolean AS
    BEGIN
        RETURN __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('jumbo.pcusuari','codusur = '||p_codusur);
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END usuario_existe;
    
    FUNCTION cidade_existe (
        p_cidade      VARCHAR2,
        p_estado      VARCHAR2
    ) RETURN boolean AS
        v_condicionantes varchar2(200) default '';
    BEGIN
        v_condicionantes := 'lower(TRIM(cj.nomecidade)) = lower(TRIM('''||p_cidade||''')) AND lower(TRIM(cj.uf)) = lower(TRIM('''||p_estado||'''))';
        RETURN __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('jumbo.pccidade',v_condicionantes);
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END cidade_existe;
    
    FUNCTION rede_existe (
        p_rede      VARCHAR2
    ) RETURN boolean AS
        v_condicionantes varchar2(200) default '';
    BEGIN
        v_condicionantes := 'lower(TRIM(descricao)) = lower(TRIM('''||p_rede||'''))';
        RETURN __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('jumbo.pcredecliente',v_condicionantes);
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END rede_existe;




END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__":{
		"nomepackagesqldb":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__",
		"nomepackagesqlsistema":"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__ AS


    PROCEDURE inserir_erro (
        p_msg                  VARCHAR2 DEFAULT NULL,
        p_vlrs                 VARCHAR2 DEFAULT NULL,
        p_linha                INTEGER DEFAULT NULL,
        p_destinatariosemail   VARCHAR2 DEFAULT NULL
    );


    PROCEDURE inserir_atalhos_inicio;


    PROCEDURE criar_grupo_msg_superior (
        codusur NUMBER
    );


    PROCEDURE criar_grupo_msg_unidade (
        codusur NUMBER
    );


    PROCEDURE criar_grupo_msg_subordinados (
        codusur NUMBER
    );


    PROCEDURE criar_todos_grupos_msgs_padrao;


    FUNCTION obter_conteudo_html (
        p_nome_conteudo VARCHAR2
    ) RETURN CLOB;


    FUNCTION valida_cnpj (
        v_cpf_cnpj VARCHAR2
    ) RETURN VARCHAR2;



    FUNCTION obter_emails_rcas_filial (
        p_codfilial NUMBER
    ) RETURN VARCHAR2;



    FUNCTION obter_emails_superv_filial (
        p_codfilial NUMBER
    ) RETURN VARCHAR2;



    PROCEDURE atualizar_clientes_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    );



    PROCEDURE atualizar_cli_aurora_jumbo;



    PROCEDURE atualizar_cidade_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    );



    PROCEDURE atualizar_ramos_ativ_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    );
    procedure inserir_produto_origem(p_dados in out __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__produto_origem%rowtype);


    PROCEDURE atualizar_produtos_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    );



    PROCEDURE atualizar_usuarios_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    );



    PROCEDURE atualizar_filial_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    );



    PROCEDURE atualizar_dados_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    );



    PROCEDURE atualizar_redecli_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    );



    PROCEDURE atualizar_negocio_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    );



    PROCEDURE atualizar_categoria_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    );



    PROCEDURE atualizar_estoque_aurora;



    PROCEDURE importar_estoque_aurora;



    PROCEDURE importar_vendas_aurora;



    PROCEDURE atualiz_realiz_objet_sinerg (
        p_dtref DATE DEFAULT NULL
    );



    PROCEDURE at_real_obj_sin_mes_ant;



    PROCEDURE atualiz_realiz_camp_estr;



    PROCEDURE at_real_camp_estr_mes_ant;



    PROCEDURE importar_carga_aurora (
        p_linha VARCHAR2 DEFAULT NULL
    );



    PROCEDURE limpar_carga_aurora (
        p_linha VARCHAR2 DEFAULT NULL
    );



    PROCEDURE enviar_alerta_var_compra (
        p_codfilial   NUMBER,
        p_codprod     NUMBER,
        p_descricao   VARCHAR2,
        p_precoant    NUMBER,
        p_novopreco   NUMBER,
        p_numtrans    NUMBER
    );



    PROCEDURE enviar_alerta_var_compraok (
        p_codfilial   NUMBER,
        p_codprod     NUMBER,
        p_descricao   VARCHAR2,
        p_precoant    NUMBER,
        p_novopreco   NUMBER,
        p_numtrans    NUMBER
    );



    PROCEDURE enviar_alerta_est_neg (
        p_numpedrca NUMBER
    );



    PROCEDURE enviar_alerta_est_neg_item (
        p_numpedrca   NUMBER,
        p_codprod     NUMBER,
        p_cgccli      NUMBER,
        p_codusur     NUMBER,
        p_codfilial   NUMBER,
        p_qt          NUMBER
    );



    PROCEDURE enviar_alerta_ent_ped (
        p_llog IN OUT __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__loganaliseent%rowtype
    );



    PROCEDURE enviar_alerta_ent_fig_trib (
        p_llog __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__logregenttrib%rowtype
    );



    PROCEDURE enviar_alerta_ent (
        p_llog IN OUT __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__loganaliseent%rowtype
    );



    FUNCTION obter_param (
        p_nomeparam      VARCHAR2 DEFAULT NULL,
        p_tipoentidade   VARCHAR2 DEFAULT NULL,
        p_codentidade    VARCHAR2 DEFAULT NULL,
        p_codprocesso    NUMBER DEFAULT NULL,
        p_valor_padrao   VARCHAR2 DEFAULT NULL
    ) RETURN VARCHAR2;



    PROCEDURE gerar_historico_est_aur;



    FUNCTION como_data_aur (
        p_valor VARCHAR2
    ) RETURN DATE;



    FUNCTION primeiro_dia_fat_mes (
        p_data DATE
    ) RETURN DATE;



    FUNCTION qtde_fat_mes (
        p_data DATE
    ) RETURN NUMBER;



    PROCEDURE atualizar_ultcomp_cli (
        dtini   DATE DEFAULT NULL,
        dtfim   DATE DEFAULT NULL
    );



    PROCEDURE atualizar_ultvenda_prod (
        dtini   DATE DEFAULT NULL,
        dtfim   DATE DEFAULT NULL
    );



    PROCEDURE atualiz_realiz_itens_giro;



    PROCEDURE atualizar_objetivos_naomov_mes (
        p_dtini   DATE DEFAULT NULL,
        p_dtfim   DATE DEFAULT NULL
    );



    PROCEDURE gerar_hist_evol_objet_sinergia (
        p_dtref DATE DEFAULT NULL
    );

    PROCEDURE PROCESSAMENTOS_POS_NFSAIDA(P_REG JUMBO.PCNFSAID%ROWTYPE);
    PROCEDURE CHECAGENS_ITENSNFSAIDA(P_REG JUMBO.PCMOV%ROWTYPE);


    procedure atualiz_clientes_naopos_mes(p_dtini date default last_day(add_months(trunc(sysdate),-1))+1, p_dtfim date default last_day(trunc(sysdate)));
    procedure atualiz_prod_naopos_mes(p_dtini date default last_day(add_months(trunc(sysdate),-1))+1, p_dtfim date default last_day(trunc(sysdate)));
    procedure atualizar_posit_prod_mes(p_dtini date default last_day(add_months(trunc(sysdate),-1))+1, p_dtfim date default last_day(trunc(sysdate)));
    procedure atualizar_venda_rca_mes(p_dtini date default last_day(add_months(trunc(sysdate),-1))+1, p_dtfim date default last_day(trunc(sysdate)));
    procedure atualizar_valores_si__FNV_GET_PREFIXOBJECTSDB__(p_dtini date default last_day(add_months(trunc(sysdate),-1))+1, p_dtfim date default last_day(trunc(sysdate)));
    procedure atualizar_vals_si__FNV_GET_PREFIXOBJECTSDB___mesatual;
END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__ AS
    PROCEDURE inserir_erro (
        p_msg                  VARCHAR2 DEFAULT NULL,
        p_vlrs                 VARCHAR2 DEFAULT NULL,
        p_linha                INTEGER DEFAULT NULL,
        p_destinatariosemail   VARCHAR2 DEFAULT NULL
    ) AS
        PRAGMA autonomous_transaction;
        c_lim_erro_seg    CONSTANT INTEGER := 1;
        c_lim_erro_min    CONSTANT INTEGER := 10;
        c_lim_erro_hora   CONSTANT INTEGER := 100;
        v_ler             __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__erros%rowtype default NULL;
        v_qt              INTEGER default NULL;
        v_permitido       BOOLEAN DEFAULT true;
    BEGIN
        v_qt := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_dado_number('__FNV_GET_PREFIXOBJECTSDB__erros','count(1)','to_char(dtocorrencia, ''dd/mm/yyyy hh24'') = to_char(sysdate, ''dd/mm/yyyy hh24'')');        
        IF v_qt < c_lim_erro_hora THEN
            v_qt := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_dado_number('__FNV_GET_PREFIXOBJECTSDB__erros','count(1)','to_char(dtocorrencia, ''dd/mm/yyyy hh24:mi'') = to_char(sysdate, ''dd/mm/yyyy hh24:mi'')');        
            IF v_qt < c_lim_erro_min THEN
                v_qt := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_dado_number('__FNV_GET_PREFIXOBJECTSDB__erros','count(1)','to_char(dtocorrencia, ''dd/mm/yyyy hh24:mi:ss'') = to_char(sysdate, ''dd/mm/yyyy hh24:mi:ss'')');        
                IF v_qt < c_lim_erro_seg THEN
                    v_permitido := true;
                ELSE
                    v_permitido := false;
                END IF;
            ELSE
                v_permitido := false;
            END IF;
        ELSE
            v_permitido := false;
        END IF;
        IF v_permitido = true THEN
            v_ler.dtocorrencia := sysdate;
            v_ler.tipoobjeto := 'package';
            v_ler.nomeobjeto := $$plsql_unit;
            v_ler.linha := nvl(p_linha, $$plsql_line);
            v_ler.coderro := sqlcode;
            v_ler.msg := substr(concat(concat(sqlerrm,' '),concat(dbms_utility.format_error_backtrace,concat(' ',p_msg))), 1, 4000);
            v_ler.valores := p_vlrs;
            v_ler.destinatariosemail := p_destinatariosemail;
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__erros VALUES v_ler;
            COMMIT;
        ELSE
            dbms_output.put_line(concat('MOSTRANDO ERRO NA FUNCAO INSERIR ERRO POR NAO SER PERMITIDO INCLUIR ERRO: ',substr(concat(concat(sqlerrm,' '),concat(dbms_utility.format_error_backtrace,concat(' ',p_msg))), 1, 4000)));
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            /*se esta procedure falhar, somente lhe resta mostrar o erro ocorrido*/
            dbms_output.put_line(concat('MOSTRANDO ERRO NA FUNCAO INSERIR ERRO POR NAO SER PERMITIDO INCLUIR ERRO: ',substr(concat(concat(sqlerrm,' '),concat(dbms_utility.format_error_backtrace,concat(' ',p_msg))), 1, 4000)));
            NULL;
    END inserir_erro;

    FUNCTION obter_conteudo_html (
        p_nome_conteudo VARCHAR2
    ) RETURN CLOB AS
    BEGIN
        RETURN __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_dado_clob_se_existir('__FNV_GET_PREFIXOBJECTSDB__conteudoshtml','conteudo',concat('lower(nomeconteudo) ',case when p_nome_conteudo is null then ' is null ' else concat('=''',concat(lower(p_nome_conteudo),'''')) end));
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => substr(p_nome_conteudo, 1, 4000), p_linha => $$plsql_line);
            return null;
    END obter_conteudo_html;

    FUNCTION valida_cnpj (
        v_cpf_cnpj VARCHAR2
    ) RETURN VARCHAR2 IS
        TYPE array_dv IS VARRAY(2) OF PLS_INTEGER;
        v_array_dv     array_dv := array_dv(0, 0);
        cpf_digit      CONSTANT PLS_INTEGER := 11;
        cnpj_digit     CONSTANT PLS_INTEGER := 14;
        is_cpf         BOOLEAN;
        is_cnpj        BOOLEAN;
        v_cpf_number   VARCHAR2(20);
        total          NUMBER := 0;
        coeficiente    NUMBER := 0;
        dv1            NUMBER := 0;
        dv2            NUMBER := 0;
        digito         NUMBER := 0;
        j              INTEGER;
        i              INTEGER;
        v_valido       BOOLEAN DEFAULT false;
    BEGIN
        IF v_cpf_cnpj IS NULL THEN
            RETURN 'N';
        END IF; 
        v_cpf_number := regexp_replace(v_cpf_cnpj, '[^0-9]'); 
        v_cpf_number := lpad(v_cpf_number, cnpj_digit, '0');
        is_cpf := ( length(v_cpf_number) = cpf_digit ); 
        is_cnpj := ( length(v_cpf_number) = cnpj_digit );
        IF ( is_cpf OR is_cnpj ) THEN
            total := 0;
        ELSE
            RETURN 'N';
        END IF;
        dv1 := to_number(substr(v_cpf_number, length(v_cpf_number) - 1, 1));
        dv2 := to_number(substr(v_cpf_number, length(v_cpf_number), 1));
        v_array_dv(1) := 0;
        v_array_dv(2) := 0; 
        FOR j IN 1..2 LOOP
            total := 0;
            coeficiente := 2;
            FOR i IN REVERSE 1..( ( length(v_cpf_number) - 3 ) + j ) LOOP
                digito := to_number(substr(v_cpf_number, i, 1));
                total := total + ( digito * coeficiente );
                coeficiente := coeficiente + 1;
                IF ( coeficiente > 9 ) AND is_cnpj THEN
                    coeficiente := 2;
                END IF;
            END LOOP; 
            v_array_dv(j) := 11 - MOD(total, 11);
            IF ( v_array_dv(j) >= 10 ) THEN
                v_array_dv(j) := 0;
            END IF;
        END LOOP; 
        v_valido := ( dv1 = v_array_dv(1) ) AND ( dv2 = v_array_dv(2) );
        IF ( v_valido = true ) THEN
            RETURN 'S';
        ELSE
            RETURN 'N';
        END IF;
    END valida_cnpj;
    FUNCTION obter_email_rca (
        p_codrca NUMBER
    ) RETURN VARCHAR2 AS
    BEGIN         
        RETURN __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_dado_varchar2_se_existir('jumbo.pcusuari','email',concat('codusur = ',p_codrca));
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END;

    FUNCTION obter_emails_rcas_filial (
        p_codfilial NUMBER
    ) RETURN VARCHAR2 AS
        v_retorno   VARCHAR2(32767) DEFAULT NULL;
    BEGIN
        FOR l IN (
            SELECT
                u.email
            FROM
                jumbo.pcusuari   u
                JOIN jumbo.pcsuperv   s ON ( s.codsupervisor = u.codsupervisor )
            WHERE
                decode(nvl(u.codfilial, p_codfilial), 99, p_codfilial, nvl(u.codfilial, p_codfilial)) = p_codfilial
                AND u.codusur <> 106
                AND nvl(u.bloqueio, 'N') = 'N'
                AND dttermino IS NULL
        ) LOOP 
            v_retorno := concat(nvl(v_retorno, ''),
                CASE
                    WHEN l.email IS NULL THEN ''
                    ELSE concat(l.email,';')
                END);
        END LOOP;
        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END;

    FUNCTION obter_emails_superv_filial (
        p_codfilial NUMBER
    ) RETURN VARCHAR2 AS
        v_retorno   VARCHAR2(32767) DEFAULT NULL;
    BEGIN
        FOR l IN (
            SELECT
                s.email
            FROM
                jumbo.pcsuperv s
            WHERE
                s.codsupervisor <> 5
                AND nvl(s.posicao, 'A') = 'A'
                AND s.dtdemissao IS NULL
                AND (
                    CASE
                        WHEN s.codsupervisor IN (1,6) THEN 1
                        WHEN s.codsupervisor = 7 THEN p_codfilial
                        ELSE 2
                    END = p_codfilial 
                )
        ) LOOP 
            v_retorno := concat(nvl(v_retorno, ''),
                CASE
                    WHEN l.email IS NULL THEN ''
                    ELSE concat(l.email,';')
                END);
        END LOOP;
        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END;
    
    FUNCTION cliente_existe (
        p_cnpj      VARCHAR2
    ) RETURN boolean AS
        v_tabelas varchar2(200) default '';
        v_condicionantes varchar2(200) default '';
    BEGIN
        v_tabelas := '__FNV_GET_PREFIXOBJECTSDB__cliente_origem co join __FNV_GET_PREFIXOBJECTSDB__pessoa_origem po on (po.codpessoa = co.codpessoaorigem)';
        v_condicionantes := concat('to_number(regexp_replace(po.numcnpjcpf,''[^0-9]*'')) = to_number(regexp_replace(''',concat(p_cnpj,''',''[^0-9]*''))'));
        RETURN __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe(v_tabelas,v_condicionantes);
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END cliente_existe;
    
    
    FUNCTION cidade_existe (
        p_cidade      VARCHAR2,
        p_uf varchar2
    ) RETURN boolean AS
        v_condicionantes varchar2(200) default '';
    BEGIN
        v_condicionantes := concat('lower(TRIM(nomecidade)) = lower(TRIM(''',concat(concat(p_cidade,''')) AND lower(TRIM(uf)) = lower(TRIM('''),concat(p_uf,''')))')));
        RETURN __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__cidade_origem',v_condicionantes);
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END cidade_existe;
    
    FUNCTION rede_existe (
        p_rede      VARCHAR2
    ) RETURN boolean AS
        v_condicionantes varchar2(200) default '';
    BEGIN
        v_condicionantes := concat('lower(TRIM(rede)) = lower(TRIM(''',concat(p_rede,'''))'));
        RETURN __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__redesclientes_origem',v_condicionantes);
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END rede_existe;
    
    
    

    PROCEDURE atualizar_clientes_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    ) AS
        PRAGMA autonomous_transaction;
        retorno                VARCHAR2(4000) DEFAULT '0';
        proc                   VARCHAR2(100) DEFAULT 'atualizar_clientes_aurora';
        lpessoa                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pessoa_origem%rowtype;
        lcliente               __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem%rowtype;
        lendereco              __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__enderecos_pessoa%rowtype;
        lcj                    jumbo.pcclient%rowtype;
        lcu                    jumbo.pcusuari%rowtype;
        lci                    jumbo.pccidade%rowtype;
        lcat                   jumbo.pcativi%rowtype;
        lcc                    jumbo.pccontato%rowtype;
        lcs                    jumbo.pcsuperv%rowtype;
        existe_jumbo           NUMBER DEFAULT 0;
        existe_como_excluido   NUMBER DEFAULT 0;
        existe_contato         NUMBER DEFAULT 0;
        existe_cidade          NUMBER DEFAULT 0;
        existe_usuario         NUMBER DEFAULT 0;
        existe_supervisor      NUMBER DEFAULT 0;
        existe_rede            NUMBER DEFAULT 0;
        existe_praca           NUMBER DEFAULT 0;
        dtiniproc              VARCHAR2(10);
        dtfimproc              VARCHAR2(10);
        qtclientesinsj         NUMBER DEFAULT 0;
        qtclientesinsa         NUMBER DEFAULT 0;
    BEGIN
        dtiniproc := dtini;
        dtfimproc := dtfim;
        IF dtiniproc IS NULL THEN
            dtiniproc := sysdate;
        END IF;
        IF dtfimproc IS NULL THEN
            dtfimproc := sysdate;
        END IF;
        
        /*faz o loop pelos clientes na tabela de dados aurora conforme o periodo*/
        FOR lcca IN (
            SELECT
                cod_unid,
                cgc_destino,
                nome_destino,
                vendedor,
                cidade_destino,
                estado_destino,
                codativ,
                descativ,
                rede,
                MAX(dt_emissao_nfsa) AS dt_emissao_nfsa
            FROM
                __FNV_GET_NOMESCHEMA__.dados_vendas_origem
            WHERE
                dt_emissao_nfsa BETWEEN dtiniproc AND dtfimproc
                and cgc_destino is not null
            GROUP BY
                cod_unid,
                cgc_destino,
                nome_destino,
                vendedor,
                cidade_destino,
                estado_destino,
                codativ,
                descativ,
                rede
            ORDER BY
                dt_emissao_nfsa DESC
        ) LOOP        
            /*verifica se o cliente ja existe na origem*/
            /*se nao existir, inicia o processo de coleta de dados para inclusao*/
            if not(cliente_existe(lcca.cgc_destino)) then
                lpessoa := NULL;
                lcliente := null;
                lcu := NULL;
                lcs := NULL;
                lci := NULL;
                lcat := NULL;
                lcc := NULL;
                existe_jumbo := 0;
                existe_como_excluido := 0;
                existe_cidade := 0;
                existe_usuario := 0;
                existe_supervisor := 0;
                existe_contato := 0;
                lpessoa.numcnpjcpf := lcca.cgc_destino;
                lpessoa.juridica := 1; /*aurora so tem juridica*/
                existe_jumbo := 0;
                existe_praca := 0;

                /*obtem o codigo da origem*/
                select
                    codorigemdado,
                    codorigemdado,
                    codorigemdado
                    into lpessoa.codorigemdado,
                    lcliente.codorigemdado,
                    lendereco.codorigemdado
                from 
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__origemdedados 
                where
                    upper(origem) = upper('AURORA');

                /*verifica se existe no erp(como nao excluido)*/
                /*se nao existe no erp como nao excluido, veirifica se existe como excluido*/
                existe_jumbo := 1;
                existe_como_excluido := 0;                
                if not(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor.cliente_existe(lpessoa.numcnpjcpf,false)) then
                    existe_jumbo := 0;
                    if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor.cliente_existe(lpessoa.numcnpjcpf,true) then
                        existe_jumbo := 1;
                        existe_como_excluido := 1;
                    END IF;
                END IF;
                lpessoa.existe_erp := 0;
                /*obtem o cod da situacao de pessoa*/
                select
                    codsituacaopessoa,
                    codsituacaopessoa
                    into lpessoa.codsituacaopessoa,
                    lcliente.codsituacaopessoa
                from
                    __FNV_GET_PREFIXOBJECTSDB__situacoespessoa 
                where
                    UPPER(situacao) = UPPER('ATIVO');
                /*caseo existe no erp, obte os dados do erp*/
                IF existe_jumbo > 0 THEN
                    IF existe_como_excluido <= 0 THEN
                        SELECT
                            *
                            INTO lcj
                        FROM
                            jumbo.pcclient cj
                        WHERE
                            to_number(regexp_replace(cj.cgcent,'[^0-9]*')) = to_number(regexp_replace(lpessoa.numcnpjcpf,'[^0-9]*'))
                            AND cj.dtexclusao IS NULL
                            AND ROWNUM <= 1;
                    ELSE
                        SELECT
                            *
                            INTO lcj
                        FROM
                            jumbo.pcclient cj
                        WHERE
                            to_number(regexp_replace(cj.cgcent,'[^0-9]*')) = to_number(regexp_replace(lpessoa.numcnpjcpf,'[^0-9]*'))
                            AND ROWNUM <= 1;

                    END IF;

                    lpessoa.existe_erp := 1;                    
                    lpessoa.nomerazao := lcj.cliente;
                    lpessoa.fantasia := lpessoa.nomerazao;
                    lpessoa.insc_est := lcj.inscestadual;
                    lpessoa.insc_mun := lpessoa.insc_mun;
                    lpessoa.codativorigem := lcca.codativ;/*nvl(lcj.codatv1, lcca.codativ);*/
                    lpessoa.codativ_erp := nvl(lcj.codatv1, lcca.codativ);
                    lpessoa.dtcadastro := nvl(lcj.dtcadastro,sysdate);
                    lpessoa.codpessoa_erp := lcj.codcli;

                    lcliente.existe_erp := lpessoa.existe_erp;
                    lcliente.codfilialorigem := nvl(lcj.codfilialnf, lcca.cod_unid);
                    lcliente.codfilial_erp := lcliente.codfilialorigem;
                    lcliente.codvendedororigem := lcca.vendedor;/*nvl(lcj.codusur1, lcca.vendedor);*/
                    lcliente.codvendedor_erp := nvl(lcj.codusur1, lcca.vendedor);
                    lcliente.dtcadastro := lpessoa.dtcadastro;
                    lcliente.dtprimcompra_origem := lcj.dtprimcompra;
                    lcliente.dtprimcompra_erp := lcliente.dtprimcompra_origem;
                    lcliente.dtultcompra_origem := lcca.dt_emissao_nfsa;
                    lcliente.codcondpagto_erp := lcj.codplpag;
                    lcliente.codpraca_erp := lcj.codpraca;
                    lcliente.codpessoa_erp := lpessoa.codpessoa_erp;
                    lcliente.codcli_erp := lcliente.codpessoa_erp;
                    lcliente.codredeorigem := lcj.codrede;
                    lcliente.codrede_erp := lcliente.codredeorigem;
                    
                    lendereco.endereco := nvl(lcj.endercom, nvl(lcj.enderent, lcj.endercob));
                    lendereco.nro_end := nvl(lcj.numerocom, nvl(lcj.numeroent, lcj.numerocob));
                    lendereco.compl_end := nvl(lcj.complementocom, nvl(lcj.complementoent, lcj.complementocob));
                    lendereco.bairro := nvl(lcj.bairrocom, nvl(lcj.bairroent, lcj.bairrocob));
                    lendereco.cep := to_number(trim(replace(nvl(lcj.cepcom, nvl(lcj.cepent, lcj.cepcob)), '-', '')));
                    lendereco.cx_postal := lcj.caixapostal;
                    lendereco.fone := nvl(lcj.telcom, nvl(lcj.telent, lcj.telcob));
                    lendereco.email := lcj.email;
                    lendereco.dtcadastro := lpessoa.dtcadastro;
                    lendereco.codpraca_erp := lcliente.codpraca_erp;
                    lendereco.codcidade_erp := lcj.codcidade;
                    lendereco.cidade := lcca.cidade_destino;
                    lendereco.uf := lcca.estado_destino;

                    /*encontra a situacao do cliente*/
                    IF nvl(lcj.bloqueio, 'N') = 'S' THEN
                        select
                            codsituacaopessoa,
                            codsituacaopessoa
                            into lpessoa.codsituacaopessoa,
                            lcliente.codsituacaopessoa
                        from
                            __FNV_GET_PREFIXOBJECTSDB__situacoespessoa 
                        where
                            UPPER(situacao) = UPPER('BLOQUEADO');
                    END IF;
                    qtclientesinsj := qtclientesinsj + 1;
                ELSE
                    lpessoa.existe_erp := 0;
                    lpessoa.nomerazao := lcca.nome_destino;
                    lpessoa.fantasia := lpessoa.nomerazao;
                    lpessoa.insc_mun := lpessoa.insc_mun;
                    lpessoa.codativorigem := lcca.codativ;
                    lpessoa.codativ_erp := null;
                    lpessoa.dtcadastro := sysdate;

                    lcliente.existe_erp := lpessoa.existe_erp;
                    lcliente.codfilialorigem := lcca.cod_unid;
                    lcliente.codfilial_erp := lcliente.codfilialorigem;
                    lcliente.codvendedororigem := lcca.vendedor;
                    lcliente.codvendedor_erp := lcliente.codvendedororigem;
                    lcliente.codpessoa_erp := null;
                    lcliente.codcli_erp := null;
                    lendereco.codpraca_erp := null;
                    
                    lcliente.dtcadastro := lpessoa.dtcadastro;
                    lcliente.dtprimcompra_origem := lcca.dt_emissao_nfsa;
                    lcliente.dtprimcompra_erp := lcliente.dtprimcompra_origem;
                    lcliente.dtultcompra_origem := lcca.dt_emissao_nfsa;                    
                    lendereco.dtcadastro := lpessoa.dtcadastro;                    
                    lendereco.cidade := upper(trim(lcca.cidade_destino));
                    lendereco.uf := upper(trim(lcca.estado_destino));
                    qtclientesinsa := qtclientesinsa + 1;
                END IF;

                /*obtem a rede da origem se o codigo eh nulo e so veio a descricao*/
                IF lcliente.codredeorigem IS NULL THEN
                    if lcca.rede is not null and length(nvl(lcca.rede,'')) > 0 then
                        lcliente.codredeorigem := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_dado_number_se_existir('__FNV_GET_PREFIXOBJECTSDB__redesclientes_origem ro','ro.codrede',concat('upper(TRIM(ro.rede)) = upper(TRIM(',concat(lcca.rede,'))')));
                    end if;
                END IF;

                /*encontra o supervisor*/
                SELECT
                    COUNT(1)
                    INTO existe_usuario
                FROM
                    (
                        SELECT
                            u.codusur AS codusur
                        FROM
                            jumbo.pcusuari u
                        WHERE
                            u.codusur = lcliente.codvendedororigem
                            AND ROWNUM <= 1
                        UNION ALL
                        SELECT
                            u.codusur AS codusur
                        FROM
                            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuarios_origem u
                        WHERE
                            u.codusur = lcliente.codvendedororigem
                            AND ROWNUM <= 1
                    )
                WHERE
                    ROWNUM <= 1;
                IF existe_usuario >= 1 THEN
                    SELECT
                        codsupervisor,
                        codsupervisor
                    INTO
                        lcliente.codsupervisororigem,
                        lcliente.codsupervisor_erp
                    FROM
                        (
                            SELECT
                                u.codsupervisor   AS codsupervisor,
                                u.nome            AS nome
                            FROM
                                jumbo.pcusuari u
                            WHERE
                                u.codusur = lcliente.codvendedororigem
                                AND ROWNUM <= 1
                            UNION ALL
                            SELECT
                                u.codsupervisororigem   AS codsupervisor,
                                u.nome            AS nome
                            FROM
                                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuarios_origem u
                            WHERE
                                u.codusur = lcliente.codvendedororigem
                                AND ROWNUM <= 1
                        )
                    WHERE
                        ROWNUM <= 1;
                END IF;

                /*encontra a cidade*/
                SELECT
                    COUNT(1)
                    INTO existe_cidade
                FROM
                    (
                        SELECT
                            u.codcidade AS codcidade
                        FROM
                            jumbo.pccidade u
                        WHERE
                            ( u.codcidade = lendereco.codcidade_erp
                                OR ( u.nomecidade = lcca.cidade_destino
                                    AND u.uf = lcca.estado_destino ) )
                            AND ROWNUM <= 1
                        UNION ALL
                        SELECT
                            u.codcidade AS codcidade
                        FROM
                            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cidade_origem u
                        WHERE
                            ( u.codcidade = lendereco.codcidade_erp
                                OR ( u.nomecidade = lcca.cidade_destino
                                    AND u.uf = lcca.estado_destino ) )
                            AND ROWNUM <= 1
                    )
                WHERE
                    ROWNUM <= 1;
                IF existe_cidade >= 1 THEN
                    SELECT
                        codcidade,
                        nomecidade,
                        uf
                    INTO
                        lendereco.codcidadeorigem,
                        lendereco.cidade,
                        lendereco.uf
                    FROM
                        (
                            SELECT
                                u.codcidade    AS codcidade,
                                u.nomecidade   AS nomecidade,
                                u.uf           AS uf
                            FROM
                                jumbo.pccidade u
                            WHERE
                                ( u.codcidade = lendereco.codcidadeorigem
                                    OR ( u.nomecidade = lcca.cidade_destino
                                        AND u.uf = lcca.estado_destino ) )
                                AND ROWNUM <= 1
                            UNION ALL
                            SELECT
                                u.codcidade    AS codcidade,
                                u.nomecidade   AS nomecidade,
                                u.uf     AS uf
                            FROM
                                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cidade_origem u
                            WHERE
                                ( u.codcidade = lendereco.codcidadeorigem
                                    OR ( u.nomecidade = lcca.cidade_destino
                                        AND u.uf = lcca.estado_destino ) )
                                AND ROWNUM <= 1
                        )
                    WHERE
                        ROWNUM <= 1;
                END IF;
                lpessoa.codpessoa := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_PREFIXOBJECTSDB__pessoa_origem', 'codpessoa');
                lcliente.codpessoaorigem := lpessoa.codpessoa;
                lendereco.codpessoaorigem := lpessoa.codpessoa;
                lcliente.codcliente := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_PREFIXOBJECTSDB__cliente_origem', 'codcliente');
                insert into __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pessoa_origem values lpessoa;
                insert into __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem values lcliente;
                lendereco.codendereco := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_valor_atual_ou_prox_disp('__FNV_GET_PREFIXOBJECTSDB__enderecos_pessoa','codendereco',0);
                insert into __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__enderecos_pessoa values lendereco;
                
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.commitar_se_possivel;
            ELSE
                lcliente.codcliente := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_dado_number('__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem c join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pessoa_origem p on (c.codpessoaorigem = p.codpessoa)',concat('to_number(regexp_replace(p.numcnpjcpf,''[^0-9]*'')) = to_number(regexp_replace(''',concat(lcca.cgc_destino,''',''[^0-9]*''))')));
                UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem
                SET
                    dtultcompra_origem = lcca.dt_emissao_nfsa
                WHERE
                    codcliente = lcliente.codcliente;
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.commitar_se_possivel;
            END IF;
        END LOOP;
        COMMIT;
        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN            
            inserir_erro(
                p_linha => $$plsql_line,
                p_vlrs => concat('pessoa: ',concat(lpessoa.codpessoa_erp,concat(',',concat(lpessoa.codativorigem,concat(',',concat(lpessoa.codativ_erp,
                            concat('|cliente: ',concat(lcliente.codcliente,concat(',',concat(lcliente.codfilialorigem,concat(',',concat(lcliente.codfilial_erp,
                                concat(',',concat(lcliente.codvendedororigem,concat(',',concat(lcliente.codvendedor_erp,concat(',',concat(lcliente.codpessoa_erp,
                                    concat(',',concat(lcliente.codcli_erp,concat(',',concat(lcliente.codredeorigem,concat(',',concat(lcliente.codsupervisororigem,concat(',',concat(lcliente.codsupervisor_erp,concat(',',lcliente.codpessoaorigem)))))))
                    ))))))))))))))))))))
            );
            retorno := sqlerrm;
    END atualizar_clientes_aurora;

    PROCEDURE atualizar_cli_aurora_jumbo AS
        PRAGMA autonomous_transaction;
        lcj                    jumbo.pcclient%rowtype;
        lcu                    jumbo.pcusuari%rowtype;
        lci                    jumbo.pccidade%rowtype;
        lcat                   jumbo.pcativi%rowtype;
        lcc                    jumbo.pccontato%rowtype;
        existe_jumbo           NUMBER DEFAULT 0;
        existe_como_excluido   NUMBER DEFAULT 0;
        existe_usuario         NUMBER DEFAULT 0;
        retorno                VARCHAR2(4000) DEFAULT '0';
        proc                   VARCHAR2(100) DEFAULT 'atualizar_cli_aurora_jumbo';
    BEGIN
        FOR lca IN (
            SELECT
                po.*
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem co
                join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pessoa_origem po on (po.codpessoa = co.codpessoaorigem)
        ) LOOP
            lcj := NULL;
            lcu := NULL;
            lci := NULL;
            lcat := NULL;
            lcc := NULL;
            existe_jumbo := 0;
            existe_como_excluido := 0;
            existe_usuario := 0;
            
            existe_jumbo := 1;
            existe_como_excluido := 0;            
            if not(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor.cliente_existe(lca.numcnpjcpf,false)) then
                existe_jumbo := 0;
                if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor.cliente_existe(lca.numcnpjcpf,true) then
                    existe_jumbo := 1;
                    existe_como_excluido := 1;
                END IF;
            END IF;            
            IF existe_jumbo > 0 THEN
                IF existe_como_excluido <= 0 THEN
                    SELECT
                        *
                        INTO lcj
                    FROM
                        jumbo.pcclient cj
                    WHERE
                        to_number(regexp_replace(cj.cgcent,'[^0-9]*')) = to_number(regexp_replace(lca.numcnpjcpf,'[^0-9]*'))
                        AND cj.dtexclusao IS NULL
                        AND ROWNUM <= 1;
                ELSE
                    SELECT
                        *
                        INTO lcj
                    FROM
                        jumbo.pcclient cj
                    WHERE
                        to_number(regexp_replace(cj.cgcent,'[^0-9]*')) = to_number(regexp_replace(lca.numcnpjcpf,'[^0-9]*'))
                        AND ROWNUM <= 1;
                END IF;
                
                if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor.usuario_existe(lcj.codusur1) then
                    SELECT
                        *
                        INTO lcu
                    FROM
                        jumbo.pcusuari u
                    WHERE
                        u.codusur = lcj.codusur1
                        AND ROWNUM <= 1;                    
                END IF;

                UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pessoa_origem
                SET 
                    existe_erp = 1,
                    codpessoa_erp = lcj.codcli,
                    nomerazao = lcj.cliente,
                    fantasia = lcj.fantasia,
                    insc_est = lcj.inscestadual,
                    codativ_erp = lcj.codatv1,
                    dtcadastro = lcj.dtcadastro
                WHERE
                    codpessoa = lca.codpessoa; 
                UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem
                SET
                    existe_erp = 1,
                    codpessoa_erp = lcj.codcli,
                    codcli_erp = lcj.codcli,
                    codvendedor_erp = lcj.codusur1,
                    codsupervisor_erp = lcu.codsupervisor,
                    dtultcompra_erp = lcj.dtultcomp,
                    dtcadastro = greatest(nvl(dtcadastro,lcj.dtcadastro),nvl(lcj.dtcadastro,dtcadastro))
                WHERE
                    codpessoaorigem = lca.codpessoa;                
            ELSE
                UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pessoa_origem
                SET
                    existe_erp = 0,
                    codpessoa_erp = null
                WHERE
                    codpessoa = lca.codpessoa;
                UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem
                SET
                    existe_erp = 0,
                    codcli_erp = null
                WHERE
                    codpessoaorigem = lca.codpessoa;
            END IF;

            COMMIT;
        END LOOP;

        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END atualizar_cli_aurora_jumbo;

    PROCEDURE atualizar_cidade_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    ) AS
        PRAGMA autonomous_transaction;
        retorno                   VARCHAR2(4000) DEFAULT '0';
        proc                      VARCHAR2(100) DEFAULT 'atualizar_cidade_aurora';
        lca                       __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cidade_origem%rowtype;
        lcj                       jumbo.pccidade%rowtype;
        codigo_correto            NUMBER DEFAULT 0;
        dtiniproc                 VARCHAR2(10);
        dtfimproc                 VARCHAR2(10);
        qtcidadesinsj             NUMBER DEFAULT 0;
        qtcidadesinsa             NUMBER DEFAULT 0;
    BEGIN
        dtiniproc := dtini;
        dtfimproc := dtfim;
        IF dtiniproc IS NULL THEN
            dtiniproc := sysdate;
        END IF;
        IF dtfimproc IS NULL THEN
            dtfimproc := sysdate;
        END IF;
        FOR lcca IN (
            SELECT
                cidade_destino,
                estado_destino,
                MAX(dt_emissao_nfsa)
            FROM
                __FNV_GET_NOMESCHEMA__.dados_vendas_origem
            WHERE
                dt_emissao_nfsa BETWEEN dtiniproc AND dtfimproc
            GROUP BY
                cidade_destino,
                estado_destino
            ORDER BY
                MAX(dt_emissao_nfsa) DESC
        ) LOOP
            if not(cidade_existe(lcca.cidade_destino,lcca.estado_destino)) then
                lca := NULL;
                lcj := NULL;
                if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor.cidade_existe(lcca.cidade_destino,lcca.estado_destino) then
                    SELECT
                        *
                        INTO lcj
                    FROM
                        jumbo.pccidade cj
                    WHERE
                        lower(TRIM(cj.nomecidade)) = lower(TRIM(lcca.cidade_destino))
                        AND lower(TRIM(cj.uf)) = lower(TRIM(lcca.estado_destino))
                        AND ROWNUM <= 1;
                    lca.codcidade := lcj.codcidade;
                    lca.existe_erp := 1;
                    lca.nomecidade := lcj.nomecidade;
                    lca.uf := lcj.uf;

                    /*verifica se ja existe cidade com o codigo no erp e corrige na origem*/
                    if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__cidade_origem',concat('codcidade = ',lca.codcidade)) then
                        codigo_correto := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_PREFIXOBJECTSDB__cidade_origem', 'codcidade');
                        UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cidade_origem
                        SET
                            codcidade = codigo_correto
                        WHERE
                            codcidade = lca.codcidade;
                        COMMIT;
                    END IF;
                    INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cidade_origem VALUES lca;
                    COMMIT;
                    qtcidadesinsj := qtcidadesinsj + 1;
                ELSE
                    lca.codcidade := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_PREFIXOBJECTSDB__cidade_origem', 'codcidade');
                    lca.existe_erp := 0;
                    lca.nomecidade := lcca.cidade_destino;
                    lca.uf := lcca.estado_destino;
                    INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cidade_origem VALUES lca;
                    COMMIT;
                    qtcidadesinsa := qtcidadesinsa + 1;
                END IF;
                COMMIT;
            END IF;
        END LOOP;
        COMMIT;
        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END atualizar_cidade_aurora;

    PROCEDURE atualizar_redecli_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    ) AS
        PRAGMA autonomous_transaction;
        retorno                   VARCHAR2(4000) DEFAULT '0';
        proc                      VARCHAR2(100) DEFAULT 'atualizar_redecli_aurora';
        lca                       __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__redesclientes_origem%rowtype;
        lcj                       jumbo.pcredecliente%rowtype;
        codigo_correto            NUMBER DEFAULT 0;
        dtiniproc                 VARCHAR2(10);
        dtfimproc                 VARCHAR2(10);
        qtcidadesinsj             NUMBER DEFAULT 0;
        qtcidadesinsa             NUMBER DEFAULT 0;
    BEGIN
        dtiniproc := dtini;
        dtfimproc := dtfim;
        IF dtiniproc IS NULL THEN
            dtiniproc := sysdate;
        END IF;
        IF dtfimproc IS NULL THEN
            dtfimproc := sysdate;
        END IF;
        FOR lcca IN (
            SELECT
                rede,
                MAX(dt_emissao_nfsa)
            FROM
                __FNV_GET_NOMESCHEMA__.dados_vendas_origem
            WHERE
                dt_emissao_nfsa BETWEEN dtiniproc AND dtfimproc
                AND ( rede IS NOT NULL
                        OR length(TRIM(nvl(rede, ''))) > 0 )
            GROUP BY
                rede
            ORDER BY
                MAX(dt_emissao_nfsa) DESC
        ) LOOP        
            if not(rede_existe(lcca.rede)) then
                lca := NULL;
                lcj := NULL;
                if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor.rede_existe(lcca.rede) then   
                    SELECT
                        *
                        INTO lcj
                    FROM
                        jumbo.pcredecliente cj
                    WHERE
                        lower(TRIM(cj.descricao)) = lower(TRIM(lcca.rede))
                        AND ROWNUM <= 1;
                    lca.codrede := lcj.codrede;
                    lca.codrede_erp := lcj.codrede;
                    lca.existe_erp := 1;
                    lca.rede := lcj.descricao;                   
                    if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__redesclientes_origem',concat('codrede = ',lca.codrede)) then                   
                        codigo_correto := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__redesclientes_origem', 'codrede');
                        UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__redesclientes_origem
                        SET
                            codrede = codigo_correto
                        WHERE
                            codrede = lca.codrede;
                        COMMIT;
                    END IF;
                    INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__redesclientes_origem VALUES lca;
                    COMMIT;
                    qtcidadesinsj := qtcidadesinsj + 1;
                ELSE                    
                    lca.codrede := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_PREFIXOBJECTSDB__redesclientes_origem', 'codrede');
                    lca.existe_erp := 0;
                    lca.rede := lcca.rede;
                    INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__redesclientes_origem VALUES lca;
                    COMMIT;
                    qtcidadesinsa := qtcidadesinsa + 1;
                END IF;
                COMMIT;
            END IF;
        END LOOP;
        COMMIT;
        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END atualizar_redecli_aurora;

    PROCEDURE atualizar_ramos_ativ_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    ) AS
        PRAGMA autonomous_transaction;
        retorno                   VARCHAR2(4000) DEFAULT '0';
        proc                      VARCHAR2(100) DEFAULT 'atualizar_ramos_ativ_aurora';
        lca                       __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__ramos_ativ_origem%rowtype;
        lcj                       jumbo.pcativi%rowtype;
        existe_codigo_incorreto   NUMBER DEFAULT 0;
        codigo_incorreto          NUMBER DEFAULT 0;
        codigo_correto            NUMBER DEFAULT 0;
        dtiniproc                 VARCHAR2(10);
        dtfimproc                 VARCHAR2(10);
        qtramosinsj               NUMBER DEFAULT 0;
        qtramosinsa               NUMBER DEFAULT 0;
        qtramosup                 NUMBER DEFAULT 0;
    BEGIN
        dtiniproc := dtini;
        dtfimproc := dtfim;
        IF dtiniproc IS NULL THEN
            dtiniproc := sysdate;
        END IF;
        IF dtfimproc IS NULL THEN
            dtfimproc := sysdate;
        END IF;
        FOR lcca IN (
            SELECT
                codativ,
                descativ,
                MAX(dt_emissao_nfsa)
            FROM
                __FNV_GET_NOMESCHEMA__.dados_vendas_origem
            WHERE
                dt_emissao_nfsa BETWEEN dtiniproc AND dtfimproc
            GROUP BY
                codativ,
                descativ
            ORDER BY
                MAX(dt_emissao_nfsa) DESC
        ) LOOP
            IF lcca.codativ IS NOT NULL THEN
                if not(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__ramos_ativ_origem',concat('codramoativ = ',lcca.codativ))) then
                    lca := NULL;
                    lcj := NULL;
                    existe_codigo_incorreto := 0;
                    lca.codramoativ := lcca.codativ;
                    lca.ramoativ := lcca.descativ;
                    if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('jumbo.pcativi',concat('codativ = ',lca.codramoativ)) then
                        SELECT
                            *
                            INTO lcj
                        FROM
                            jumbo.pcativi cj
                        WHERE
                            cj.codativ = lca.codramoativ
                            AND ROWNUM <= 1;
                        lca.existe_erp := 1;
                        lca.ramoativ := lcj.ramo;
                        INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__ramos_ativ_origem VALUES lca;
                        COMMIT;
                        qtramosinsj := qtramosinsj + 1;
                    ELSE
                        lca.existe_erp := 0;
                        INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__ramos_ativ_origem VALUES lca;
                        COMMIT;
                        qtramosinsa := qtramosinsa + 1;
                    END IF;
                ELSE
                    SELECT
                        *
                        INTO lca
                    FROM
                        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__ramos_ativ_origem
                    WHERE
                        codramoativ = lcca.codativ;
                    IF lca.ramoativ IS NULL THEN
                        lca.ramoativ := lcca.descativ;
                        UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__ramos_ativ_origem
                        SET
                            ramoativ = lca.ramoativ
                        WHERE
                            codramoativ = lca.codramoativ;
                        COMMIT;
                        qtramosup := qtramosup + 1;
                    END IF;
                END IF;
            END IF;
        END LOOP;
        COMMIT;
        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END atualizar_ramos_ativ_aurora;

    procedure inserir_produto_origem(p_dados in out __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__produto_origem%rowtype) as
        lcj jumbo.pcprodut%rowtype;
    begin        
        IF p_dados.codprod IS NOT NULL THEN
            p_dados.codprod_na_origem := p_dados.codprod;            
            IF not(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__produto_origem',concat('codprod_na_origem = ',concat(p_dados.codprod_na_origem ,concat(' and codorigemdado = ', nvl(p_dados.codorigemdado,1)))))) THEN
                lcj := NULL;
                if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__produto_origem',concat('codprod = ',p_dados.codprod)) then
                    p_dados.codprod := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_PREFIXOBJECTSDB__produto_origem', 'codprod');    
                    end if;
                
                IF __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('jumbo.pcprodut',concat('codprod = ',p_dados.codprod_na_origem)) THEN
                    SELECT
                        *
                        INTO lcj
                    FROM
                        jumbo.pcprodut cj
                    WHERE
                        cj.codprod = p_dados.codprod_na_origem
                        AND ROWNUM <= 1;
                    p_dados.existe_erp := 1;
                    p_dados.descricao := lcj.descricao;
                    p_dados.codprod_erp := lcj.codprod;
                    p_dados.codepto_erp := lcj.codepto;
                    p_dados.codfornec_erp := lcj.codfornec;                    
                    p_dados.codunidadeorigem := nvl(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_dado_number_se_existir('__FNV_GET_PREFIXOBJECTSDB__unidades_origem','codunidade',concat('upper(unidade) = upper(''',concat(lcj.unidade,''')'))),1);                     
                    INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__produto_origem VALUES p_dados;
                    IF NOT(INSERTING OR UPDATING) THEN
                        COMMIT;
                    END IF;
                ELSE
                    p_dados.existe_erp := 0;
                    p_dados.codprod_erp := null;
                    p_dados.codfornec_erp := 500632;
                    p_dados.codunidadeorigem := nvl(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_dado_number_se_existir('__FNV_GET_PREFIXOBJECTSDB__unidades_origem','codunidade','upper(unidade) = upper(''KG'')'),1);                         
                    INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__produto_origem VALUES p_dados;
                    IF NOT(INSERTING OR UPDATING) THEN
                        COMMIT;
                    END IF;
                END IF;
            ELSIF __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('jumbo.pcprodut',concat('codprod = ',p_dados.codprod_na_origem)) THEN
                /*caso o registro ja exista na orgiem, verifica ainda se o produto existe no erp para retornar no parametro os dados do produto no erp*/
                SELECT
                    *
                    INTO lcj
                FROM
                    jumbo.pcprodut cj
                WHERE
                    cj.codprod = p_dados.codprod_na_origem
                    AND ROWNUM <= 1;
                p_dados.existe_erp := 1;
                p_dados.descricao := lcj.descricao;
                p_dados.codprod_erp := lcj.codprod;
                p_dados.codepto_erp := lcj.codepto;
                p_dados.codfornec_erp := lcj.codfornec;
                p_dados.codunidadeorigem := nvl(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_dado_number_se_existir('__FNV_GET_PREFIXOBJECTSDB__unidades_origem','codunidade',concat('upper(unidade) = upper(''',concat(lcj.unidade,''')'))),1);
            else 
                p_dados.existe_erp := 0;
                p_dados.codprod_erp := null;
                p_dados.codfornec_erp := 500632;
                p_dados.codepto_erp := null;
                p_dados.codunidadeorigem := nvl(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_dado_number_se_existir('__FNV_GET_PREFIXOBJECTSDB__unidades_origem','codunidade','upper(unidade) = upper(''KG'')'),1);
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    end;    

    PROCEDURE atualizar_produtos_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    ) AS

        PRAGMA autonomous_transaction;
        retorno                   VARCHAR2(4000) DEFAULT '0';
        proc                      VARCHAR2(100) DEFAULT 'atualizar_produtos_aurora';
        lca                       __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__produto_origem%rowtype;
        lcj                       jumbo.pcprodut%rowtype;
        existe_aurora             NUMBER DEFAULT 0;
        existe_jumbo              NUMBER DEFAULT 0;
        existe_codigo_incorreto   NUMBER DEFAULT 0;
        codigo_incorreto          NUMBER DEFAULT 0;
        codigo_correto            NUMBER DEFAULT 0;
        dtiniproc                 VARCHAR2(10);
        dtfimproc                 VARCHAR2(10);
        qtinsj                    NUMBER DEFAULT 0;
        qtinsa                    NUMBER DEFAULT 0;
    BEGIN
        dtiniproc := dtini;
        dtfimproc := dtfim;
        IF dtiniproc IS NULL THEN
            dtiniproc := sysdate;
        END IF;
        IF dtfimproc IS NULL THEN
            dtfimproc := sysdate;
        END IF;
        FOR lcca IN (
            SELECT
                cd_item,
                descr_item,
                MAX(dt_emissao_nfsa)
            FROM
                __FNV_GET_NOMESCHEMA__.dados_vendas_origem
            WHERE
                dt_emissao_nfsa BETWEEN dtiniproc AND dtfimproc
            GROUP BY
                cd_item,
                descr_item
            ORDER BY
                MAX(dt_emissao_nfsa) DESC
        ) LOOP
            lca := NULL;
            lca.codorigemdado := 1;
            lca.codprod := lcca.cd_item;
            lca.codprod_na_origem := lca.codprod;
            lca.descricao := lcca.descr_item;
            lca.codfornec_erp := 500632;
            inserir_produto_origem(lca);
        END LOOP;

        COMMIT;
        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END atualizar_produtos_aurora;
    procedure incluir_filial_origem(p_filial in out __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__filial_origem%rowtype) as 
        v_existe number default 0;
        v_lfilial jumbo.pcfilial%rowtype;
    begin
        if p_filial.codfilial_na_origem is not null then
        
            if p_filial.codorigemdado is null then
                p_filial.codorigemdado := 1;
            end if;
            if p_filial.codfilial is null then
                p_filial.codfilial := p_filial.codfilial_na_origem;
            end if;            
            
            if not(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__filial_origem',concat('codfilial = ',p_filial.codfilial))) then        
                if p_filial.codfilial_erp is null then
                    p_filial.codfilial_erp := p_filial.codfilial_na_origem;
                end if;
                
                if __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('jumbo.pcfilial',concat('codigo = ',p_filial.codfilial_erp)) then
                    select
                        *
                        into v_lfilial
                    from
                        jumbo.pcfilial
                    where
                        codigo = p_filial.codfilial_erp;
                    p_filial.existe_erp := 1;
                    p_filial.cidade := v_lfilial.cidade;
                    p_filial.codpessoa_erp := v_lfilial.codcli;
                else
                    p_filial.existe_erp := 0;
                    p_filial.codfilial_erp := null;
                end if;                
                p_filial.codfilial := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_valor_atual_ou_prox_disp('__FNV_GET_PREFIXOBJECTSDB__filial_origem','codfilial',p_filial.codfilial);                
                insert into __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__filial_origem values p_filial;            
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.commitar_se_possivel;            
            end if;
        end if;
    exception 
        when others then
            inserir_erro(p_linha => $$plsql_line);
    end;
    procedure incluir_supervisor_origem(p_superv in out __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__supervisores_origem%rowtype) as
        v_existe number default 0;
        v_lsuperv jumbo.pcsuperv%rowtype;
        v_lfilial __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__filial_origem%rowtype;
    begin
        if p_superv.codsupervisor_na_origem is not null then
            if p_superv.codorigemdado is null then
                /*aurora padrao*/
                p_superv.codorigemdado := 1; 
            end if;
            if p_superv.codsupervisor is null then
                p_superv.codsupervisor := p_superv.codsupervisor_na_origem;
            end if;
            if not(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__supervisores_origem',concat(concat('codorigemdado = ',p_superv.codorigemdado),concat(' and codsupervisor_na_origem = ',p_superv.codsupervisor_na_origem)))) then
                p_superv.codsituacaoregistro := 1;
                if p_superv.codsupervisor_erp is null then
                    p_superv.codsupervisor_erp := p_superv.codsupervisor_na_origem;
                end if;
                
                /*checa e atribui dados se o supervisor existir no erp*/
                if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('jumbo.pcsuperv',concat('codsupervisor = ',p_superv.codsupervisor_erp)) then    
                    select
                        *
                        into v_lsuperv
                    from
                        jumbo.pcsuperv
                    where
                        codsupervisor = p_superv.codsupervisor_erp;
                    p_superv.existe_erp := 1;
                    p_superv.nome := v_lsuperv.nome;
                else
                    p_superv.existe_erp := 0;
                    p_superv.codsupervisor_erp := null;
                end if;
            
                /*checa e inclui a filial origem se nao existir*/
                if p_superv.codfilialorigem is not null then
                    if p_superv.codfilial_erp is null then
                        p_superv.codfilial_erp := p_superv.codfilialorigem;
                    end if;
                    v_lfilial.codfilial_na_origem := p_superv.codfilialorigem;
                    incluir_filial_origem(v_lfilial);
                end if;
            
                /*checa se o codigo unique ja existe e pega o maior + 1*/
                if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__supervisores_origem',concat('codsupervisor = ',p_superv.codsupervisor)) then       
                    p_superv.codsupervisor := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_PREFIXOBJECTSDB__supervisores_origem', 'codsupervisor');
                end if;                
                insert into __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__supervisores_origem values p_superv;
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.commitar_se_possivel;            
            end if;
        end if;
    exception
        when others then
            inserir_erro(p_linha => $$plsql_line);
    end incluir_supervisor_origem;
    PROCEDURE atualizar_usuarios_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    ) AS

        --PRAGMA autonomous_transaction;
        retorno                   VARCHAR2(4000) DEFAULT '0';
        proc                      VARCHAR2(100) DEFAULT 'atualizar_usuarios_aurora';
        lca                       __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuarios_origem%rowtype;
        lcj                       jumbo.pcusuari%rowtype;
        dtiniproc                 VARCHAR2(10);
        dtfimproc                 VARCHAR2(10);
        v_lsuperv __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__supervisores_origem%rowtype;
    BEGIN
        dtiniproc := dtini;
        dtfimproc := dtfim;
        IF dtiniproc IS NULL THEN
            dtiniproc := sysdate;
        END IF;
        IF dtfimproc IS NULL THEN
            dtfimproc := sysdate;
        END IF;
        FOR lcca IN (
            SELECT
                cod_unid,
                vendedor,
                MAX(dt_emissao_nfsa)
            FROM
                __FNV_GET_NOMESCHEMA__.dados_vendas_origem
            WHERE
                dt_emissao_nfsa BETWEEN dtiniproc AND dtfimproc
            GROUP BY
                cod_unid,
                vendedor
            ORDER BY
                MAX(dt_emissao_nfsa) DESC
        ) LOOP
            IF lcca.vendedor IS NOT NULL THEN
                if not(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__usuarios_origem',concat('codusur_na_origem = ',lcca.vendedor))) then
                    lca := NULL;
                    lcj := NULL;
                    v_lsuperv := null;
                    lca.codorigemdado := 1;
                    lca.codsituacaoregistro := 1;
                    lca.codfilialorigem := lcca.cod_unid;
                    lca.codusur := lcca.vendedor;
                    lca.codusur_na_origem := lcca.vendedor;
                    
                    if __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('jumbo.pcusuari',concat('codusur = ',lca.codusur)) then
                        SELECT
                            *
                            INTO lcj
                        FROM
                            jumbo.pcusuari cj
                        WHERE
                            cj.codusur = lca.codusur
                            AND ROWNUM <= 1;
                        lca.codusur_erp := lca.codusur;
                        lca.codsupervisor_erp := lcj.codsupervisor;
                        lca.codsupervisororigem := lca.codsupervisor_erp;
                        lca.nome := lcj.nome;
                        lca.codfilial_erp := lcj.codfilial;
                        lca.existe_erp := 1;
                        v_lsuperv.codorigemdado := lca.codorigemdado;
                        v_lsuperv.codsupervisor_na_origem := lca.codsupervisororigem;
                        incluir_supervisor_origem(v_lsuperv);
                        lca.codsupervisororigem := v_lsuperv.codsupervisor;                        
                        INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuarios_origem VALUES lca;
                        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.commitar_se_possivel;
                    ELSE
                        lca.existe_erp := 0;                        
                        v_lsuperv.codorigemdado := lca.codorigemdado;
                        v_lsuperv.codsupervisor_na_origem := lca.codsupervisororigem;
                        incluir_supervisor_origem(v_lsuperv);
                        lca.codsupervisororigem := v_lsuperv.codsupervisor;
                        INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuarios_origem VALUES lca;
                        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.commitar_se_possivel;
                    END IF;
                END IF;

            END IF;
        END LOOP;

        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.commitar_se_possivel;
        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(
                p_linha => $$plsql_line,
                p_vlrs => concat(lca.codusur,concat(',',concat(lca.codfilialorigem ,concat( ',' ,concat( lca.codusur_na_origem ,concat( ',' ,concat( lca.codusur_erp ,concat( ',' ,concat( lca.codsupervisor_erp ,concat( ',' ,concat( lca.codsupervisororigem ,concat( ',' , lca.codfilial_erp))))))))))))
            );
            retorno := sqlerrm;
    END atualizar_usuarios_aurora;
    
    PROCEDURE atualizar_filial_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    ) AS
        PRAGMA autonomous_transaction;
        retorno                   VARCHAR2(4000) DEFAULT '0';
        proc                      VARCHAR2(100) DEFAULT 'atualizar_filial_aurora';
        lca                       __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__filial_origem%rowtype;
        lcj                       jumbo.pcfilial%rowtype;
        dtiniproc                 VARCHAR2(10);
        dtfimproc                 VARCHAR2(10);
        qtinsj                    NUMBER DEFAULT 0;
        qtinsa                    NUMBER DEFAULT 0;
    BEGIN
        dtiniproc := dtini;
        dtfimproc := dtfim;
        IF dtiniproc IS NULL THEN
            dtiniproc := sysdate;
        END IF;
        IF dtfimproc IS NULL THEN
            dtfimproc := sysdate;
        END IF;
        FOR lcca IN (
            SELECT
                cod_unid,
                cgc_unid,
                nome_unid,
                MAX(dt_emissao_nfsa)
            FROM
                __FNV_GET_NOMESCHEMA__.dados_vendas_origem
            WHERE
                dt_emissao_nfsa BETWEEN dtiniproc AND dtfimproc
            GROUP BY
                cod_unid,
                cgc_unid,
                nome_unid
            ORDER BY
                MAX(dt_emissao_nfsa) DESC
        ) LOOP
            IF lcca.cod_unid IS NOT NULL THEN
                if not(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__filial_origem',concat('codfilial = ',lcca.cod_unid))) then    
                    lca := NULL;
                    lcj := NULL;
                    lca.codfilial := lcca.cod_unid;
                    if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('jumbo.pcfilial',concat('codigo = ',lca.codfilial)) then        
                        SELECT
                            *
                            INTO lcj
                        FROM
                            jumbo.pcfilial cj
                        WHERE
                            cj.codigo = lca.codfilial
                            AND ROWNUM <= 1;
                        lca.existe_erp := 1;
                        INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__filial_origem VALUES lca;
                        COMMIT;
                        qtinsj := qtinsj + 1;
                    ELSE
                        lca.existe_erp := 0;
                        INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__filial_origem VALUES lca;
                        COMMIT;
                        qtinsa := qtinsa + 1;
                    END IF;
                END IF;
            END IF;
        END LOOP;
        COMMIT;
        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END atualizar_filial_aurora;
    
    PROCEDURE atualizar_dados_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    ) AS
        PRAGMA autonomous_transaction;
        retorno          VARCHAR2(4000) DEFAULT '0';
        proc             VARCHAR2(100) DEFAULT 'atualizar_dados_aurora';
        existe_jumbo     NUMBER DEFAULT 0;
        vcgcent          VARCHAR2(100) DEFAULT '';
        vcliente         VARCHAR2(4000) DEFAULT '';
        vcodfilialnf     NUMBER DEFAULT 0;
        vcidadefilial    VARCHAR2(4000) DEFAULT '';
        vcidadecliente   VARCHAR2(4000) DEFAULT '';
        vestadocliente   VARCHAR2(100) DEFAULT '';
        vcodativ         NUMBER DEFAULT 0;
        vdescativ        VARCHAR2(4000) DEFAULT '';
        vrede            VARCHAR2(4000) DEFAULT '';
        atualizados      NUMBER DEFAULT 0;
        dataini          DATE;
        datafim          DATE;
    BEGIN
        dataini := to_date(dtini, 'dd/mm/yyyy');
        datafim := to_date(dtfim, 'dd/mm/yyyy');
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE PLUS'
        WHERE
            upper(rede) LIKE '%PLUS%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE ASSUREL'
        WHERE
            upper(rede) LIKE '%ASSUREL%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE ASSUNOR'
        WHERE
            upper(rede) LIKE '%ASSUNOR%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE CHEGA MAIS'
        WHERE
            upper(rede) LIKE '%CHEGA%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE CHIQUINHO'
        WHERE
            upper(rede) LIKE '%CHIQUINHO%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE ENCARTES'
        WHERE
            upper(rede) LIKE '%ENCARTES%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE ALLMAYER'
        WHERE
            upper(rede) LIKE '%ALLMAYER%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE FORTE'
        WHERE
            upper(rede) LIKE '%FORTE%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE ITALO'
        WHERE
            upper(rede) LIKE '%ITALO%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE GUERRO'
        WHERE
            upper(rede) LIKE '%GUERRO%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE BOA COMPRA'
        WHERE
            upper(rede) LIKE '%BOA COMPRA%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE BOM DIA'
        WHERE
            upper(rede) LIKE '%BOM DIA%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE CERTA'
        WHERE
            upper(rede) LIKE '%CERTA%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE SMART'
        WHERE
            upper(rede) LIKE '%SMART%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE MAX'
        WHERE
            upper(rede) LIKE '%MAX%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE SUPER PAO'
        WHERE
            ( upper(rede) LIKE '%SUPERPAO%'
                OR upper(rede) LIKE '%SUPER PAO%'
                OR upper(rede) LIKE '%SUPER PÃ¿O%' )
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE TONHAO'
        WHERE
            ( upper(rede) LIKE '%TONHAO%'
                OR upper(rede) LIKE '%TONHÃ¿O%' )
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE VENEZA'
        WHERE
            upper(rede) LIKE '%VENEZA%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE COPACOL'
        WHERE
            upper(rede) LIKE '%COPACOL%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE PADARIAS 2 IRMAOS'
        WHERE
            upper(rede) LIKE '%PADARIAS 2%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE GATTI'
        WHERE
            upper(rede) LIKE '%GATTI%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE GRAND'
        WHERE
            upper(rede) LIKE '%GRAND%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE MOLINI'
        WHERE
            upper(rede) LIKE '%MOLINI%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE NAGAI'
        WHERE
            upper(rede) LIKE '%NAGAI%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE PARANA'
        WHERE
            upper(rede) LIKE '%PARAN%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE PLANALTO UMUARAMA'
        WHERE
            upper(rede) LIKE '%PLANALTO%'
            AND upper(rede) LIKE '%UMUARAMA%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE ULIAN'
        WHERE
            upper(rede) LIKE '%ULIAN%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE VALOR'
        WHERE
            TRIM(upper(rede)) = 'VALOR'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE IRMAOS BOMEDIANO'
        WHERE
            upper(rede) LIKE '%BOMEDIANO%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE JUMBO CASCAVEL'
        WHERE
            upper(rede) LIKE '%JUMBO%'
            AND upper(rede) LIKE '%CASCAVEL%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        UPDATE dados_vendas_origem
        SET
            rede = 'REDE JUMBO LONDRINA'
        WHERE
            upper(rede) LIKE '%JUMBO%'
            AND upper(rede) LIKE '%LONDRINA%'
            AND dt_emissao_nfsa BETWEEN dtini AND dtfim;
        COMMIT;
        FOR lc IN (
            SELECT DISTINCT
                dados_vendas_origem.cod_unid,
                to_number(TRIM(dados_vendas_origem.cgc_destino)) AS cgc_destino,
                dados_vendas_origem.nome_destino,
                dados_vendas_origem.cidade_destino,
                dados_vendas_origem.estado_destino,
                dados_vendas_origem.cd_item,
                dados_vendas_origem.descr_item,
                dados_vendas_origem.codativ,
                dados_vendas_origem.descativ,
                dados_vendas_origem.rede,
                pcprodut.codprod,
                pcprodut.descricao,
                pcativi.codativ AS codativjumbo,
                pcativi.ramo
            FROM
                __FNV_GET_NOMESCHEMA__.dados_vendas_origem
                LEFT OUTER JOIN jumbo.pcprodut ON ( pcprodut.codprod = dados_vendas_origem.cd_item )
                LEFT OUTER JOIN jumbo.pcativi ON ( pcativi.codativ = dados_vendas_origem.codativ )
            WHERE
                dt_emissao_nfsa BETWEEN dataini AND datafim
        ) LOOP
            existe_jumbo := 0;
            if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor.cliente_existe(lc.cgc_destino,false) then
                existe_jumbo := 1;
                SELECT
                    pcclient.cgcent,
                    pcclient.cliente,
                    pcclient.codfilialnf,
                    pcfilial.cidade,
                    pccidade.nomecidade,
                    pccidade.uf,
                    pcclient.codatv1,
                    pcativi.ramo,
                    pcredecliente.descricao
                INTO
                    vcgcent,
                    vcliente,
                    vcodfilialnf,
                    vcidadefilial,
                    vcidadecliente,
                    vestadocliente,
                    vcodativ,
                    vdescativ,
                    vrede
                FROM
                    jumbo.pcclient
                    LEFT OUTER JOIN jumbo.pcfilial ON ( pcfilial.codigo = pcclient.codfilialnf )
                    LEFT OUTER JOIN jumbo.pccidade ON ( pccidade.codcidade = pcclient.codcidade )
                    LEFT OUTER JOIN jumbo.pcativi ON ( pcativi.codativ = pcclient.codatv1 )
                    LEFT OUTER JOIN jumbo.pcredecliente ON ( pcredecliente.codrede = pcclient.codrede )
                WHERE
                    to_number(regexp_replace(pcclient.cgcent,'[^0-9]*')) = to_number(regexp_replace(lc.cgc_destino,'[^0-9]*'))
                    AND pcclient.dtexclusao IS NULL
                    AND ROWNUM <= 1;
            ELSIF __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_winthor.cliente_existe(lc.cgc_destino,true) then
                existe_jumbo := 1;
                SELECT
                    pcclient.cgcent,
                    pcclient.cliente,
                    pcclient.codfilialnf,
                    pcfilial.cidade,
                    pccidade.nomecidade,
                    pccidade.uf,
                    pcclient.codatv1,
                    pcativi.ramo,
                    pcredecliente.descricao
                INTO
                    vcgcent,
                    vcliente,
                    vcodfilialnf,
                    vcidadefilial,
                    vcidadecliente,
                    vestadocliente,
                    vcodativ,
                    vdescativ,
                    vrede
                FROM
                    jumbo.pcclient
                    LEFT OUTER JOIN jumbo.pcfilial ON ( pcfilial.codigo = pcclient.codfilialnf )
                    LEFT OUTER JOIN jumbo.pccidade ON ( pccidade.codcidade = pcclient.codcidade )
                    LEFT OUTER JOIN jumbo.pcativi ON ( pcativi.codativ = pcclient.codatv1 )
                    LEFT OUTER JOIN jumbo.pcredecliente ON ( pcredecliente.codrede = pcclient.codrede )
                WHERE
                    to_number(regexp_replace(pcclient.cgcent,'[^0-9]*')) = to_number(regexp_replace(lc.cgc_destino,'[^0-9]*'))
                    AND ROWNUM <= 1;
            END IF;

            IF existe_jumbo > 0 THEN
                UPDATE __FNV_GET_NOMESCHEMA__.dados_vendas_origem
                SET
                    dados_vendas_origem.cod_unid = nvl(vcodfilialnf, dados_vendas_origem.cod_unid),
                    dados_vendas_origem.nome_unid = nvl(vcidadefilial, dados_vendas_origem.nome_unid),
                    dados_vendas_origem.nome_destino = nvl(vcliente, dados_vendas_origem.nome_destino),
                    dados_vendas_origem.cidade_destino = nvl(vcidadecliente, dados_vendas_origem.cidade_destino),
                    dados_vendas_origem.estado_destino = nvl(vestadocliente, dados_vendas_origem.estado_destino),
                    dados_vendas_origem.rede = nvl(vrede, dados_vendas_origem.rede),
                    dados_vendas_origem.codativ = nvl(vcodativ, dados_vendas_origem.codativ),
                    dados_vendas_origem.descativ = nvl(vdescativ, dados_vendas_origem.descativ)
                WHERE
                    dt_emissao_nfsa BETWEEN dataini AND datafim
                    AND to_number(regexp_replace(dados_vendas_origem.cgc_destino,'[^0-9]*')) = to_number(regexp_replace(lc.cgc_destino,'[^0-9]*'))
                    AND dados_vendas_origem.cd_item = lc.cd_item
                    AND dados_vendas_origem.codativ = lc.codativ;
                COMMIT;
                atualizados := atualizados + 1;
            ELSE
                IF lc.codativjumbo IS NOT NULL THEN
                    UPDATE __FNV_GET_NOMESCHEMA__.dados_vendas_origem
                    SET
                        dados_vendas_origem.descativ = nvl(lc.ramo, dados_vendas_origem.descativ)
                    WHERE
                        dt_emissao_nfsa BETWEEN dataini AND datafim
                        AND to_number(regexp_replace(dados_vendas_origem.cgc_destino,'[^0-9]*')) = to_number(regexp_replace(lc.cgc_destino,'[^0-9]*'))
                        AND dados_vendas_origem.cd_item = lc.cd_item
                        AND dados_vendas_origem.codativ = lc.codativ;
                    COMMIT;
                    atualizados := atualizados + 1;
                END IF;
            END IF;
            IF lc.codprod IS NOT NULL THEN
                UPDATE __FNV_GET_NOMESCHEMA__.dados_vendas_origem
                SET
                    dados_vendas_origem.descr_item = lc.descricao
                WHERE
                    dados_vendas_origem.dt_emissao_nfsa BETWEEN dataini AND datafim
                    AND to_number(regexp_replace(dados_vendas_origem.cgc_destino,'[^0-9]*')) = to_number(regexp_replace(lc.cgc_destino,'[^0-9]*'))
                    AND dados_vendas_origem.cd_item = lc.cd_item
                    AND dados_vendas_origem.codativ = lc.codativ;
                COMMIT;
                atualizados := atualizados + 1;
            END IF;
        END LOOP;
        COMMIT;
        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END atualizar_dados_aurora;

    PROCEDURE atualizar_negocio_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    ) AS
        PRAGMA autonomous_transaction;
        retorno          VARCHAR2(4000) DEFAULT '0';
        proc             VARCHAR2(100) DEFAULT 'atualizar_negocio_aurora';
        lca              __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__negocios_origem%rowtype;
        dtiniproc        VARCHAR2(10);
        dtfimproc        VARCHAR2(10);
        qtnegociosinsa   NUMBER DEFAULT 0;
    BEGIN
        dtiniproc := dtini;
        dtfimproc := dtfim;
        IF dtiniproc IS NULL THEN
            dtiniproc := sysdate;
        END IF;
        IF dtfimproc IS NULL THEN
            dtfimproc := sysdate;
        END IF;
        FOR lcca IN (
            SELECT DISTINCT
                negocio
            FROM
                __FNV_GET_NOMESCHEMA__.dados_vendas_origem
            WHERE
                dt_emissao_nfsa BETWEEN dtiniproc AND dtfimproc
                AND negocio IS NOT NULL
        ) LOOP
            if not(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__negocios_origem',concat('lower(TRIM(negocio)) = lower(TRIM(''',concat(lcca.negocio,'''))')))) then
                lca := NULL;
                lca.negocio := lcca.negocio;
                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__negocios_origem VALUES lca;
                COMMIT;
                qtnegociosinsa := qtnegociosinsa + 1;
            END IF;
        END LOOP;
        COMMIT;
        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END atualizar_negocio_aurora;
    
    PROCEDURE atualizar_categoria_aurora (
        dtini   VARCHAR2,
        dtfim   VARCHAR2
    ) AS
        PRAGMA autonomous_transaction;
        retorno            VARCHAR2(4000) DEFAULT '0';
        proc               VARCHAR2(100) DEFAULT 'atualizar_categoria_aurora';
        lca                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__categorias_origem%rowtype;
        dtiniproc          VARCHAR2(10);
        dtfimproc          VARCHAR2(10);
        qtcategoriasinsa   NUMBER DEFAULT 0;
    BEGIN
        dtiniproc := dtini;
        dtfimproc := dtfim;
        IF dtiniproc IS NULL THEN
            dtiniproc := sysdate;
        END IF;
        IF dtfimproc IS NULL THEN
            dtfimproc := sysdate;
        END IF;
        FOR lcca IN (
            SELECT DISTINCT
                categoria
            FROM
                __FNV_GET_NOMESCHEMA__.dados_vendas_origem
            WHERE
                dt_emissao_nfsa BETWEEN dtiniproc AND dtfimproc
                AND categoria IS NOT NULL
        ) LOOP
            if not(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__categorias_origem',concat('lower(TRIM(categoria)) = lower(TRIM(''',concat(lcca.categoria,'''))')))) then
                lca := NULL;
                lca.categoria := lcca.categoria;
                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__categorias_origem VALUES lca;
                COMMIT;
                qtcategoriasinsa := qtcategoriasinsa + 1;
            END IF;
        END LOOP;
        COMMIT;
        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END atualizar_categoria_aurora;
    
    PROCEDURE inserir_atalhos_inicio AS
        PRAGMA autonomous_transaction;
        retorno   VARCHAR2(4000) DEFAULT '0';
        proc      VARCHAR2(100) DEFAULT 'inserir_atalhos_inicio';
        lca       __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__atalhosinicio%rowtype;
        qttemp    NUMBER DEFAULT 0;
    BEGIN
        COMMIT;
        FOR lcca IN (
            SELECT
                *
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis
            ORDER BY
                codusuariosis
        ) LOOP
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__atalhosinicio VALUES (
                qttemp,
                lcca.codusuariosis,
                3,
                1
            );
            COMMIT;
            qttemp := qttemp + 1;
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__atalhosinicio VALUES (
                qttemp,
                lcca.codusuariosis,
                5,
                1
            );
            COMMIT;
            qttemp := qttemp + 1;
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__atalhosinicio VALUES (
                qttemp,
                lcca.codusuariosis,
                10,
                1
            );
            COMMIT;
            qttemp := qttemp + 1;
        END LOOP;
        COMMIT;
        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END inserir_atalhos_inicio;
    
    PROCEDURE criar_grupo_msg_superior (
        codusur NUMBER
    ) AS
        PRAGMA autonomous_transaction;
        retorno         VARCHAR2(4000) DEFAULT '';
        lu              __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis%rowtype;
        lg              __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposmsgs%rowtype;
        li              __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupomsg%rowtype;
    BEGIN
        if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__usuariosis',concat('codusuariosis = ',codusur)) then
            SELECT
                *
                INTO lu
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis
            WHERE
                codusuariosis = codusur;
            if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__gruposmsgs','lower(TRIM(nomegrupomsg)) = ''superior''') then
                DELETE FROM __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposmsgs
                WHERE
                    codgrupomsg = lg.codgrupomsg;
                COMMIT;
            END IF;
            lg := NULL;
            lg.codgrupomsg := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposmsgs', 'codgrupomsg');
            lg.codusur := codusur;
            lg.nomegrupomsg := 'superior';
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposmsgs VALUES lg;            
            COMMIT;
            if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__integgrupomsg',concat('codgrupomsg = ',lg.codgrupomsg)) then
                DELETE FROM __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupomsg
                WHERE
                    codgrupomsg = lg.codgrupomsg;
                COMMIT;
            END IF;
            li.codintegrante := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupomsg', 'codintegrante');
            li.codgrupomsg := lg.codgrupomsg;
            li.codusuariosis := lu.codsupervisor;
            if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__usuariosis',concat('codusuariosis = ',lu.codsupervisor)) then    
                SELECT
                    nvl(nome, ''),
                    nvl(fones_usuario, '')
                INTO
                    li.nomeusuariosis,
                    li.fone_usuario
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis
                WHERE
                    codusuariosis = lu.codsupervisor;
            END IF;
            li.habilitaenviowhats := 'sim';
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupomsg VALUES li;
            COMMIT;
            retorno := '0';
        ELSE
            retorno := 'usuario nao existe';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END criar_grupo_msg_superior;
    
    PROCEDURE criar_grupo_msg_unidade (
        codusur NUMBER
    ) AS
        PRAGMA autonomous_transaction;
        retorno         VARCHAR2(4000) DEFAULT '';
        lu              __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis%rowtype;
        lg              __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposmsgs%rowtype;
        li              __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupomsg%rowtype;
    BEGIN
        if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__usuariosis',concat('codusuariosis = ',codusur)) then
            SELECT
                *
                INTO lu
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis
            WHERE
                codusuariosis = codusur;
            if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__gruposmsgs','TRIM(lower(nomegrupomsg)) = ''unidade''') then
                DELETE FROM __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposmsgs
                WHERE
                    codgrupomsg = lg.codgrupomsg;
                COMMIT;
            END IF;
            lg := NULL;
            lg.codgrupomsg := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposmsgs', 'codgrupomsg');
            lg.codusur := codusur;
            lg.nomegrupomsg := 'unidade';
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposmsgs VALUES lg;
            COMMIT;
            if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__integgrupomsg',concat('codgrupomsg = ',lg.codgrupomsg)) then
                DELETE FROM __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupomsg
                WHERE
                    codgrupomsg = lg.codgrupomsg;
                COMMIT;
            END IF;
            FOR luu IN (
                SELECT
                    *
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis
                WHERE
                    codfilial = lu.codfilial
            ) LOOP
                li.codintegrante := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupomsg', 'codintegrante');
                li.codgrupomsg := lg.codgrupomsg;
                li.codusuariosis := luu.codusuariosis;
                li.nomeusuariosis := luu.nome;
                li.fone_usuario := luu.fones_usuario;
                li.habilitaenviowhats := 'sim';
                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupomsg VALUES li;
                COMMIT;
            END LOOP;
            retorno := '0';
        ELSE
            retorno := 'usuario nao existe';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END criar_grupo_msg_unidade;
    
    PROCEDURE criar_grupo_msg_subordinados (
        codusur NUMBER
    ) AS
        PRAGMA autonomous_transaction;
        retorno         VARCHAR2(4000) DEFAULT '';
        lu              __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis%rowtype;
        lg              __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposmsgs%rowtype;
        li              __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupomsg%rowtype;
    BEGIN
        if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__usuariosis',concat('codusuariosis = ',codusur)) then
            SELECT
                *
                INTO lu
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis
            WHERE
                codusuariosis = codusur;
            if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__gruposmsgs','TRIM(lower(nomegrupomsg)) = ''subordinados''') then
                DELETE FROM __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposmsgs
                WHERE
                    codgrupomsg = lg.codgrupomsg;
                COMMIT;
            END IF;
            lg := NULL;
            lg.codgrupomsg := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposmsgs', 'codgrupomsg');
            lg.codusur := codusur;
            lg.nomegrupomsg := 'subordinados';
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposmsgs VALUES lg;
            COMMIT;
            if __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__integgrupomsg',concat('codgrupomsg = ',lg.codgrupomsg)) then
                DELETE FROM __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupomsg
                WHERE
                    codgrupomsg = lg.codgrupomsg;
                COMMIT;
            END IF;
            FOR luu IN (
                SELECT
                    *
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis
                WHERE
                    codsupervisor = lu.codusuariosis
            ) LOOP
                li.codintegrante := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupomsg', 'codintegrante');
                li.codgrupomsg := lg.codgrupomsg;
                li.codusuariosis := luu.codusuariosis;
                li.nomeusuariosis := luu.nome;
                li.fone_usuario := luu.fones_usuario;
                li.habilitaenviowhats := 'sim';
                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupomsg VALUES li;
                COMMIT;
            END LOOP;
            retorno := '0';
        ELSE
            retorno := 'usuario nao existe';
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END criar_grupo_msg_subordinados;
    
    PROCEDURE criar_todos_grupos_msgs_padrao AS
        PRAGMA autonomous_transaction;
        retorno         VARCHAR2(4000) DEFAULT '';
    BEGIN
        FOR luu IN (
            SELECT
                *
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis
        ) LOOP
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.criar_grupo_msg_superior(luu.codusuariosis);
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.criar_grupo_msg_unidade(luu.codusuariosis);
            IF luu.codnivelacesso < 50 THEN
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.criar_grupo_msg_subordinados(luu.codusuariosis);
            END IF;
        END LOOP;
        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END criar_todos_grupos_msgs_padrao;
    
    PROCEDURE atualizar_estoque_aurora AS
        PRAGMA autonomous_transaction;
        prod_origem              __FNV_GET_PREFIXOBJECTSDB__produto_origem%rowtype;
        estatual                 __FNV_GET_PREFIXOBJECTSDB__estoque_origem%rowtype;
        histest                  __FNV_GET_PREFIXOBJECTSDB__histest_origem%rowtype;
        existe                   INTEGER;
        dif                      NUMBER;
        vcodfilial               NUMBER;
        vdtmov                   DATE;
        textolog                 VARCHAR2(4000);
        v_email_para_rcas_f1     VARCHAR2(32767) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        v_titulo_email_rcas_f1   VARCHAR2(4000) DEFAULT 'JUMBO - ALERTA - ENTRADA DE PRODUTOS AURORA - Filial 1';
        v_corpo_email_rcas_f1    CLOB DEFAULT '';
        v_titulo_tab_rcas_f1     CLOB DEFAULT '';
        v_tabela_rcas_f1         ttabela;
        v_email_para_rcas_f2     VARCHAR2(32767) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        v_titulo_email_rcas_f2   VARCHAR2(4000) DEFAULT 'JUMBO - ALERTA - ENTRADA DE PRODUTOS AURORA - Filial 2';
        v_corpo_email_rcas_f2    CLOB DEFAULT '';
        v_titulo_tab_rcas_f2     CLOB DEFAULT '';
        v_tabela_rcas_f2         ttabela;
        v_css_tab_email          VARCHAR2(32767) DEFAULT NULL;
        v_css_tab_email_td       VARCHAR2(32767) DEFAULT NULL;
        v_css_tab_email_th       VARCHAR2(32767) DEFAULT NULL;
        v_css_dif                VARCHAR2(32767) DEFAULT NULL;
        v_css_num                VARCHAR2(20) DEFAULT '';
        v_abertura_td            VARCHAR2(500) DEFAULT '';
        v_fecha_abert_td         VARCHAR2(10) DEFAULT '';
        v_fechamento_td          VARCHAR2(10) DEFAULT '';
        v_abertura_td_num        VARCHAR2(500) DEFAULT '';
        v_descricao              VARCHAR2(4000) DEFAULT NULL;
        v_contador_itens         NUMBER DEFAULT 0;
        v_houve_entrada_necess   BOOLEAN DEFAULT false;
        v_comando_sql2           CLOB DEFAULT '';
        v_nomes_anexos           tcnjstr;
        v_comandos_anexos        tcnjstrlong;
        v_email_para             VARCHAR2(32767) DEFAULT 'jumbo.ti@jumboalimentos.com.br;felipe@jumboalimentos.com.br';
        v_email_copias_para      VARCHAR2(32767) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        v_titulo_email           VARCHAR2(32767) DEFAULT 'JUMBO - NECESSIDADE AURORA RECEBIDA';
        v_corpo_email            VARCHAR2(32767) DEFAULT 'Segue em anexo quantidades recebidas da aurora nesta data';
        v_numtransent            NUMBER DEFAULT 0;
        v_existe                 NUMBER DEFAULT 0;
        v_numtransnec            NUMBER DEFAULT 0;
    BEGIN
        textolog := '';
        v_contador_itens := 0;
        v_abertura_td := '<td style=\"';
        v_fecha_abert_td := '\">';
        v_fechamento_td := '</td>';
        v_css_tab_email := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email');
        v_css_tab_email_td := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email_td');
        v_css_tab_email_th := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email_th');
        v_abertura_td := concat(v_abertura_td,v_css_tab_email_td);
        v_abertura_td_num := v_abertura_td;
        v_abertura_td := concat(v_abertura_td,v_fecha_abert_td);
        v_abertura_td_num := concat(v_abertura_td_num,concat(';',v_css_num));
        v_abertura_td_num := concat(v_abertura_td_num,v_fecha_abert_td);
        v_tabela_rcas_f1 := ttabela();
        v_email_para_rcas_f1 := obter_emails_rcas_filial(1);
        v_email_para_rcas_f1 := concat(v_email_para_rcas_f1,obter_emails_superv_filial(1));
        v_corpo_email_rcas_f1 := 'Foi registrada uma entrada de produtos no estoque da AURORA nesta data: ';
        v_corpo_email_rcas_f1 := concat(v_corpo_email_rcas_f1,to_char(sysdate, 'dd/mm/yyyy'));
        v_corpo_email_rcas_f1 := concat(v_corpo_email_rcas_f1,'<br />IMPORTANTE: Os referidos itens estarao disponiveis para venda assim que suas quantidades aparecem nos estoques dos aplicativos de venda!<br /><br />');
        v_corpo_email_rcas_f1 := concat(v_corpo_email_rcas_f1,utl_tcp.crlf);
        v_corpo_email_rcas_f1 := concat(v_corpo_email_rcas_f1,utl_tcp.crlf);
        v_corpo_email_rcas_f1 := concat(v_corpo_email_rcas_f1,'<br /><br />');
        v_corpo_email_rcas_f1 := concat(v_corpo_email_rcas_f1,'__TABHTML__');
        v_corpo_email_rcas_f1 := concat(v_corpo_email_rcas_f1,utl_tcp.crlf);
        v_corpo_email_rcas_f1 := concat(v_corpo_email_rcas_f1,utl_tcp.crlf);
        v_corpo_email_rcas_f1 := concat(v_corpo_email_rcas_f1,'<br /><br />');
        v_titulo_tab_rcas_f1 := '';
        v_titulo_tab_rcas_f1 := concat(v_titulo_tab_rcas_f1,'<thead>'|| '<tr>'||'<th style=\"');
        v_titulo_tab_rcas_f1 := concat(v_titulo_tab_rcas_f1,v_css_tab_email_th);
        v_titulo_tab_rcas_f1 := concat(v_titulo_tab_rcas_f1,'\">' || 'Codprod' || '</th>' || '<th style=\"');
        v_titulo_tab_rcas_f1 := concat(v_titulo_tab_rcas_f1,v_css_tab_email_th);
        v_titulo_tab_rcas_f1 := concat(v_titulo_tab_rcas_f1,'\">'|| 'Descricao'|| '</th>'|| '<th style=\"');
        v_titulo_tab_rcas_f1 := concat(v_titulo_tab_rcas_f1,v_css_tab_email_th);
        v_titulo_tab_rcas_f1 := concat(v_titulo_tab_rcas_f1,'\">'|| 'Qtde'|| '</th>'|| '</tr>'|| '</thead>');
        v_tabela_rcas_f1.passo_zebra := 1;
        v_tabela_rcas_f1.prop_style := v_css_tab_email;
        v_tabela_rcas_f1.titulo := v_titulo_tab_rcas_f1;
        v_tabela_rcas_f2 := ttabela();
        v_email_para_rcas_f2 := obter_emails_rcas_filial(2);
        v_email_para_rcas_f2 := concat(v_email_para_rcas_f2,obter_emails_superv_filial(2));
        
        v_corpo_email_rcas_f2 := 'Foi registrada uma entrada de produtos no estoque da AURORA nesta data: ';
        v_corpo_email_rcas_f2 := concat(v_corpo_email_rcas_f2,to_char(sysdate, 'dd/mm/yyyy'));
        v_corpo_email_rcas_f2 := concat(v_corpo_email_rcas_f2,'<br />IMPORTANTE: Os referidos itens estarao disponiveis para venda assim que suas quantidades aparecem nos estoques dos aplicativos de venda!<br /><br />'|| utl_tcp.crlf);
        v_corpo_email_rcas_f2 := concat(v_corpo_email_rcas_f2,utl_tcp.crlf|| '<br /><br />'|| '__TABHTML__'|| concat(utl_tcp.crlf,utl_tcp.crlf)|| '<br /><br />');
        v_titulo_tab_rcas_f2 := '';
        v_titulo_tab_rcas_f2 := concat(v_titulo_tab_rcas_f2, '<thead>'|| '<tr>'|| '<th style=\"');
        v_titulo_tab_rcas_f2 := concat(v_titulo_tab_rcas_f2, v_css_tab_email_th);
        v_titulo_tab_rcas_f2 := concat(v_titulo_tab_rcas_f2,'\">'|| 'Codprod'|| '</th>'|| '<th style=\"');
        v_titulo_tab_rcas_f2 := concat(v_titulo_tab_rcas_f2,v_css_tab_email_th);
        v_titulo_tab_rcas_f2 := concat(v_titulo_tab_rcas_f2,'\">'|| 'Descricao'|| '</th>'|| '<th style=\"');
        v_titulo_tab_rcas_f2 := concat(v_titulo_tab_rcas_f2,v_css_tab_email_th);
        v_titulo_tab_rcas_f2 := concat(v_titulo_tab_rcas_f2,'\">'|| 'Qtde'|| '</th>'|| '</tr>'|| '</thead>');
        v_tabela_rcas_f2.passo_zebra := 1;
        v_tabela_rcas_f2.prop_style := v_css_tab_email;
        v_tabela_rcas_f2.titulo := v_titulo_tab_rcas_f2;
        v_numtransent := 0;
        v_numtransent := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_PREFIXOBJECTSDB__histest_origem', 'numtransent');
        FOR importado IN (
            SELECT
                *
            FROM
                __FNV_GET_NOMESCHEMA__.arestaurimportacao
            ORDER BY
                codfilial,
                cd_item
        ) LOOP
            if not(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('__FNV_GET_PREFIXOBJECTSDB__estoque_origem','codprodorigem = '||importado.cd_item||' AND codfilialorigem = '||importado.codfilial)) then
                textolog := 'produto ' || importado.cd_item || ' nao existia,inserindo';
                estatual.coditemest := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_PREFIXOBJECTSDB__estoque_origem', 'coditemest');
                estatual.codprodorigem := importado.cd_item;
                estatual.codprod_erp := estatual.codprodorigem;
                estatual.codfilialorigem := importado.codfilial;
                estatual.codfilial_erp := estatual.codfilialorigem;
                estatual.qtfisico := importado.qtde;
                estatual.qtgerencial := estatual.qtfisico;
                estatual.qtcomercial := estatual.qtfisico;
                estatual.qtfisicodisponivel := estatual.qtfisico;                
                estatual.dtultent := importado.dtimport;
                
                prod_origem := null;
                prod_origem.codorigemdado := 1;
                prod_origem.codprod := estatual.codprodorigem;
                
                inserir_produto_origem(prod_origem);
                estatual.codprod_erp := prod_origem.codprod_erp; 
                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem VALUES estatual;
                histest.codhistest := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_PREFIXOBJECTSDB__histest_origem', 'codhistest');
                histest.coditemest := estatual.coditemest;
                histest.numtransent := v_numtransent;
                histest.codoper := 'E';
                histest.dtmov := importado.dtimport;
                histest.qtmov := importado.qtde;
                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__histest_origem VALUES histest;
                COMMIT;
                IF importado.qtde > 100 THEN                    
                    v_descricao := nvl(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_dado_varchar2('jumbo.pcprodut','descricao','p.codprod = '||importado.cd_item),'nao encontrado');                    
                    UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__emailnegprod
                    SET
                        dtpositivou = sysdate,
                        negativou = 0
                    WHERE
                        codprod = importado.cd_item
                        AND codfilial = importado.codfilial;
                    IF importado.codfilial = 2 THEN
                        v_tabela_rcas_f2.linhas.extend;
                        v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last) := tlinhatabhtml();
                        v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas.extend;
                        v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas(v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas.last) := concat(concat(v_abertura_td_num,nvl(importado.cd_item,0)),v_fechamento_td);
                        v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas.extend;
                        v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas(v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas.last) := concat(concat(v_abertura_td,nvl(v_descricao,'em branco')),v_fechamento_td);
                        v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas.extend;
                        v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas(v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas.last) := concat(concat(v_abertura_td_num,nvl(importado.qtde,0)),v_fechamento_td);
                    ELSE
                        v_tabela_rcas_f1.linhas.extend;
                        v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last) := tlinhatabhtml();
                        v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas.extend;
                        v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas(v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas.last) := concat(concat(v_abertura_td_num,nvl(importado.cd_item,0)),v_fechamento_td);
                        v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas.extend;
                        v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas(v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas.last) := concat(concat(v_abertura_td,nvl(v_descricao,'em branco')),v_fechamento_td);
                        v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas.extend;
                        v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas(v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas.last) := concat(concat(v_abertura_td_num,nvl(importado.qtde,0)),v_fechamento_td);
                        v_houve_entrada_necess := true;
                    END IF;
                    
                    /*obtem a referencia a ultima geracao de necessidade*/
                    v_numtransnec := nvl(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_valor_maximo('__FNV_GET_PREFIXOBJECTSDB__necessidadefornec', 'numtransnec', 'and trunc(dtgeracao) < trunc(sysdate) and codprodorigem = CASE WHEN ' || importado.cd_item || ' in (2752,2819) then 2752.2819 else ' || importado.cd_item || ' end and codfilialorigem = ' || importado.codfilial),0);
                    UPDATE __FNV_GET_PREFIXOBJECTSDB__necessidadefornec n
                    SET
                        n.dtultrecebimento = sysdate,
                        n.numtransentultrec = v_numtransent
                    WHERE
                        trunc(n.dtgeracao) < trunc(sysdate)
                        AND n.numtransnec IS NOT NULL
                        AND n.codprodorigem =
                            CASE
                                WHEN importado.cd_item IN (
                                    2752,
                                    2819
                                ) THEN
                                    2752.2819
                                ELSE
                                    importado.cd_item
                            END
                        AND n.codfilialorigem = importado.codfilial
                        AND n.numtransnec = v_numtransnec;
                    UPDATE __FNV_GET_PREFIXOBJECTSDB__prevent_origem a
                    SET
                        a.qtrecebida = ( nvl(a.qtrecebida, 0) + importado.qtde ),
                        a.dtultrecebimento = sysdate
                    WHERE
                        a.coditemest = estatual.coditemest
                        AND trunc(a.dtprevisao) = (
                            SELECT
                                trunc(MAX(a2.dtprevisao))
                            FROM
                                __FNV_GET_PREFIXOBJECTSDB__prevent_origem a2
                            WHERE
                                a2.coditemest = estatual.coditemest
                        );
                    COMMIT;
                END IF;
            ELSE
                SELECT
                    *
                    INTO estatual
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem
                WHERE
                    codprodorigem = importado.cd_item
                    AND codfilialorigem = importado.codfilial;
                dif := importado.qtde - estatual.qtfisicodisponivel;
                IF dif > 0 THEN
                    textolog := 'produto ' || importado.cd_item || ' aumentou, registrando atualziacao';
                    histest.codhistest := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__histest_origem', 'codhistest');
                    histest.coditemest := estatual.coditemest;
                    histest.numtransent := v_numtransent;
                    histest.codoper := 'E';
                    histest.dtmov := importado.dtimport;
                    histest.qtmov := dif;
                    INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__histest_origem VALUES histest;
                    UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem
                    SET
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.qtfisico = importado.qtde,
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.qtcomercial = importado.qtde,
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.qtgerencial = importado.qtde,
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.qtfisicodisponivel = importado.qtde,
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.dtultent = importado.dtimport
                    WHERE
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.codprodorigem = importado.cd_item
                        AND __FNV_GET_PREFIXOBJECTSDB__estoque_origem.codfilialorigem = importado.codfilial;
                    COMMIT;
                    IF dif > 100 THEN
                        v_descricao := nvl(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_dado_varchar2('jumbo.pcprodut','descricao','p.codprod = '||importado.cd_item),'nao encontrado');                                        
                        /*nao precisa verificar se nao existe pq se nao existir nao vai atualizar*/
                        UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__emailnegprod
                        SET
                            dtpositivou = sysdate,
                            negativou = 0
                        WHERE
                            codprod = importado.cd_item
                            AND codfilial = importado.codfilial;
                        COMMIT;
                        IF importado.codfilial = 2 THEN
                            v_tabela_rcas_f2.linhas.extend;
                            v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last) := tlinhatabhtml();
                            v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas.extend;
                            v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas(v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas.last) := concat(concat(v_abertura_td_num,nvl(importado.cd_item,0)),v_fechamento_td);
                            v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas.extend;
                            v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas(v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas.last) := concat(concat(v_abertura_td,nvl(v_descricao,'em branco')),v_fechamento_td);
                            v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas.extend;
                            v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas(v_tabela_rcas_f2.linhas(v_tabela_rcas_f2.linhas.last).celulas.last) := concat(concat(v_abertura_td_num,nvl(dif,0)),v_fechamento_td);
                        ELSE
                            v_tabela_rcas_f1.linhas.extend;
                            v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last) := tlinhatabhtml();
                            v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas.extend;
                            v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas(v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas.last) := concat(concat(v_abertura_td_num,nvl(importado.cd_item,0)),v_fechamento_td);
                            v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas.extend;
                            v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas(v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas.last) := concat(concat(v_abertura_td,nvl(v_descricao,'em branco')),v_fechamento_td);
                            v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas.extend;
                            v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas(v_tabela_rcas_f1.linhas(v_tabela_rcas_f1.linhas.last).celulas.last) := concat(concat(v_abertura_td_num,nvl(dif,0)),v_fechamento_td);
                            v_houve_entrada_necess := true;
                        END IF;                        
                        /*obtem a referencia a ultima geracao de necessidade*/
                        v_existe := 0;
                        v_numtransnec := nvl(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_valor_maximo('__FNV_GET_PREFIXOBJECTSDB__necessidadefornec', 'numtransnec', 'and trunc(dtgeracao) < trunc(sysdate) and codprodorigem = CASE WHEN '|| importado.cd_item|| ' in (2752,2819) then 2752.2819 else '|| importado.cd_item|| ' end and codfilialorigem = '|| importado.codfilial),0);
                        UPDATE __FNV_GET_PREFIXOBJECTSDB__necessidadefornec n
                        SET
                            n.dtultrecebimento = sysdate,
                            n.numtransentultrec = v_numtransent
                        WHERE
                            trunc(n.dtgeracao) < trunc(sysdate)
                            AND n.numtransnec IS NOT NULL
                            AND n.codprodorigem =
                                CASE
                                    WHEN importado.cd_item IN (
                                        2752,
                                        2819
                                    ) THEN
                                        2752.2819
                                    ELSE
                                        importado.cd_item
                                END
                            AND n.codfilialorigem = importado.codfilial
                            AND n.numtransnec = v_numtransnec;
                        UPDATE __FNV_GET_PREFIXOBJECTSDB__prevent_origem a
                        SET
                            a.qtrecebida = ( nvl(a.qtrecebida, 0) + importado.qtde ),
                            a.dtultrecebimento = sysdate
                        WHERE
                            a.coditemest = estatual.coditemest
                            AND trunc(a.dtprevisao) = (
                                SELECT
                                    trunc(MAX(a2.dtprevisao))
                                FROM
                                    __FNV_GET_PREFIXOBJECTSDB__prevent_origem a2
                                WHERE
                                    a2.coditemest = estatual.coditemest
                            );
                        COMMIT;
                    END IF;
                ELSIF dif < 0 THEN
                    textolog := concat('produto ',concat(importado.cd_item,' diminuiu, registrando atualziacao'));
                    histest.codhistest := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__histest_origem', 'codhistest');
                    histest.coditemest := estatual.coditemest;
                    histest.numtransent := -1;
                    histest.codoper := 'S';
                    histest.dtmov := importado.dtimport;
                    histest.qtmov := dif;
                    INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__histest_origem VALUES histest;
                    COMMIT;
                    UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem
                    SET
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.qtfisico = importado.qtde,
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.qtgerencial = importado.qtde,
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.qtcomercial = importado.qtde,
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.qtfisicodisponivel = importado.qtde
                    WHERE
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.codprodorigem = importado.cd_item
                        AND __FNV_GET_PREFIXOBJECTSDB__estoque_origem.codfilialorigem = importado.codfilial;
                    COMMIT;
                ELSE
                    textolog := concat('produto ',concat(importado.cd_item,' sem alteracoes'));
                END IF;
            END IF;
            COMMIT;
        END LOOP;
        vcodfilial := 0;
        SELECT DISTINCT
            dtimport
            INTO vdtmov
        FROM
            arestaurimportacao;        
        /*registra a baixa (zeramento) de produto que nao esta no novo arquivo*/
        FOR f IN (
            SELECT DISTINCT
                codfilial
                INTO vcodfilial
            FROM
                arestaurimportacao
        ) LOOP
            vcodfilial := f.codfilial;
            FOR est IN (
                SELECT
                    *
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem
                WHERE
                    __FNV_GET_PREFIXOBJECTSDB__estoque_origem.codfilialorigem = vcodfilial
            ) LOOP
                if not(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.registro_existe('arestaurimportacao','cd_item = ' || est.codprodorigem || ' AND codfilial = '||est.codfilialorigem)) then
                    dif := est.qtfisicodisponivel;
                    textolog := concat('produto ',concat(est.codprodorigem,' nao consta na atualizacao, registrando atualziacao como 0'));
                    histest.codhistest := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_prox_disp('__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__histest_origem', 'codhistest');
                    histest.coditemest := est.coditemest;
                    histest.numtransent := -1;
                    histest.codoper := 'S';
                    histest.dtmov := vdtmov;
                    histest.qtmov := dif;
                    INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__histest_origem VALUES histest;
                    COMMIT;
                    UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem
                    SET
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.qtfisico = 0,
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.qtgerencial = 0,
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.qtcomercial = 0,
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.qtfisicodisponivel = 0
                    WHERE
                        __FNV_GET_PREFIXOBJECTSDB__estoque_origem.codprodorigem = est.codprodorigem
                        AND __FNV_GET_PREFIXOBJECTSDB__estoque_origem.codfilialorigem = est.codfilialorigem;
                    COMMIT;
                END IF;
            END LOOP;
        END LOOP;
        COMMIT;
        DELETE FROM __FNV_GET_NOMESCHEMA__.arestaurimportacao;
        COMMIT;
        IF v_tabela_rcas_f1.linhas.count > 0 THEN
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email(
                pr_email_para => concat(v_email_para_rcas_f1,'jumbo.faturamento@jumboalimentos.com.br;jumbo.ti@jumboalimentos.com.br'), 
                pr_titulo_email => v_titulo_email_rcas_f1, 
                pr_corpo_email => v_corpo_email_rcas_f1, 
                pr_tab_html => v_tabela_rcas_f1
            );
        END IF;
        IF v_tabela_rcas_f2.linhas.count > 0 THEN
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email(
                pr_email_para => concat(v_email_para_rcas_f2,'cadastro@jumboalimentos.com.br;alana@jumboalimentos.com.br;jumbo.ti@jumboalimentos.com.br'),
                pr_titulo_email => v_titulo_email_rcas_f2, 
                pr_corpo_email => v_corpo_email_rcas_f2, 
                pr_tab_html => v_tabela_rcas_f2
            );
        END IF;
        IF v_houve_entrada_necess = true THEN
            v_comando_sql2 := '
with
    ult_receb as (
    select
        to_char(max(dtultrecebimento),''dd/mm/yyyy hh24'') as dtultrecebimento
    from
    __FNV_GET_PREFIXOBJECTSDB__necessidadefornec            
),
ult_prevent as (
    select
        eo.codfilialorigem,
        eo.codprodorigem,
        to_char(max(dtprevisao),''dd/mm/yyyy'') as dtprevisao
    from
        __FNV_GET_PREFIXOBJECTSDB__prevent_origem po
        join __FNV_GET_PREFIXOBJECTSDB__estoque_origem eo on (eo.coditemest = po.coditemest)
    group by
        eo.codfilialorigem,
        eo.codprodorigem
)
SELECT
    n.codfilialorigem,
    n.codprodorigem,
    p.descricao,
    to_char(n.dtgeracao,''dd/mm/yyyy hh24:mi'') as dt_geracao_necess,
    n.falta_total_ajustado,
    n.qtsolicitadareal,
    n.dtsolicitacaoreal,
    pe.qtde as qtde_prevista_abastecimento,
    pe.dtprevisao as dt_prevista_abastecimento,    
    (select sum(ah.qtmov) from __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__histest_origem ah join __FNV_GET_PREFIXOBJECTSDB__estoque_origem esto on esto.coditemest = ah.coditemest where esto.codprodorigem = n.codprodorigem and esto.codfilialorigem = n.codfilialorigem and ah.codoper = ''E'' and ah.numtransent = (select max(ah2.numtransent) from __FNV_GET_PREFIXOBJECTSDB__histest_origem ah2)) as qtultrecebimento,   
    to_char(n.dtultrecebimento,''dd/mm/yyyy hh24:mi'') as dtultrecebimento,
    ca.critica as critica_mes,
    nvl((select sum(nvl(hae.qtmov,0)) from __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__histest_origem hae join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem eo on (eo.coditemest = hae.coditemest) where eo.codfilialorigem = n.codfilialorigem and eo.codprodorigem = n.codprodorigem and trunc(hae.dtmov) between trunc(last_day(add_months(sysdate,-1))+1) and trunc(sysdate) and hae.codoper = ''E''),0) as qt_recebida_mes
FROM
    __FNV_GET_PREFIXOBJECTSDB__necessidadefornec n
    left outer join jumbo.pcprodut p on (p.codprod = nvl(n.codprod_erp,n.codprodorigem))
    left outer join __FNV_GET_PREFIXOBJECTSDB__estoque_origem eo on (eo.codfilialorigem = n.codfilialorigem and eo.codprodorigem = n.codprodorigem)
    left outer join ult_prevent upe on (upe.codfilialorigem = n.codfilialorigem 
        and upe.codprodorigem = n.codprodorigem
    )
    left outer join __FNV_GET_PREFIXOBJECTSDB__prevent_origem pe on (pe.coditemest = eo.coditemest
        and to_char(pe.dtprevisao,''dd/mm/yyyy'') = upe.dtprevisao
    )
    left outer join __FNV_GET_PREFIXOBJECTSDB__metas_origem ca on (ca.codfilial = n.codfilialorigem
        and ca.codprod = n.codprodorigem
        and trunc(ca.dtini) <= trunc(sysdate)
        and trunc(ca.dtfim) >= trunc(sysdate)
    )
where
    n.numtransentultrec = (select max(nvl(numtransent,0)) from __FNV_GET_PREFIXOBJECTSDB__histest_origem)
order by 1,2,4,6';
            v_nomes_anexos := tcnjstr();
            v_nomes_anexos.extend;
            v_nomes_anexos(1) := 'necessidade_recebida.csv';
            v_comandos_anexos := tcnjstrlong();
            v_comandos_anexos.extend;
            v_comandos_anexos(1) := v_comando_sql2;
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_varios_anexos(
                pr_email_para => v_email_para, 
                pr_email_copias_para => v_email_copias_para, 
                pr_titulo_email => v_titulo_email, 
                pr_corpo_email => v_corpo_email, 
                pr_nomes_anexos => v_nomes_anexos,
                pr_comandos_sql_anexos => v_comandos_anexos
            );
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(
                p_linha => $$plsql_line,
                p_vlrs => concat(estatual.coditemest,concat('-',concat(estatual.codfilialorigem,concat('-',estatual.codprodorigem))))
            );
    END atualizar_estoque_aurora;
    
    PROCEDURE importar_estoque_aurora AS
        PRAGMA autonomous_transaction;
        v_exists            BOOLEAN;
        v_length            NUMBER;
        v_blocksize         NUMBER;
        v_file_type         utl_file.file_type;
        v_file_name         VARCHAR2(200);
        v_directory_name    VARCHAR2(30);
        v_line              VARCHAR2(4000);
        linha_import        __FNV_GET_NOMESCHEMA__.arestaurimportacao%rowtype;
        str1                VARCHAR2(4000);
        cont_campos         NUMBER DEFAULT 0;
        existe_preco        NUMBER DEFAULT 0;
        num1                NUMBER DEFAULT 0;
        sep_campo           VARCHAR2(1) DEFAULT '#';
        houve_importacao    BOOLEAN DEFAULT false;
        v_data_importacao   DATE DEFAULT sysdate;
        v_existe            NUMBER DEFAULT 0;
    BEGIN
        v_directory_name := 'DIR_EST_AUR';
        v_file_name := 'SALDOPRODUTO.TXT';
        v_exists := false;
        houve_importacao := false;
        v_data_importacao := sysdate;
        v_existe := 0;
        SELECT
            COUNT(1)
            INTO v_existe
        FROM
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__import_arq_log l
        WHERE
            l.nome_arq IN (
                v_file_name,
                'SALDOPRODUTO.TMP'
            )
            AND l.caminho_arq = v_directory_name
            AND to_char(l.data_importado, 'dd/mm/yyyy HH24') = to_char(v_data_importacao, 'dd/mm/yyyy HH24');
        IF ( v_existe > 0 ) THEN
            dbms_output.put_line('arquivo ja importado nesta hora');
        ELSE 
            /*se ate os dez minutos da hora o arquivo da aurora que vem de hora em hora no minuto 0 ou nao veio ou esta sem acesso ou o aplicativo da sovis retirou da pasta antes que tenha dado tempo de ler, o operador deve ser avisado*/
            IF to_number(to_char(sysdate, 'MI')) > 9 THEN
                raise_application_error(-20001, 'Arquivo de saldo da aurora nao encontrado nessa hora: ' || to_char(sysdate, 'dd/mm/yyyy hh24:mi:ss'));
                /*NULL; desmarcar para o caso de importacao manual por comando e comentar a linha acima*/
            END IF;
            v_exists := false;
            IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
                v_file_type := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo.abrir_arquivo(v_directory_name, v_file_name, v_exists);
                IF v_exists = true THEN
                    v_file_name := 'SALDOPRODUTO.TMP';
                    v_file_type := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo.abrir_arquivo(v_directory_name, v_file_name, v_exists);
                    IF v_exists = false THEN
                        v_file_name := 'SALDOPRODUTO.TXT';
                        v_file_type := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo.abrir_arquivo(v_directory_name, v_file_name, v_exists);
                    END IF;
                END IF;
                IF v_exists = false THEN
                    v_file_name := 'SALDOPRODUTO.TMP';
                    v_file_type := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo.abrir_arquivo(v_directory_name, v_file_name, v_exists);
                END IF;
                IF v_exists = true THEN
                    dbms_output.put_line('arquivo encontrado: ' || v_file_name);
                    DELETE FROM __FNV_GET_NOMESCHEMA__.arestaurimportacao;
                    COMMIT;
                    BEGIN
                        LOOP
                            utl_file.get_line(v_file_type, v_line);
                            linha_import := NULL;
                            cont_campos := 0;
                            LOOP
                                IF ( ( nvl(instr(v_line, sep_campo), 0) = 0 ) AND ( nvl(length(v_line), 0) = 0 ) ) THEN
                                    EXIT;
                                END IF;
                                IF ( instr(v_line, sep_campo) = 0 ) THEN
                                    str1 := v_line;
                                    v_line := '';
                                ELSE
                                    str1 := substr(v_line, 0, instr(v_line, sep_campo) - 1);
                                    v_line := substr(v_line, instr(v_line, sep_campo) + 1);
                                END IF;
                                CASE cont_campos
                                    WHEN 0 THEN
                                        linha_import.cd_item := str1;
                                    WHEN 1 THEN
                                        BEGIN
                                            IF str1 = '85522043/0001-90' OR str1 = '1' THEN
                                                linha_import.codfilial := 1;
                                            ELSE
                                                linha_import.codfilial := 2;
                                            END IF;
                                        END;
                                    WHEN 2 THEN
                                        str1 := trim(replace(replace(replace(replace(replace(replace(str1, 'kg', ''), ' ', ''), ',', ''), '.', ','), chr(10)), chr(13)));
                                        linha_import.qtde := str1;
                                    ELSE
                                        NULL;
                                END CASE;
                                IF ( ( nvl(instr(v_line, sep_campo), 0) = 0 ) AND ( nvl(length(v_line), 0) = 0 ) ) THEN
                                    EXIT;
                                END IF;
                                cont_campos := cont_campos + 1;
                            END LOOP;
                            IF ( length(trim(linha_import.cd_item)) > 0 ) THEN
                                linha_import.dtimport := v_data_importacao;
                                INSERT INTO __FNV_GET_NOMESCHEMA__.arestaurimportacao VALUES linha_import;
                                COMMIT;
                                houve_importacao := true;
                            END IF;
                        END LOOP;
                    EXCEPTION
                        WHEN no_data_found THEN
                            NULL;
                    END;
                    utl_file.fclose(v_file_type);
                    COMMIT;
                    IF ( houve_importacao = true ) THEN
                        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.atualizar_estoque_aurora;
                        INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__import_arq_log VALUES (
                            (select o.codorigemdado from __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__origemdedados o where UPPER(o.origem) = UPPER('AURORA')),
                            v_file_name,
                            v_directory_name,
                            v_data_importacao
                        );
                        COMMIT;
                    END IF;
                ELSE
                    dbms_output.put_line('arquivo nao existe na pasta');
                END IF;
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line, p_vlrs => str1);
    END importar_estoque_aurora;

    PROCEDURE importar_vendas_aurora AS
        PRAGMA autonomous_transaction;
        TYPE ttabela_comandos IS TABLE OF VARCHAR2(4000) INDEX BY BINARY_INTEGER;
        v_exists            BOOLEAN;
        v_length            NUMBER;
        v_blocksize         NUMBER;
        v_file_type         utl_file.file_type;
        v_file_name         VARCHAR2(200);
        v_file_name_dest    VARCHAR2(200);
        v_directory_name    VARCHAR2(30);
        v_line              VARCHAR2(4000);
        linha_import        __FNV_GET_NOMESCHEMA__.dados_vendas_origem_imp%rowtype;
        str1                VARCHAR2(4000);
        cont_campos         NUMBER DEFAULT 0;
        existe_preco        NUMBER DEFAULT 0;
        num1                NUMBER DEFAULT 0;
        sep_campo           VARCHAR2(1) DEFAULT ';';
        houve_importacao    BOOLEAN DEFAULT false;
        v_data_importacao   DATE DEFAULT sysdate;
        v_existe            NUMBER DEFAULT 0;
        tabela_comandos     ttabela_comandos;
        dtini               DATE;
        dtfim               DATE;
        v_colunas           VARCHAR2(32767) DEFAULT NULL;
    BEGIN
        v_directory_name := 'DIR_VENDAS_AUR';
        v_file_name := 'Informativo Jumbo Alimentos.csv';
        v_file_name_dest := concat('Informativo Jumbo Alimentos ',concat(to_char(sysdate, 'ddmmyyyyHH24miss'),'.csv'));
        v_exists := false;
        v_existe := 0;
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_file_type := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo.abrir_arquivo(v_directory_name, v_file_name, v_exists);
            IF v_exists = true THEN
                /*renomeia o arquivo para evitar sobreposicao de processos (job chama de 10 em 10min e o processamento pode demorar mais que isso*/
                utl_file.fclose(v_file_type);
                utl_file.frename(v_directory_name, v_file_name, v_directory_name, v_file_name_dest, true);
                v_file_type := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo.abrir_arquivo(v_directory_name, v_file_name_dest, v_exists);
                BEGIN
                    DELETE FROM __FNV_GET_NOMESCHEMA__.dados_vendas_origem_imp;
                    COMMIT;
                    utl_file.get_line(v_file_type, v_line);/*primeira linha eh titulos*/
                    LOOP
                        utl_file.get_line(v_file_type, v_line);
                        linha_import := NULL;
                        linha_import.codorigemdado := 1;
                        linha_import.vlr_total_nfsa := 0;
                        linha_import.cd_carro := 0;
                        v_line := trim(replace(v_line, '\"', ''));
                        cont_campos := 0;
                        LOOP
                            IF ( ( nvl(instr(v_line, sep_campo), 0) = 0 ) AND ( nvl(length(v_line), 0) = 0 ) ) THEN
                                EXIT; /*acabou a linha*/
                            END IF;
                            IF ( instr(v_line, sep_campo) = 0 ) THEN
                                str1 := v_line;
                                v_line := '';
                            ELSE
                                str1 := substr(v_line, 0, instr(v_line, sep_campo) - 1);
                                v_line := substr(v_line, instr(v_line, sep_campo) + 1);
                            END IF;
                            str1 := trim(str1);
                            str1 := upper(trim(str1));
                            str1 := regexp_replace(str1, 'Ã|Á|À|Â|Ä', 'A');
                            str1 := regexp_replace(str1, 'É|È|Ê|Ë', 'E');
                            str1 := regexp_replace(str1, 'Í|Ì|Î|Ï', 'I');
                            str1 := regexp_replace(str1, 'Ó|Ò|Ô|Õ|Ö', 'O');
                            str1 := regexp_replace(str1, 'Ú|Ù|Û|Ü', 'U');
                            str1 := regexp_replace(str1, 'Ç', 'C');
                            str1 := replace(replace(str1, '''', ''), '&', '');
                            CASE cont_campos
                                WHEN 0 THEN /*codfilial*/
                                    linha_import.cod_unid := str1;
                                    IF ( str1 = '64' ) THEN
                                        linha_import.cod_unid := 2;
                                        linha_import.cgc_unid := '85522043000270';
                                        linha_import.nome_unid := 'LONDRINA';
                                    ELSE
                                        IF ( str1 = '63' ) THEN
                                            linha_import.cod_unid := 1;
                                            linha_import.cgc_unid := '85522043000190';
                                            linha_import.nome_unid := 'CASCAVEL';
                                        ELSE
                                            IF ( substr(v_line, instr(v_line, ';', instr(v_line, ';') + 1) + 1, 2) = '64' ) THEN
                                                linha_import.cod_unid := 2;
                                                linha_import.cgc_unid := '85522043000270';
                                                linha_import.nome_unid := 'LONDRINA';
                                            ELSE
                                                linha_import.cod_unid := 1;
                                                linha_import.cgc_unid := '85522043000190';
                                                linha_import.nome_unid := 'CASCAVEL';
                                            END IF;
                                        END IF;
                                    END IF;
                                WHEN 1 THEN
                                    linha_import.dt_emissao_nfsa := str1;
                                    linha_import.anomes := to_char(to_date(str1, 'dd/mm/yyyy'), 'yyyy/mm');
                                WHEN 2 THEN
                                    linha_import.nro_nfsa := str1;
                                WHEN 5 THEN
                                    linha_import.vendedor := str1;
                                    IF ( length(linha_import.vendedor) > 3 ) THEN
                                        linha_import.vendedor := substr(linha_import.vendedor, length(linha_import.vendedor) - 2);
                                    END IF;
                                WHEN 6 THEN
                                    linha_import.cgc_destino := regexp_replace(str1,'[^0-9]*');
                                WHEN 7 THEN
                                    linha_import.nome_destino := upper(str1);
                                WHEN 8 THEN
                                    linha_import.rede := upper(str1);
                                WHEN 9 THEN
                                    linha_import.cidade_destino := upper(str1);
                                WHEN 10 THEN
                                    /*uf*/
                                    str1 := upper(trim(str1));
                                    v_existe := 0;
                                    SELECT
                                        COUNT(1)
                                        INTO v_existe
                                    FROM
                                        jumbo.pcestado
                                    WHERE
                                        lower(TRIM(estado)) = lower(TRIM(str1));
                                    IF v_existe > 0 THEN
                                        SELECT
                                            uf
                                            INTO linha_import.estado_destino
                                        FROM
                                            jumbo.pcestado
                                        WHERE
                                            lower(TRIM(estado)) = lower(TRIM(str1));
                                    ELSE
                                        IF lower(str1) = lower('SAO PAULO') THEN
                                            linha_import.estado_destino := 'SP';
                                        ELSE
                                            linha_import.estado_destino := 'PR';
                                        END IF;
                                    END IF;
                                WHEN 11 THEN
                                    linha_import.cd_item := str1;
                                WHEN 12 THEN
                                    linha_import.descr_item := upper(str1);
                                WHEN 13 THEN
                                    linha_import.marca := upper(str1);
                                WHEN 14 THEN
                                    linha_import.negocio := upper(str1);
                                WHEN 15 THEN
                                    linha_import.categoria := upper(str1);
                                WHEN 16 THEN
                                    linha_import.peso_liquido_item := to_number(replace(str1, '.', ''));
                                    linha_import.qtde_liquida_item := to_number(replace(str1, '.', ''));
                                WHEN 17 THEN
                                    linha_import.valor_liquido_item := to_number(replace(str1, '.', ''));
                                WHEN 18 THEN
                                    linha_import.codativ := str1;
                                WHEN 19 THEN
                                    linha_import.descativ := upper(str1);
                                ELSE
                                    NULL;
                            END CASE;
                            IF ( ( nvl(instr(v_line, sep_campo), 0) = 0 ) AND ( nvl(length(v_line), 0) = 0 ) ) THEN
                                EXIT;
                            END IF;
                            cont_campos := cont_campos + 1;
                        END LOOP;
                        IF ( length(trim(linha_import.cd_item)) > 0 ) THEN
                            INSERT INTO __FNV_GET_NOMESCHEMA__.dados_vendas_origem_imp VALUES linha_import;
                            COMMIT;
                            houve_importacao := true;
                        END IF;
                    END LOOP;
                EXCEPTION
                    WHEN no_data_found THEN
                        NULL;
                END;
                utl_file.fclose(v_file_type);
                COMMIT;
                IF ( houve_importacao = true ) THEN
                    SELECT
                        MIN(dt_emissao_nfsa)
                        INTO dtini
                    FROM
                        __FNV_GET_NOMESCHEMA__.dados_vendas_origem_imp;
                    SELECT
                        MAX(dt_emissao_nfsa)
                        INTO dtfim
                    FROM
                        __FNV_GET_NOMESCHEMA__.dados_vendas_origem_imp;
                    DELETE FROM __FNV_GET_NOMESCHEMA__.dados_vendas_origem
                    WHERE
                        dt_emissao_nfsa BETWEEN dtini AND dtfim;
                    COMMIT;
                    SELECT
                        LISTAGG(column_name, ',') WITHIN GROUP(
                            ORDER BY
                                column_name
                        )
                        INTO v_colunas
                    FROM
                        all_tab_columns
                    WHERE
                        lower(owner) = lower('__FNV_GET_NOMESCHEMA__')
                        AND table_name = 'DADOS_VENDAS_ORIGEM';
                    dbms_output.put_line('INSERT INTO __FNV_GET_NOMESCHEMA__.dados_vendas_origem ('
                                        || v_colunas
                                        || ') SELECT '
                                        || v_colunas
                                        || ' FROM __FNV_GET_NOMESCHEMA__.dados_vendas_origem_imp order by dt_emissao_nfsa');
                    EXECUTE IMMEDIATE 'INSERT INTO __FNV_GET_NOMESCHEMA__.dados_vendas_origem ('
                                        || v_colunas
                                        || ') SELECT '
                                        || v_colunas
                                        || ' FROM __FNV_GET_NOMESCHEMA__.dados_vendas_origem_imp order by dt_emissao_nfsa';
                    COMMIT;
                    DELETE FROM __FNV_GET_NOMESCHEMA__.dados_vendas_origem_imp;
                    COMMIT;                    
                    /*recria os indices*/
                    FOR lind IN (
                        SELECT
                            *
                        FROM
                            all_indexes
                        WHERE
                            lower(TRIM(owner)) = lower(TRIM('__FNV_GET_NOMESCHEMA__'))
                            AND lower(TRIM(table_name)) = lower(TRIM('DADOS_VENDAS_ORIGEM'))
                    ) LOOP BEGIN
                        EXECUTE IMMEDIATE 'alter index '
                                            ||concat(lind.owner,'.')
                                            || lind.index_name
                                            || ' rebuild';

                    EXCEPTION
                        WHEN OTHERS THEN
                            inserir_erro(p_linha => $$plsql_line);
                            NULL;
                    END;
                    END LOOP;

                    COMMIT;
                    /*roda atualizacoes que dependem dos dados aurora, com base nas datas contidas no arquivo processado*/
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.atualizar_dados_aurora(dtini, dtfim);
                    COMMIT;
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.atualizar_cidade_aurora(dtini, dtfim);
                    COMMIT;
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.atualizar_produtos_aurora(dtini, dtfim);
                    COMMIT;
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.atualizar_ramos_ativ_aurora(dtini, dtfim);
                    COMMIT;
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.atualizar_redecli_aurora(dtini, dtfim);
                    COMMIT;
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.atualizar_usuarios_aurora(dtini, dtfim);
                    COMMIT;
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.atualizar_filial_aurora(dtini, dtfim);
                    COMMIT;
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.atualizar_clientes_aurora(dtini, dtfim);
                    COMMIT;
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.atualizar_negocio_aurora(dtini, dtfim);
                    COMMIT;
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.atualizar_categoria_aurora(dtini, dtfim);
                    COMMIT;
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.atualiz_realiz_objet_sinerg(dtfim);
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.atualiz_realiz_camp_estr();
                    UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__elementosopcoessistema
                    SET
                        text = concat('[Data Aurora: ',concat(dtfim,']'))
                    WHERE
                        lower(TRIM(name)) = lower(TRIM('data_aurora'));
                    COMMIT;
                END IF;
                utl_file.frename(v_directory_name, v_file_name_dest, 'DIR_VENDAS_AUR_PROC', v_file_name_dest, true);
            ELSE
                dbms_output.put_line('arquivo nao existe na pasta');
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END importar_vendas_aurora;

    PROCEDURE atualiz_realiz_objet_sinerg (
        p_dtref DATE DEFAULT NULL
    ) AS
        resultado VARCHAR2(32767);
    BEGIN
        utl_http.set_transfer_timeout(3600);
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            /*endereco da pagina em php (servidor deve estar rodando nesta porta) que processa a atualizacao dos realizados dos objetivos sinergia (nao requer login)*/
            resultado := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.requisitar_endereco('http://192.168.2.150:83/__FNV_GET_PREFIXOBJECTSDB__/php/funcoes/requisicao/requisicao_oracle.php?comando=atualizar_realizado_objetivos_sinergia');
            dbms_output.put_line(resultado);
            IF resultado IS NOT NULL AND instr(lower(resultado), 'sucesso') > 0 AND length(resultado) < 40 THEN
                /*se a atualizacao nao teve erros, atualiza tambem a evolucao, conforme dataref ou horario atual*/
                IF ( p_dtref IS NOT NULL ) THEN
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.gerar_hist_evol_objet_sinergia(p_dtref);
                ELSIF to_number(to_char(sysdate, 'hh')) IN (19,20,23) THEN
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.gerar_hist_evol_objet_sinergia();
                ELSE
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.gerar_hist_evol_objet_sinergia(trunc(sysdate) - 1);
                END IF;
                NULL;
            ELSE
                dbms_output.put_line(resultado);
                raise_application_error(-20000, resultado);
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END atualiz_realiz_objet_sinerg;

    PROCEDURE at_real_obj_sin_mes_ant AS
        resultado VARCHAR2(32767);
    BEGIN
        utl_http.set_transfer_timeout(3600);
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            resultado := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.requisitar_endereco('http://192.168.2.150:83/__FNV_GET_PREFIXOBJECTSDB__/php/funcoes/requisicao/requisicao_oracle.php?comando=atualizar_realizado_objetivos_sinergia_mes_anterior');
            IF resultado IS NOT NULL AND instr(lower(resultado), 'sucesso') > 0 AND length(resultado) < 40 THEN
                NULL;
            ELSE
                raise_application_error(-20000, resultado);
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END at_real_obj_sin_mes_ant;

    PROCEDURE atualiz_realiz_camp_estr AS
        resultado VARCHAR2(32767);
    BEGIN
        utl_http.set_transfer_timeout(3600);
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            resultado := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.requisitar_endereco('http://192.168.2.150:83/__FNV_GET_PREFIXOBJECTSDB__/php/funcoes/requisicao/requisicao_oracle.php?comando=atualizar_realizado_objetivos_campanhas_estruturadas');
            IF resultado IS NOT NULL AND instr(lower(resultado), 'sucesso') > 0 AND length(resultado) < 40 THEN
                NULL;
            ELSE
                raise_application_error(-20000, resultado);
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END atualiz_realiz_camp_estr;

    PROCEDURE at_real_camp_estr_mes_ant AS
        resultado VARCHAR2(32767);
    BEGIN
        utl_http.set_transfer_timeout(3600);
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            resultado := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.requisitar_endereco('http://192.168.2.150:83/__FNV_GET_PREFIXOBJECTSDB__/php/funcoes/requisicao/requisicao_oracle.php?comando=atualizar_realizado_objetivos_campanhas_estruturadas_mes_anterior');
            IF resultado IS NOT NULL AND instr(lower(resultado), 'sucesso') > 0 AND length(resultado) < 40 THEN
                NULL;
            ELSE
                raise_application_error(-20000, resultado);
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END at_real_camp_estr_mes_ant;

    FUNCTION como_numero_aur (
        p_valor VARCHAR2
    ) RETURN NUMBER AS
    BEGIN
        BEGIN
            RETURN replace(replace(p_valor, '.', ''), ',', '.') * 1;
        EXCEPTION
            WHEN OTHERS THEN
                BEGIN
                    RETURN to_number(p_valor, '999G999G999G999D000000');
                EXCEPTION
                    WHEN OTHERS THEN
                        RETURN to_number(p_valor, '999999999D000000');
                END;
        END;
    END como_numero_aur;

    PROCEDURE atualiz_realiz_itens_giro AS
    BEGIN
        FOR li IN (
            WITH clientes AS (
                SELECT
                    to_number(regexp_replace(pcclient.cgcent,'[^0-9]*')) AS \"cgccli\",
                    MAX(pcclient.cliente) AS \"cliente\",
                    MAX(pcclient.fantasia) AS \"fantasia\"
                FROM
                    jumbo.pcclient
                GROUP BY
                    to_number(regexp_replace(pcclient.cgcent,'[^0-9]*'))
                UNION
                SELECT
                    to_number(regexp_replace(po.numcnpjcpf,'[^0-9]*')) AS \"cgccli\",
                    MAX(po.nomerazao) AS \"cliente\",
                    MAX(po.fantasia) AS \"fantasia\"
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem co
                    join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pessoa_origem po on (po.codpessoa = co.codpessoaorigem)
                WHERE
                    NOT EXISTS (
                        SELECT
                            1
                        FROM
                            jumbo.pcclient
                        WHERE
                            to_number(regexp_replace(pcclient.cgcent,'[^0-9]*')) = to_number(regexp_replace(po.numcnpjcpf,'[^0-9]*'))
                    )
                GROUP BY
                    to_number(regexp_replace(po.numcnpjcpf,'[^0-9]*'))
            ), usuarios AS (
                SELECT
                    pcusuari.codusur AS \"codusuariosis\",
                    MAX(pcusuari.nome) AS \"nome\"
                FROM
                    jumbo.pcusuari
                GROUP BY
                    pcusuari.codusur
                UNION
                SELECT
                    __FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codusur AS \"codusuariosis\",
                    MAX(__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.nome) AS \"nome\"
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuarios_origem
                WHERE
                    NOT EXISTS (
                        SELECT
                            1
                        FROM
                            jumbo.pcusuari
                        WHERE
                            pcusuari.codusur = __FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codusur
                    )
                GROUP BY
                    __FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codusur
            ), valoressaida0 AS (
                SELECT
                    to_number(regexp_replace(pcnfsaid.cgc,'[^0-9]*')) AS \"cgccli\",
                    to_number(pcmov.codusur) AS \"codusur\",
                    nvl(nvl(pcmov.pesoliq, pcprodut.pesoliq), 0) * ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) - nvl(pcmov.qtdevol, 0) ) AS \"pesototal\"
                FROM
                    jumbo.pcnfsaid
                    JOIN jumbo.pcmov            ON ( pcmov.numtransvenda = pcnfsaid.numtransvenda
                                                        AND pcnfsaid.dtcancel IS NULL )
                    JOIN jumbo.pcprodut           pcprodut ON ( pcprodut.codprod = pcmov.codprod )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis   __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( pcnfsaid.codusur = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                WHERE
                    pcnfsaid.dtsaida BETWEEN '01/'|| to_char(add_months(sysdate, - 2), 'mm/yyyy') AND last_day(add_months(sysdate, - 1))
                    and pcmov.codoper IN ( 'S' ) and pcnfsaid.especie = 'NF' 
                UNION ALL
                SELECT
                    to_number(regexp_replace(dados_vendas_origem.cgc_destino,'[^0-9]*')) AS \"cgccli\",
                    to_number(dados_vendas_origem.vendedor) AS \"codusur\",
                    nvl(dados_vendas_origem.peso_liquido_item, 0) AS \"pesototal\"
                FROM
                    __FNV_GET_NOMESCHEMA__.dados_vendas_origem
                    JOIN jumbo.pcprodut           pcprodut ON ( pcprodut.codprod = dados_vendas_origem.cd_item )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis   __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( dados_vendas_origem.vendedor = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                WHERE
                    dados_vendas_origem.dt_emissao_nfsa BETWEEN '01/'|| to_char(add_months(sysdate, - 2), 'mm/yyyy') AND last_day(add_months(sysdate, - 1))
            ), valoressaida1 AS (
                SELECT
                    to_number(regexp_replace(pcnfsaid.cgc,'[^0-9]*')) AS \"cgccli\",
                    to_number(pcmov.codusur) AS \"codusur\",
                    nvl(nvl(pcmov.pesoliq, pcprodut.pesoliq), 0) * ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) - nvl(pcmov.qtdevol, 0) )
                    AS \"pesototal\"
                FROM
                    jumbo.pcnfsaid
                    JOIN jumbo.pcmov            ON ( pcmov.numtransvenda = pcnfsaid.numtransvenda
                                                        AND pcnfsaid.dtcancel IS NULL )                    
                    JOIN jumbo.pcprodut           pcprodut ON ( pcprodut.codprod = pcmov.codprod )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis   __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( pcnfsaid.codusur = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                WHERE
                    pcnfsaid.dtsaida BETWEEN '01/' || to_char(sysdate, 'mm/yyyy') AND last_day(sysdate)
                    and pcmov.codoper IN ( 'S' ) and pcnfsaid.especie = 'NF'
                UNION ALL
                SELECT
                    to_number(regexp_replace(dados_vendas_origem.cgc_destino,'[^0-9]*')) AS \"cgccli\",
                    to_number(dados_vendas_origem.vendedor) AS \"codusur\",
                    nvl(dados_vendas_origem.peso_liquido_item, 0) AS \"pesototal\"
                FROM
                    __FNV_GET_NOMESCHEMA__.dados_vendas_origem
                    JOIN jumbo.pcprodut           pcprodut ON ( pcprodut.codprod = dados_vendas_origem.cd_item )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis   __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( dados_vendas_origem.vendedor = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                WHERE
                    dados_vendas_origem.dt_emissao_nfsa BETWEEN '01/' || to_char(sysdate, 'mm/yyyy') AND last_day(sysdate)
            ), r0 AS (
                SELECT
                    clientes.\"cgccli\"           AS \"cgccli\",
                    clientes.\"cliente\"          AS \"cliente\",
                    clientes.\"fantasia\"         AS \"fantasia\",
                    usuarios.\"codusuariosis\"    AS \"codusuariosis\",
                    usuarios.\"nome\"             AS \"nome\",
                    valoressaida0.\"pesototal\"   AS \"pesototal0\",
                    NULL AS \"pesototal1\"
                FROM
                    valoressaida0
                    LEFT OUTER JOIN clientes   clientes ON ( clientes.\"cgccli\" = valoressaida0.\"cgccli\" )
                    LEFT OUTER JOIN usuarios   usuarios ON ( usuarios.\"codusuariosis\" = valoressaida0.\"codusur\" )
            ), r1 AS (
                SELECT
                    clientes.\"cgccli\"           AS \"cgccli\",
                    clientes.\"cliente\"          AS \"cliente\",
                    clientes.\"fantasia\"         AS \"fantasia\",
                    usuarios.\"codusuariosis\"    AS \"codusuariosis\",
                    usuarios.\"nome\"             AS \"nome\",
                    NULL AS \"pesototal0\",
                    valoressaida1.\"pesototal\"   AS \"pesototal1\"
                FROM
                    valoressaida1
                    LEFT OUTER JOIN clientes   clientes ON ( clientes.\"cgccli\" = valoressaida1.\"cgccli\" )
                    LEFT OUTER JOIN usuarios   usuarios ON ( usuarios.\"codusuariosis\" = valoressaida1.\"codusur\" )
            ), r AS (
                SELECT
                    *
                FROM
                    r0
                UNION ALL
                SELECT
                    *
                FROM
                    r1
            ), resultante AS (
                SELECT
                    r.\"cgccli\"          AS \"cgccli\",
                    r.\"cliente\"         AS \"cliente\",
                    r.\"fantasia\"        AS \"fantasia\",
                    r.\"codusuariosis\"   AS \"codusuariosis\",
                    r.\"nome\"            AS \"nome\",
                    SUM(nvl(r.\"pesototal0\", 0)) AS \"pesototal0\",
                    SUM(nvl(r.\"pesototal1\", 0)) AS \"pesototal1\"
                FROM
                    r
                GROUP BY
                    \"cgccli\",
                    \"cliente\",
                    \"fantasia\",
                    \"codusuariosis\",
                    \"nome\"
                HAVING
                    SUM(nvl(r.\"pesototal1\", 0)) <= 0
            ), resultantefinal AS (
                SELECT
                    *
                FROM
                    resultante
                ORDER BY
                    1
            )
            SELECT
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codentidade,
                COUNT(
                    CASE
                        WHEN __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codgrupogiro = 1
                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado, 0) <= 0 THEN
                            1
                        ELSE
                            NULL
                    END
                ) AS naopositgiro,
                COUNT(
                    CASE
                        WHEN __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codgrupogiro = 2
                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado, 0) <= 0 THEN
                            1
                        ELSE
                            NULL
                    END
                ) AS naopositindustr,
                COUNT(
                    CASE
                        WHEN __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codgrupogiro = 3
                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado, 0) <= 0 THEN
                            1
                        ELSE
                            NULL
                    END
                ) AS naopositjumbo,
                COUNT(
                    CASE
                        WHEN __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codgrupogiro = 1
                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado, 0) > 0
                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado, 0) < nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor, 0) THEN
                            1
                        ELSE
                            NULL
                    END
                ) AS positgiro,
                COUNT(
                    CASE
                        WHEN __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codgrupogiro = 2
                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado, 0) > 0
                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado, 0) < nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor, 0) THEN
                            1
                        ELSE
                            NULL
                    END
                ) AS positindustr,
                COUNT(
                    CASE
                        WHEN __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codgrupogiro = 3
                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado, 0) > 0
                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado, 0) < nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor, 0) THEN
                            1
                        ELSE
                            NULL
                    END
                ) AS positjumbo,
                COUNT(
                    CASE
                        WHEN __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codgrupogiro = 1
                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado, 0) >= nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor, 0) THEN
                            1
                        ELSE
                            NULL
                    END
                ) AS batidosgiro,
                COUNT(
                    CASE
                        WHEN __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codgrupogiro = 2
                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado, 0) >= nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor, 0) THEN
                            1
                        ELSE
                            NULL
                    END
                ) AS batidosindustr,
                COUNT(
                    CASE
                        WHEN __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codgrupogiro = 3
                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado, 0) >= nvl(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor, 0) THEN
                            1
                        ELSE
                            NULL
                    END
                ) AS batidosjumbo,
                (
                    SELECT
                        COUNT(1)
                    FROM
                        resultantefinal rf
                    WHERE
                        rf.\"codusuariosis\" = __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codentidade
                ) AS clientes_naoposit
            FROM
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia
                LEFT OUTER JOIN __FNV_GET_PREFIXOBJECTSDB__gruposgiro g ON ( g.codgrupogiro = __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codgrupogiro )
            WHERE
                to_date('01/'
                        || __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_numero(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.mes)
                        || '/'
                        || __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.ano, 'dd/mm/yyyy') BETWEEN '01/' || to_char(sysdate, 'mm/yyyy') AND last_day(sysdate
                        )
                AND __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codcampanhasinergia = 0
                AND lower(TRIM(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.entidade)) = 'rca'
                AND lower(TRIM(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.visao)) = 'produto'
                AND lower(TRIM(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.unidade)) = 'kg'
            GROUP BY
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codentidade
            ORDER BY
                10 DESC,
                9 DESC,
                8 DESC
        ) LOOP
            INSERT INTO __FNV_GET_PREFIXOBJECTSDB__evolitenscampgiro VALUES (
                sysdate,
                li.codentidade,
                1,
                li.naopositgiro,
                li.positgiro,
                li.batidosgiro,
                li.clientes_naoposit
            );
            INSERT INTO __FNV_GET_PREFIXOBJECTSDB__evolitenscampgiro VALUES (
                sysdate,
                li.codentidade,
                2,
                li.naopositindustr,
                li.positindustr,
                li.batidosindustr,
                li.clientes_naoposit
            );
            INSERT INTO __FNV_GET_PREFIXOBJECTSDB__evolitenscampgiro VALUES (
                sysdate,
                li.codentidade,
                3,
                li.naopositjumbo,
                li.positjumbo,
                li.batidosjumbo,
                li.clientes_naoposit
            );
            COMMIT;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END atualiz_realiz_itens_giro;
    FUNCTION como_data_aur (
        p_valor VARCHAR2
    ) RETURN DATE AS
    BEGIN
        BEGIN
            RETURN to_date(p_valor, 'DD-MON-YY', 'NLS_DATE_LANGUAGE=''AMERICAN''');
        EXCEPTION
            WHEN OTHERS THEN
                BEGIN
                    RETURN to_date(p_valor, 'DD-MON-YY', 'NLS_DATE_LANGUAGE=''PORTUGUESE''');
                EXCEPTION
                    WHEN OTHERS THEN
                        BEGIN
                            RETURN to_date(p_valor, 'DD/MM/YYYY');
                        EXCEPTION
                            WHEN OTHERS THEN
                                BEGIN
                                    RETURN to_date(p_valor, 'DD-MM-YYYY');
                                EXCEPTION
                                    WHEN OTHERS THEN
                                        RETURN sysdate;
                                END;
                        END;
                END;
        END;
    END como_data_aur;
    PROCEDURE limpar_carga_aurora (
        p_linha VARCHAR2 DEFAULT NULL
    ) AS
        PRAGMA autonomous_transaction;
        v_exists            BOOLEAN;
        v_length            NUMBER;
        v_blocksize         NUMBER;
        v_file_type         utl_file.file_type;
        v_file_name         VARCHAR2(200);
        v_directory_name    VARCHAR2(30);
        v_line              VARCHAR2(4000);
        linha_import        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cargaaur_import%rowtype;
        str1                VARCHAR2(4000);
        cont_campos         NUMBER DEFAULT 0;
        existe_preco        NUMBER DEFAULT 0;
        num1                NUMBER DEFAULT 0;
        sep_campo           VARCHAR2(1) DEFAULT ';';
        houve_importacao    BOOLEAN DEFAULT false;
        v_data_importacao   DATE DEFAULT sysdate;
        v_existe            NUMBER DEFAULT 0;
        dtini               DATE;
        dtfim               DATE;
        inttemp1            NUMBER;
        datetemp            DATE;
        excluiu_duplic      BOOLEAN DEFAULT false;
        PROCEDURE limpar_linha (
            p_linha VARCHAR2
        ) AS
        BEGIN
            linha_import := NULL;
            v_line := trim(replace(p_linha, '\"', ''));
            v_line := replace(v_line, '__virg__', ',');
            cont_campos := 0;
            LOOP
                IF ( ( nvl(instr(v_line, sep_campo), 0) = 0 ) AND ( nvl(length(v_line), 0) = 0 ) ) THEN
                    EXIT; /*acabou a linha*/
                END IF;
                IF ( instr(v_line, sep_campo) = 0 ) THEN
                    str1 := v_line;
                    v_line := '';
                ELSE
                    str1 := substr(v_line, 0, instr(v_line, sep_campo) - 1);
                    v_line := substr(v_line, instr(v_line, sep_campo) + 1);
                END IF;
                BEGIN
                    str1 := trim(str1);
                    CASE cont_campos
                        WHEN 0 THEN /*codfilial*/
                            linha_import.entrega := str1;
                        WHEN 1 THEN
                            linha_import.ordenacao := como_numero_aur(str1);
                        WHEN 2 THEN
                            linha_import.cd_veiculo := como_numero_aur(str1);
                        WHEN 3 THEN
                            linha_import.nro_carga := como_numero_aur(str1);
                        ELSE
                            NULL;
                    END CASE;
                    IF ( ( nvl(instr(v_line, sep_campo), 0) = 0 ) AND ( nvl(length(v_line), 0) = 0 ) ) THEN
                        EXIT;
                    END IF;
                EXCEPTION
                    WHEN OTHERS THEN
                        inserir_erro(
                            p_linha => $$plsql_line, 
                            p_vlrs => concat(str1, concat(' ',v_line))
                        );
                END;
                cont_campos := cont_campos + 1;
            END LOOP;
            IF ( length(trim(linha_import.nro_carga)) > 0 ) THEN
                DELETE FROM __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cargaaur_import
                WHERE
                    nro_carga = linha_import.nro_carga;
                COMMIT;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                inserir_erro(p_linha => $$plsql_line);
        END;
    BEGIN
        IF ( ( p_linha IS NOT NULL ) AND ( length(trim(p_linha)) > 0 ) ) THEN
            limpar_linha(p_linha);
        ELSE
            v_directory_name := 'DIR_CARGAS_AUR';
            v_file_name := 'cargas.csv';
            v_exists := false;
            v_existe := 0;
            IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
                v_file_type := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo.abrir_arquivo(v_directory_name, v_file_name, v_exists);
                IF v_exists = true THEN
                    BEGIN
                        DELETE FROM __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cargaaur_import;
                        COMMIT;
                        utl_file.get_line(v_file_type, v_line);/*primeira linha eh titulos*/
                        LOOP
                            utl_file.get_line(v_file_type, v_line);
                            limpar_linha(v_line);
                        END LOOP;
                    EXCEPTION
                        WHEN no_data_found THEN
                            NULL;
                        WHEN OTHERS THEN
                            inserir_erro(p_linha => $$plsql_line);
                    END;
                ELSE
                    dbms_output.put_line('arquivo nao existe na pasta');
                END IF;
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END limpar_carga_aurora;/*
*
* @author Antonio ALENCAR Velozo
* @created 29/04/2019
*/
    PROCEDURE importar_carga_aurora (
        p_linha VARCHAR2 DEFAULT NULL
    ) AS
        PRAGMA autonomous_transaction;
        v_exists            BOOLEAN;
        v_length            NUMBER;
        v_blocksize         NUMBER;
        v_file_type         utl_file.file_type;
        v_file_name         VARCHAR2(200);
        v_directory_name    VARCHAR2(30);
        v_line              VARCHAR2(4000);
        linha_import        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cargaaur_import%rowtype;
        str1                VARCHAR2(4000);
        cont_campos         NUMBER DEFAULT 0;
        existe_preco        NUMBER DEFAULT 0;
        num1                NUMBER DEFAULT 0;
        sep_campo           VARCHAR2(1) DEFAULT ';';
        houve_importacao    BOOLEAN DEFAULT false;
        v_data_importacao   DATE DEFAULT sysdate;
        v_existe            NUMBER DEFAULT 0;
        dtini               DATE;
        dtfim               DATE;
        inttemp1            NUMBER;
        excluiu_duplic      BOOLEAN DEFAULT false;
        PROCEDURE importar_linha (
            p_linha VARCHAR2
        ) AS
        BEGIN
            linha_import := NULL;
            v_line := trim(replace(p_linha, '\"', ''));
            v_line := replace(v_line, '__virg__', ',');
            cont_campos := 0;
            LOOP
                IF ( ( nvl(instr(v_line, sep_campo), 0) = 0 ) AND ( nvl(length(v_line), 0) = 0 ) ) THEN
                    EXIT; /*acabou a linha*/
                END IF;
                IF ( instr(v_line, sep_campo) = 0 ) THEN
                    str1 := v_line;
                    v_line := '';
                ELSE
                    str1 := substr(v_line, 0, instr(v_line, sep_campo) - 1);
                    v_line := substr(v_line, instr(v_line, sep_campo) + 1);
                END IF;
                BEGIN
                    str1 := trim(str1);
                    IF length(str1) > 0 THEN
                        CASE cont_campos
                            WHEN 0 THEN /*codfilial*/
                                linha_import.entrega := str1;
                            WHEN 1 THEN
                                linha_import.ordenacao := como_numero_aur(str1);
                            WHEN 2 THEN
                                linha_import.cd_veiculo := como_numero_aur(str1);
                            WHEN 3 THEN
                                linha_import.nro_carga := como_numero_aur(str1);
                            WHEN 4 THEN
                                linha_import.dt_saida := como_data_aur(str1);
                            WHEN 5 THEN
                                linha_import.placa := str1;
                            WHEN 6 THEN
                                linha_import.descr_tpitepedtv := str1;
                            WHEN 7 THEN
                                linha_import.unid_ctrl_shse := como_numero_aur(str1);
                            WHEN 8 THEN
                                linha_import.nome_transp := str1;
                            WHEN 9 THEN
                                linha_import.nf_cross_carga := como_numero_aur(str1);
                            WHEN 10 THEN
                                linha_import.descr_local := str1;
                            WHEN 11 THEN
                                linha_import.nf_cross := como_numero_aur(str1);
                            WHEN 12 THEN
                                linha_import.cd_veiculo_princ := como_numero_aur(str1);
                            WHEN 13 THEN
                                linha_import.descr_item := str1;
                            WHEN 14 THEN
                                linha_import.dt_shelf_mask := como_data_aur(str1);
                            WHEN 15 THEN
                                linha_import.dt_shelf := como_data_aur(str1);
                            WHEN 16 THEN
                                linha_import.qtde := como_numero_aur(str1);
                            WHEN 17 THEN
                                linha_import.qtde_mask := como_numero_aur(str1);
                            WHEN 18 THEN
                                linha_import.cd_item := como_numero_aur(str1);
                            WHEN 19 THEN
                                linha_import.descr_marca := str1;
                            WHEN 20 THEN
                                linha_import.qtde_cx := como_numero_aur(str1);
                            WHEN 21 THEN
                                linha_import.qtde_cx_mask := como_numero_aur(str1);
                            WHEN 22 THEN
                                linha_import.qtde_pct := como_numero_aur(str1);
                            WHEN 23 THEN
                                linha_import.qtde_kg_mask := como_numero_aur(str1);
                            WHEN 24 THEN
                                linha_import.qtde_emb := como_numero_aur(str1);
                            WHEN 25 THEN
                                linha_import.qtde_emb_mask := como_numero_aur(str1);
                            WHEN 26 THEN
                                linha_import.cs_qtde_total := como_numero_aur(str1);
                            ELSE
                                NULL;
                        END CASE;
                    END IF;
                    IF ( ( nvl(instr(v_line, sep_campo), 0) = 0 ) AND ( nvl(length(v_line), 0) = 0 ) ) THEN
                        EXIT;
                    END IF;
                EXCEPTION
                    WHEN OTHERS THEN
                        inserir_erro(
                            p_linha => $$plsql_line, 
                            p_vlrs => concat(str1,concat(' ',v_line))
                        );
                END;
                cont_campos := cont_campos + 1;
            END LOOP;
            IF ( length(trim(linha_import.nro_carga)) > 0 ) THEN
                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cargaaur_import VALUES linha_import;
                COMMIT;
                houve_importacao := true;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                inserir_erro(p_linha => $$plsql_line);
        END;
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo', p_owner => '__FNV_GET_NOMESCHEMA__') ) AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido
        (p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            IF ( ( p_linha IS NOT NULL ) AND ( length(trim(p_linha)) > 0 ) ) THEN
                importar_linha(p_linha);
            ELSE
                v_directory_name := 'DIR_CARGAS_AUR';
                v_file_name := 'cargas.csv';
                v_exists := false;
                v_existe := 0;
                v_file_type := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo.abrir_arquivo(v_directory_name, v_file_name, v_exists);
                IF v_exists = true THEN
                    BEGIN
                        limpar_carga_aurora; /*exclui as cargas existentes no arquvo da tabela */
                        COMMIT;
                        utl_file.get_line(v_file_type, v_line);/*primeira linha eh titulos*/
                        LOOP
                            utl_file.get_line(v_file_type, v_line);
                            importar_linha(v_line);
                        END LOOP;
                    EXCEPTION
                        WHEN no_data_found THEN
                            NULL;
                        WHEN OTHERS THEN
                            inserir_erro(p_linha => $$plsql_line);
                    END;
                    utl_file.frename(v_directory_name, v_file_name, 'DIR_CARGAS_AUR_PROC', v_file_name, true);
                ELSE
                    dbms_output.put_line('arquivo nao existe na pasta');
                END IF;
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END importar_carga_aurora;
    PROCEDURE enviar_alerta_var_compra (
        p_codfilial   NUMBER,
        p_codprod     NUMBER,
        p_descricao   VARCHAR2,
        p_precoant    NUMBER,
        p_novopreco   NUMBER,
        p_numtrans    NUMBER
    ) AS
        v_email_para         VARCHAR2(4000) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        v_titulo_email       VARCHAR2(4000) DEFAULT 'JUMBO - ALERTA - VARIACAO PRECO COMPRA';
        v_corpo_email        VARCHAR2(32767) DEFAULT '';
        numtemp              NUMBER;
        strtemp              VARCHAR2(4000);
        v_css_tab_email      VARCHAR2(32767) DEFAULT NULL;
        v_css_tab_email_td   VARCHAR2(32767) DEFAULT NULL;
    BEGIN
        v_email_para := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
            p_nomeparam => 'email_alerta_variacao_pcompra', 
            p_tipoentidade =>'filial', 
            p_codentidade => p_codfilial, 
            p_valor_padrao => v_email_para
        );
        v_titulo_email := concat(v_titulo_email,'-Filial '|| p_codfilial|| '-PROD '|| p_codprod);
        BEGIN
            SELECT
                descricao
            INTO strtemp
            FROM
                jumbo.pcprodut
            WHERE
                codprod = p_codprod;
        EXCEPTION
            WHEN OTHERS THEN
                strtemp := p_descricao;
                NULL;
        END;
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__', p_owner => '__FNV_GET_NOMESCHEMA__') ) AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido
        (p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_css_tab_email := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email');
            v_css_tab_email_td := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email_td');
            v_corpo_email := concat('A entrada transacao nr. ', p_numtrans);
            v_corpo_email := concat(v_corpo_email,' entrou com uma variacao de preco que excede a parametrizada, verifique se procedem os valores: (A entrada foi registrada normalmente)');
            v_corpo_email := concat(v_corpo_email,utl_tcp.crlf|| '<br /><br /><table style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email);
            v_corpo_email := concat(v_corpo_email,'\"><tbody>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Nr. transacao</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_numtrans|| '</td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Cod. Filial</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_codfilial|| '</td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Cod. Produto</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_codprod|| '</td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Descricao</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">');
            v_corpo_email := concat(v_corpo_email,strtemp);
            v_corpo_email := concat(v_corpo_email,'</td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Preco anterior</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">R$ '|| p_precoant|| '</td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Preco entrada</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">R$ '||p_novopreco|| '</td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Variacao de</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">R$ '|| ( p_novopreco - p_precoant )|| '('|| round((p_novopreco - p_precoant) /(
                CASE
                    WHEN nvl(p_precoant, 0) = 0 THEN 0.01
                    ELSE p_precoant
                END) * 100, 2));
            v_corpo_email := concat(v_corpo_email,'%)</td></tr>'|| '</tbody></table>'|| concat(utl_tcp.crlf,utl_tcp.crlf));
            v_corpo_email := concat(v_corpo_email,'<br /><br />Para verificar / alterar a parametrizacao deste percentual ou alterar o email de recebimento do alerta acesse: http://www.jumboalimentos.com.br, acesso restrito, opcao compras, configuracao compras.');
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email(
                pr_email_para => v_email_para, 
                pr_titulo_email => v_titulo_email, 
                pr_corpo_email=> v_corpo_email
            );
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END enviar_alerta_var_compra;
    PROCEDURE enviar_alerta_var_compraok (
        p_codfilial   NUMBER,
        p_codprod     NUMBER,
        p_descricao   VARCHAR2,
        p_precoant    NUMBER,
        p_novopreco   NUMBER,
        p_numtrans    NUMBER
    ) AS
        v_email_para         VARCHAR2(4000) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        v_titulo_email       VARCHAR2(4000) DEFAULT 'JUMBO - ENTRADA - PRECO COMPRA - OK ';
        v_corpo_email        VARCHAR2(32767) DEFAULT '';
        numtemp              NUMBER;
        strtemp              VARCHAR2(4000);
        v_css_tab_email      VARCHAR2(32767) DEFAULT NULL;
        v_css_tab_email_td   VARCHAR2(32767) DEFAULT NULL;
    BEGIN
        v_email_para := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
            p_nomeparam => 'email_alerta_variacao_pcompraok', 
            p_tipoentidade => 'filial', 
            p_codentidade => p_codfilial, 
            p_valor_padrao => v_email_para
        );
        v_titulo_email := concat(v_titulo_email,'-Filial '|| p_codfilial|| '-PROD '|| p_codprod);
        BEGIN
            SELECT
                descricao
            INTO strtemp
            FROM
                jumbo.pcprodut
            WHERE
                codprod = p_codprod;
        EXCEPTION
            WHEN OTHERS THEN
                strtemp := p_descricao;
                NULL;
        END;
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__', p_owner => '__FNV_GET_NOMESCHEMA__') ) AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido
        (p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_css_tab_email := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email');
            v_css_tab_email_td := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email_td');
            v_corpo_email := 'A entrada transacao nr. ';
            v_corpo_email := concat(v_corpo_email,p_numtrans|| ' entrou com um preco dentro da variacao maxima parametrizada:'|| utl_tcp.crlf|| '<br /><br /><table style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email);
            v_corpo_email := concat(v_corpo_email,'\"><tbody>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Nr. transacao</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_numtrans|| '</td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Cod. Filial</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_codfilial|| '</td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Cod. Produto</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_codprod|| '</td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Descricao</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">');
            v_corpo_email := concat(v_corpo_email,strtemp);
            v_corpo_email := concat(v_corpo_email,'</td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Preco anterior</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">R$ '|| p_precoant|| '</td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Preco entrada</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">R$ '|| p_novopreco|| '</td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Variacao de</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">R$ '|| ( p_novopreco - p_precoant )|| '('|| round((p_novopreco - p_precoant) /(
                CASE
                    WHEN nvl(p_precoant, 0) = 0 THEN
                        0.01
                    ELSE p_precoant
                END) * 100, 2));
            v_corpo_email := concat(v_corpo_email,'%)</td></tr>'|| '</tbody></table>'|| concat(utl_tcp.crlf,utl_tcp.crlf));
            v_corpo_email := concat(v_corpo_email,'<br /><br />Para verificar / alterar a parametrizacao deste percentual ou alterar o email de recebimento do alerta acesse: http://www.jumboalimentos.com.br, acesso restrito, opcao compras, configuracao compras.');
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email(
                pr_email_para => v_email_para, 
                pr_titulo_email => v_titulo_email, 
                pr_corpo_email=> v_corpo_email
            );
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END enviar_alerta_var_compraok;
    PROCEDURE enviar_alerta_est_neg (
        p_numpedrca NUMBER
    ) AS
        PRAGMA autonomous_transaction;
        v_email_para             VARCHAR2(4000) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        v_titulo_email           VARCHAR2(4000) DEFAULT 'JUMBO - ALERTA - ESTOQUE NEGATIVO';
        v_corpo_email            VARCHAR2(32767) DEFAULT '';
        v_email_rca              VARCHAR2(4000) DEFAULT NULL;
        v_existe                 NUMBER default NULL;
        numtemp                  NUMBER;
        strtemp                  VARCHAR2(4000);
        v_cliente                VARCHAR2(4000) DEFAULT NULL;
        v_rca                    VARCHAR2(4000) DEFAULT NULL;
        v_produto                VARCHAR2(4000) DEFAULT NULL;
        v_css_tab_email          VARCHAR2(32767) DEFAULT NULL;
        v_css_tab_email_td       VARCHAR2(32767) DEFAULT NULL;
        strtemp2                 VARCHAR2(4000) DEFAULT NULL;
        v_codfilial              NUMBER DEFAULT 1;
        v_qtestjumbo             NUMBER DEFAULT 0;
        v_qtestaurora            NUMBER DEFAULT 0;
        v_qtestjumbo_bloq        NUMBER DEFAULT 0;
        v_qtestjumbo_reserv      NUMBER DEFAULT 0;
        v_qtestjumbo_pend        NUMBER DEFAULT 0;
        v_qtestjumbo_transm      NUMBER DEFAULT 0;
        v_qtestjumbo_prev_disp   NUMBER DEFAULT 0;
        v_obs                    VARCHAR2(32767) DEFAULT NULL;
        v_cab                    jumbo.pcpedcfv%rowtype;
    BEGIN
        SELECT
            *
        INTO v_cab
        FROM
            jumbo.pcpedcfv
        WHERE
            numpedrca = p_numpedrca;
        v_codfilial := nvl(nvl(v_cab.codfilial, v_cab.codfilialnf), v_cab.codfilialretira);
        v_email_para := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
            p_nomeparam => 'enviar_alerta_est_neg', 
            p_tipoentidade => 'filial', 
            p_codentidade => v_codfilial, 
            p_valor_padrao => v_email_para
        );
        v_existe := 0;
        SELECT
            COUNT(1)
        INTO v_existe
        FROM
            jumbo.pcusuari u
        WHERE
            u.codusur = v_cab.codusur;
        IF v_existe > 0 THEN
            v_email_rca := NULL;
            SELECT
                u.email
            INTO v_email_rca
            FROM
                jumbo.pcusuari u
            WHERE
                u.codusur = v_cab.codusur;
            IF v_email_rca IS NOT NULL AND length(trim(v_email_rca)) > 0 THEN
                v_email_para := concat(v_email_para,concat(';',v_email_rca));
            END IF;
        END IF;
        FOR li IN (
            SELECT
                *
            FROM
                jumbo.pcpedifv
            WHERE
                numpedrca = v_cab.numpedrca
        ) LOOP
            v_existe := 0;
            SELECT
                COUNT(1)
            INTO v_existe
            FROM
                jumbo.pcest e
            WHERE
                e.codprod = li.codprod
                AND e.codfilial = v_codfilial;
            v_qtestjumbo_prev_disp := 0;
            IF v_existe > 0 THEN
                SELECT
                    MIN(nvl(e.qtestger, 0)),
                    MAX(nvl(e.qtbloqueada, 0)),
                    MAX(nvl(e.qtreserv, 0)),
                    MAX(nvl(e.qtpendente, 0)),
                    SUM(nvl(pi.qt, 0))
                INTO
                    v_qtestjumbo,
                    v_qtestjumbo_bloq,
                    v_qtestjumbo_reserv,
                    v_qtestjumbo_pend,
                    v_qtestjumbo_transm
                FROM
                    jumbo.pcest e
                    LEFT OUTER JOIN (
                        SELECT
                            to_number(nvl(nvl(pfvc.codfilial, pfvc.codfilialnf), pfvc.codfilialretira)) AS codfilial,
                            pfvi.codprod   AS codprod,
                            pfvi.qt        AS qt
                        FROM
                            jumbo.pcpedifv   pfvi
                            JOIN jumbo.pcpedcfv   pfvc ON ( pfvc.numpedrca = pfvi.numpedrca
                                                            AND pfvc.importado = 1 )
                    ) pi ON ( pi.codfilial = e.codfilial
                                AND pi.codprod = e.codprod )
                WHERE
                    e.codprod = li.codprod
                    AND e.codfilial = v_codfilial;
                v_qtestjumbo_prev_disp := v_qtestjumbo - ( v_qtestjumbo_bloq + v_qtestjumbo_reserv + v_qtestjumbo_pend + v_qtestjumbo_transm
                );
                v_obs := concat('Estoque Jumbo: ',v_qtestjumbo)
                            || concat(' Qt. Bloq.: ',v_qtestjumbo_bloq)
                            || concat(' Qt. Reserv.: ',v_qtestjumbo_reserv)
                            || concat(' Qt. Pend.: ',v_qtestjumbo_pend)
                            || concat(' Qt. Transm.: ',v_qtestjumbo_transm)
                            || concat(' Qt. Disp = ',v_qtestjumbo_prev_disp);
            END IF;
            v_existe := 0;
            SELECT
                COUNT(1)
                INTO v_existe
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem e
            WHERE
                e.codprodorigem = li.codprod
                AND e.codfilialorigem = v_codfilial;
            v_qtestaurora := 0;
            IF v_existe > 0 THEN
                SELECT
                    e.qtfisico - ( nvl(e.qtreservada, 0) )
                    INTO v_qtestaurora
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem e
                WHERE
                    e.codprodorigem = li.codprod
                    AND e.codfilialorigem = v_codfilial;
            END IF;
            IF ( v_qtestaurora + v_qtestjumbo_prev_disp ) - li.qt < 0 THEN
                v_titulo_email := concat(v_titulo_email,'-Filial '|| v_codfilial|| '-PROD '|| li.codprod);
                BEGIN
                    SELECT
                        descricao
                        INTO strtemp
                    FROM
                        jumbo.pcprodut
                    WHERE
                        codprod = li.codprod;
                EXCEPTION
                    WHEN OTHERS THEN
                        strtemp := 'indefinido';
                        NULL;
                END;

                v_existe := 0;
                SELECT
                    COUNT(1)
                INTO v_existe
                FROM
                    jumbo.pcclient c
                WHERE
                    to_number(regexp_replace(c.cgcent,'[^0-9]*')) = to_number(regexp_replace(v_cab.cgccli,'[^0-9]*'));
                IF v_existe > 0 THEN
                    SELECT
                        v_cab.cgccli || '-' || c.fantasia
                        INTO v_cliente
                    FROM
                        jumbo.pcclient c
                    WHERE
                        to_number(regexp_replace(c.cgcent,'[^0-9]*')) = to_number(regexp_replace(v_cab.cgccli,'[^0-9]*'))
                        AND ROWNUM <= 1;
                ELSE
                    v_cliente := v_cab.cgccli;
                END IF;
                v_existe := 0;
                SELECT
                    COUNT(1)
                    INTO v_existe
                FROM
                    jumbo.pcusuari u
                WHERE
                    u.codusur = v_cab.codusur;
                IF v_existe > 0 THEN
                    SELECT
                        v_cab.codusur || '-' || u.nome
                        INTO v_rca
                    FROM
                        jumbo.pcusuari u
                    WHERE
                        u.codusur = v_cab.codusur
                        AND ROWNUM <= 1;
                ELSE
                    v_rca := v_cab.codusur;
                END IF;
                v_produto := concat(li.codprod,concat('-',strtemp));
                IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__', p_owner => '__FNV_GET_NOMESCHEMA__') ) AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
                    v_css_tab_email := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email');
                    v_css_tab_email_td := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email_td');
                    v_obs := concat('Estoque Jumbo: ',v_qtestjumbo)
                                || concat(' Qt. Bloq.: ',v_qtestjumbo_bloq)
                                || concat(' Qt. Reserv.: ',v_qtestjumbo_reserv)
                                || concat(' Qt. Pend.: ',v_qtestjumbo_pend)
                                || concat(' Qt. Transm.: ',v_qtestjumbo_transm)
                                || concat(' Qt. Disp = ',v_qtestjumbo_prev_disp);
                    v_corpo_email := 'O pedido transmitido nr. ';
                    v_corpo_email := concat(v_corpo_email,to_char(v_cab.numpedrca));
                    v_corpo_email := concat(v_corpo_email,' ira negativar o estoque e podera ter o seguinte item cortado, verifique se procedem os valores: (O pedido foi registrado normalmente)');
                    v_corpo_email := concat(v_corpo_email,utl_tcp.crlf|| '<br /><br /><table style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email);
                    v_corpo_email := concat(v_corpo_email,'\"><tbody>'|| '<tr><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">Cod. Filial</td><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">'|| to_char(v_codfilial)|| '</td></tr>'|| '<tr><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">Nr. Ped. RCA</td><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">'|| to_char(v_cab.numpedrca)|| '</td></tr>'|| '<tr><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">Rca</td><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">'|| v_rca|| '</td></tr>'|| '<tr><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">Cliente</td><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">'|| v_cliente|| '</td></tr>'|| '<tr><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">Produto</td><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">' ||v_produto || '</td></tr>'|| '<tr><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">Qtde Disp Est Jumbo</td><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">'|| to_char(v_qtestjumbo)|| '</td></tr>'|| '<tr><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">Qtde Disp Est Aurora</td><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">'|| to_char(v_qtestaurora)|| '</td></tr>'|| '<tr><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">Qtde Ped. RCA</td><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">'|| to_char(li.qt)|| '</td></tr>'|| '<tr><td style=\"');                
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">Qtde Resultante Est</td><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">'|| to_char(v_qtestjumbo + v_qtestaurora - li.qt)|| '</td></tr>'|| '<tr><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">Observacao</td><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">');
                    v_corpo_email := concat(v_corpo_email,v_obs);
                    v_corpo_email := concat(v_corpo_email,'</td></tr>'|| '</tbody></table>'|| concat(utl_tcp.crlf,utl_tcp.crlf));
                    v_corpo_email := concat(v_corpo_email,'<br /><br />Para verificar / alterar o email de recebimento do alerta acesse: http://www.jumboalimentos.com.br, acesso restrito, opcao vendas, configuracao vendas.');
                    v_email_para := 'jumbo.ti@jumboalimentos.com.br';
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email(
                        pr_email_para => v_email_para, 
                        pr_titulo_email => v_titulo_email,
                        pr_corpo_email => v_corpo_email
                    );
                END IF;
            END IF;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END enviar_alerta_est_neg;

    PROCEDURE enviar_alerta_est_neg_item (
        p_numpedrca   NUMBER,
        p_codprod     NUMBER,
        p_cgccli      NUMBER,
        p_codusur     NUMBER,
        p_codfilial   NUMBER,
        p_qt          NUMBER
    ) AS
        PRAGMA autonomous_transaction;
        v_email_para             VARCHAR2(32767) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        v_email_para_geral       VARCHAR2(32767) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        v_titulo_email           VARCHAR2(32767) DEFAULT 'JUMBO - ALERTA - ESTOQUE NEGATIVO';
        v_corpo_email            VARCHAR2(32767) DEFAULT '';
        v_email_rca              VARCHAR2(32767) DEFAULT NULL;
        v_emails_rcas_filial     VARCHAR2(32767) DEFAULT NULL;
        v_existe                 NUMBER default NULL;
        strtemp                  VARCHAR2(4000);
        v_cliente                VARCHAR2(4000) DEFAULT NULL;
        v_rca                    VARCHAR2(4000) DEFAULT NULL;
        v_produto                VARCHAR2(4000) DEFAULT NULL;
        v_css_tab_email          VARCHAR2(32767) DEFAULT NULL;
        v_css_tab_email_td       VARCHAR2(32767) DEFAULT NULL;
        v_qtestjumbo             NUMBER DEFAULT 0;
        v_qtestaurora            NUMBER DEFAULT 0;
        v_qtestjumbo_bloq        NUMBER DEFAULT 0;
        v_qtestjumbo_reserv      NUMBER DEFAULT 0;
        v_qtestjumbo_pend        NUMBER DEFAULT 0;
        v_qtestjumbo_transm      NUMBER DEFAULT 0;
        v_qtestjumbo_prev_disp   NUMBER DEFAULT 0;
        v_obs                    VARCHAR2(32767) DEFAULT NULL;
        v_strtemp1               VARCHAR2(32767) DEFAULT NULL;
        v_strtemp2               VARCHAR2(32767) DEFAULT NULL;
        v_tem_peixe              BOOLEAN DEFAULT false;
    BEGIN
        v_email_para := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
            p_nomeparam => 'enviar_alerta_est_neg', 
            p_tipoentidade => 'filial', 
            p_codentidade => p_codfilial, 
            p_valor_padrao => v_email_para
        );
        v_email_rca := obter_email_rca(p_codrca => p_codusur);
        IF v_email_rca IS NOT NULL AND length(trim(v_email_rca)) > 0 THEN
            v_email_para := concat(v_email_para,concat(';',v_email_rca));
        END IF;
        v_existe := 0;
        SELECT
            COUNT(1)
        INTO v_existe
        FROM
            jumbo.pcest e
        WHERE
            e.codprod = p_codprod
            AND e.codfilial =
                CASE
                    WHEN p_codfilial = 3 THEN
                        1
                    ELSE
                        p_codfilial
                END;
        v_qtestjumbo_prev_disp := 0;
        IF v_existe > 0 THEN
            SELECT
                MIN(nvl(e.qtestger, 0)),
                MAX(nvl(e.qtbloqueada, 0)),
                MAX(nvl(e.qtreserv, 0)),
                MAX(nvl(e.qtpendente, 0)),
                SUM(nvl(pi.qt, 0))
            INTO
                v_qtestjumbo,
                v_qtestjumbo_bloq,
                v_qtestjumbo_reserv,
                v_qtestjumbo_pend,
                v_qtestjumbo_transm
            FROM
                jumbo.pcest e
                LEFT OUTER JOIN (
                    SELECT
                        to_number(nvl(nvl(pfvc.codfilial, pfvc.codfilialnf), pfvc.codfilialretira)) AS codfilial,
                        pfvi.codprod   AS codprod,
                        pfvi.qt        AS qt
                    FROM
                        jumbo.pcpedifv   pfvi
                        JOIN jumbo.pcpedcfv   pfvc ON ( pfvc.numpedrca = pfvi.numpedrca
                                                        AND pfvc.importado = 1 )
                ) pi ON ( pi.codprod = e.codprod
                            AND pi.codfilial IN (
                    e.codfilial,
                    CASE
                            WHEN p_codfilial = 3 THEN
                                1
                            ELSE
                                0
                        END,
                    CASE
                            WHEN p_codfilial = 1 THEN
                                3
                            ELSE
                                0
                        END
                ) )
            WHERE
                e.codprod = p_codprod
                AND e.codfilial =
                    CASE
                        WHEN p_codfilial = 3 THEN
                            1
                        ELSE
                            p_codfilial
                    END;
            v_qtestjumbo_prev_disp := v_qtestjumbo - ( v_qtestjumbo_bloq + v_qtestjumbo_reserv + v_qtestjumbo_pend + v_qtestjumbo_transm
            );
            v_obs := concat('Estoque Jumbo: ',v_qtestjumbo)
                        || concat(' Qt. Bloq.: ',v_qtestjumbo_bloq)
                        || concat(' Qt. Reserv.: ',v_qtestjumbo_reserv)
                        || concat(' Qt. Pend.: ',v_qtestjumbo_pend)
                        || concat(' Qt. Transm.: ',v_qtestjumbo_transm)
                        || concat(' Qt. Disp = ',v_qtestjumbo_prev_disp);
        END IF;
        v_existe := 0;
        SELECT
            COUNT(1)
            INTO v_existe
        FROM
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem e
        WHERE
            e.codprodorigem = p_codprod
            AND e.codfilialorigem = 
                CASE
                    WHEN p_codfilial = 3 THEN
                        1
                    ELSE
                        p_codfilial
                END;
        v_qtestaurora := 0;
        IF v_existe > 0 THEN
            SELECT
                e.qtfisico - ( nvl(e.qtreservada, 0) )
                INTO v_qtestaurora
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem e
            WHERE
                e.codprodorigem = p_codprod
                AND e.codfilialorigem =
                    CASE
                        WHEN p_codfilial = 3 THEN
                            1
                        ELSE
                            p_codfilial
                    END;
        END IF;
        IF ( v_qtestaurora + v_qtestjumbo_prev_disp ) - p_qt < 0 THEN
            v_titulo_email := concat(v_titulo_email,'-Filial '|| p_codfilial|| '-PROD '|| p_codprod);
            BEGIN
                SELECT
                    descricao
                    INTO strtemp
                FROM
                    jumbo.pcprodut
                WHERE
                    codprod = p_codprod;
            EXCEPTION
                WHEN OTHERS THEN
                    strtemp := 'indefinido';
                    NULL;
            END;
            v_existe := 0;
            SELECT
                COUNT(1)
                INTO v_existe
            FROM
                jumbo.pcclient c
            WHERE
                to_number(regexp_replace(c.cgcent,'[^0-9]*')) = to_number(regexp_replace(p_cgccli,'[^0-9]*'));
            IF v_existe > 0 THEN
                SELECT
                    p_cgccli
                    || '-'
                    || c.fantasia
                    INTO v_cliente
                FROM
                    jumbo.pcclient c
                WHERE
                    to_number(regexp_replace(c.cgcent,'[^0-9]*')) = to_number(regexp_replace(p_cgccli,'[^0-9]*'))
                    AND ROWNUM <= 1;
            ELSE
                v_cliente := p_cgccli;
            END IF;
            v_existe := 0;
            SELECT
                COUNT(1)
                INTO v_existe
            FROM
                jumbo.pcusuari u
            WHERE
                u.codusur = p_codusur;
            IF v_existe > 0 THEN
                SELECT
                    p_codusur || '-' || u.nome
                    INTO v_rca
                FROM
                    jumbo.pcusuari u
                WHERE
                    u.codusur = p_codusur
                    AND ROWNUM <= 1;
            ELSE
                v_rca := p_codusur;
            END IF;
            v_produto := concat(p_codprod,concat('-',strtemp));
            IF instr(upper(v_produto), 'PEIXE') > 0 THEN
                v_tem_peixe := true;
            END IF;
            IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__', p_owner => '__FNV_GET_NOMESCHEMA__') ) AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
                v_css_tab_email := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email');
                v_css_tab_email_td := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email_td');
                v_obs := 'Calculo do estoque disponivel da Jumbo: <br /><table><tr><td>Estoque Jumbo:</td><td>';
                v_obs := concat(v_obs,to_char(v_qtestjumbo, '999G999G990D90')
                            || '</td></tr><tr><td>Qt. Bloq.:</td><td>'
                            || to_char(v_qtestjumbo_bloq, '999G999G990D90')
                            || '</td></tr><tr><td>Qt. Reserv.:</td><td>'
                            || to_char(v_qtestjumbo_reserv, '999G999G990D90')
                            || '</td></tr><tr><td>Qt. Pend.:</td><td>'
                            || to_char(v_qtestjumbo_pend, '999G999G990D90')
                            || '</td></tr><tr><td>Qt. Transm.:</td><td>'
                            || to_char(v_qtestjumbo_transm, '999G999G990D90')
                            || '</td></tr><tr><td>Qt. Disp:</td><td>'
                            || to_char(v_qtestjumbo_prev_disp, '999G999G990D90')
                            || '</td></tr></table>'
                            || utl_tcp.crlf
                );
                v_corpo_email := 'O pedido transmitido nr. ';
                v_corpo_email := concat(v_corpo_email,to_char(p_numpedrca)|| ' ira negativar o estoque e podera ter o seguinte item cortado, verifique se procedem os valores: (O pedido foi registrado normalmente)'|| utl_tcp.crlf|| '<br /><br /><table style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email);
                v_corpo_email := concat(v_corpo_email,'\"><tbody>'|| '<tr><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">Cod. Filial</td><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">'|| to_char(p_codfilial)|| '</td></tr>'|| '<tr><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">Nr. Ped. RCA</td><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">'|| to_char(p_numpedrca)|| '</td></tr>'|| '<tr><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">Rca</td><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">'|| v_rca|| '</td></tr>'|| utl_tcp.crlf|| '<tr><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">Cliente</td><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">'|| v_cliente|| '</td></tr>'|| '<tr><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">Produto</td><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">'|| v_produto|| '</td></tr>'|| utl_tcp.crlf);
                IF v_qtestjumbo_prev_disp < 0 THEN
                    v_corpo_email := concat(v_corpo_email,'<tr><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">Qtde Disp Est Jumbo</td><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,';color:red;\">'|| to_char(v_qtestjumbo_prev_disp, '999G999G990D90')|| '</td></tr>');
                ELSE
                    v_corpo_email := concat(v_corpo_email,'<tr><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">Qtde Disp Est Jumbo</td><td style=\"');
                    v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                    v_corpo_email := concat(v_corpo_email,'\">'|| to_char(v_qtestjumbo_prev_disp, '999G999G990D90')|| '</td></tr>');
                END IF;
                v_corpo_email := concat(v_corpo_email,'<tr><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">Qtde Disp Est Aurora</td><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">'|| to_char(v_qtestaurora, '999G999G990D90')|| '</td></tr>'|| '<tr><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">Qtde Ped. RCA</td><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">'|| to_char(p_qt, '999G999G990D90')|| '</td></tr>'|| '<tr><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">Qtde Resultante Est</td><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,';color:red;\">'|| to_char(v_qtestjumbo_prev_disp + v_qtestaurora - p_qt, '999G999G990D90')|| '</td></tr>'|| utl_tcp.crlf|| '<tr><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">Observacao</td><td style=\"');
                v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
                v_corpo_email := concat(v_corpo_email,'\">');
                v_corpo_email := concat(v_corpo_email,v_obs);
                v_corpo_email := concat(v_corpo_email,'</td></tr>'|| utl_tcp.crlf|| '</tbody></table>'|| concat(utl_tcp.crlf,utl_tcp.crlf));
                v_corpo_email := concat(v_corpo_email,'<br /><br />Para verificar / alterar o email de recebimento do alerta acesse: http://www.jumboalimentos.com.br, acesso restrito, opcao vendas, configuracao vendas.');
                IF v_tem_peixe = true THEN
                    v_email_para := concat(v_email_para,';edson.nunes@jumboalimentos.com.br');
                    v_email_para := replace(lower(v_email_para), ';;', ';');
                ELSE
                    v_email_para := replace(lower(v_email_para), 'edson.nunes@jumboalimentos.com.br', '');
                    v_email_para := replace(lower(v_email_para), ';;', ';');
                    v_email_para := replace(lower(v_email_para), ',', ',');
                END IF;
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email(
                    pr_email_para => v_email_para, 
                    pr_titulo_email => v_titulo_email, 
                    pr_corpo_email => v_corpo_email
                );
                v_existe := 0;
                SELECT
                    COUNT(1)
                    INTO v_existe
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__emailnegprod
                WHERE
                    codprod = p_codprod
                    AND codfilial = p_codfilial;
                IF v_existe = 0 THEN
                    INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__emailnegprod (
                        codfilial,
                        codprod,
                        dtnegativou,
                        negativou
                    ) VALUES (
                        p_codfilial,
                        p_codprod,
                        sysdate,
                        0
                    );
                    COMMIT;
                END IF;
                SELECT
                    negativou
                    INTO v_strtemp1
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__emailnegprod
                WHERE
                    codprod = p_codprod
                    AND codfilial = p_codfilial;
                IF ( nvl(v_strtemp1, 0) = 1 ) THEN
                    v_emails_rcas_filial := obter_emails_rcas_filial(p_codfilial);
                    v_emails_rcas_filial := concat(v_emails_rcas_filial,obter_emails_superv_filial(p_codfilial));
                    v_emails_rcas_filial :=concat(v_emails_rcas_filial,'jumbo.ti@jumboalimentos.com.br');
                    v_corpo_email := 'Caro usuario, comunicamos que neste momento (';
                    v_corpo_email := concat(v_corpo_email,to_char(sysdate, 'dd/mm/yyyy hh24:mi')|| ') o produto de codigo nr. ');
                    v_corpo_email := concat(v_corpo_email,v_produto);
                    v_corpo_email := concat(v_corpo_email,', filial '|| p_codfilial|| ' esta sem estoque.<br /> '|| utl_tcp.crlf);
                    v_corpo_email := concat(v_corpo_email,'Pedidos transmitidos a partir do momento informado acima para este item provavelmente serao cortados se nao houver entrada deste produto ate o seu faturamento. <br /><br /> Obrigado.');
                    IF v_tem_peixe = false THEN
                        v_emails_rcas_filial := replace(lower(v_emails_rcas_filial), 'edson.nunes@jumboalimentos.com.br', '');
                        v_emails_rcas_filial := replace(lower(v_emails_rcas_filial), ';;', ';');
                        v_emails_rcas_filial := replace(lower(v_emails_rcas_filial), ',', ',');
                    END IF;
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email(
                        pr_email_para => v_emails_rcas_filial, 
                        pr_titulo_email => v_titulo_email, 
                        pr_corpo_email => v_corpo_email
                    );
                    UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__emailnegprod
                    SET
                        negativou = 1,
                        envioutodos = 1
                    WHERE
                        codprod = p_codprod
                        AND codfilial = p_codfilial;
                    COMMIT;
                END IF;
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END enviar_alerta_est_neg_item;

    PROCEDURE enviar_alerta_ent_fig_trib (
        p_llog __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__logregenttrib%rowtype
    ) AS
        v_email_para         VARCHAR2(4000) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        v_titulo_email       VARCHAR2(4000) DEFAULT 'JUMBO - ALERTA - DIVERG TRIB ENT ';
        v_corpo_email        VARCHAR2(32767) DEFAULT '';
        numtemp              NUMBER;
        strtemp              VARCHAR2(4000);
        v_css_tab_email      VARCHAR2(32767) DEFAULT NULL;
        v_css_tab_email_td   VARCHAR2(32767) DEFAULT NULL;
        v_css_tab_email_th   VARCHAR2(32767) DEFAULT NULL;
        v_css_dif            VARCHAR2(32767) DEFAULT NULL;
    BEGIN
        v_email_para := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(p_nomeparam => 'enviar_alerta_ent_fig_trib', p_tipoentidade => 'filial', p_codentidade => p_llog.codfilial, p_valor_padrao => v_email_para);
        v_titulo_email := concat(v_titulo_email,'-Filial '|| p_llog.codfilial|| '-PROD '|| p_llog.codprod);
        BEGIN
            SELECT
                descricao
                INTO strtemp
            FROM
                jumbo.pcprodut
            WHERE
                codprod = p_llog.codprod;

        EXCEPTION
            WHEN OTHERS THEN
                strtemp := 'nao encontrado';
                NULL;
        END;
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__', p_owner => '__FNV_GET_NOMESCHEMA__') ) AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_css_tab_email := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email');
            v_css_tab_email_td := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email_td');
            v_css_tab_email_th := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email_th');
            v_corpo_email := 'A entrada transacao nr. ';
            v_corpo_email := concat(v_corpo_email,p_llog.numtransent|| ' entrou com uma divergencia na tributacao, verifique se procedem os valores: (A entrada foi registrada normalmente)'|| utl_tcp.crlf|| '<br /><br /><table style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email);
            v_corpo_email := concat(v_corpo_email,'\">'|| '<thead><tr>'|| '<th style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_th);
            v_corpo_email := concat(v_corpo_email,'\">Campo</th><th style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_th);
            v_corpo_email := concat(v_corpo_email,'\">Valor Entrada</th><th style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_th);
            v_corpo_email := concat(v_corpo_email,'\">Valor Figura</th>'|| '</tr></thead>'|| '<tbody>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Data</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.dtent|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\"></td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Nr. NF</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">' || p_llog.numnota || '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\"></td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Nr. transacao</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.numtransent|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\"></td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Cod. Filial</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.codfilial|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\"></td></tr>' || '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Cod. Produto</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.codprod|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\"></td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Descricao</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">');
            v_corpo_email := concat(v_corpo_email,strtemp);
            v_corpo_email := concat(v_corpo_email,'</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\"></td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Ncm</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.codncmex|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\"></td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Uf Fornec</td><td style=\"');
            v_corpo_email := concat(v_corpo_email, v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.uffornec|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\"></td></tr>'|| '<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Tipo Fornec</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.tipofornec|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\"></td></tr>');
            v_corpo_email := concat(v_corpo_email,'<tr><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Cod Fig. Trib. Ent</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.codfigura|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\"></td></tr>');
            v_css_dif := '';
            IF p_llog.percicmsnf <> p_llog.percicmsfig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Perc ICMS</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percicmsnf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percicmsfig|| '</td></tr>');
            v_css_dif := '';
            IF p_llog.percicmsrednf <> p_llog.percicmsredfig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Perc Red ICMS</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percicmsrednf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percicmsredfig|| '</td></tr>');
            v_css_dif := '';
            IF p_llog.percbaserednf <> p_llog.percbaseredfig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email, v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Perc Red Base ICMS</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percbaserednf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percbaseredfig|| '</td></tr>');
            v_css_dif := '';
            IF p_llog.percicmsdiferidonf <> p_llog.percicmsdiferidofig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Perc ICMS Diferido</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percicmsdiferidonf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percicmsdiferidofig|| '</td></tr>');
            v_css_dif := '';
            IF p_llog.percdescicmsdiferidonf <> p_llog.percdescicmsdiferidofig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Perc Desc ICMS Diferido</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percdescicmsdiferidonf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percdescicmsdiferidofig|| '</td></tr>');
            v_css_dif := '';
            IF p_llog.percicmsresultantenf <> p_llog.percicmsresultantefig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Perc ICMS Resultante</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percicmsresultantenf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email, v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percicmsresultantefig|| '</td></tr>');
            v_css_dif := '';
            IF p_llog.percipinf <> p_llog.percipifig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Perc IPI</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">' || p_llog.percipinf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percipifig|| '</td></tr>');
            v_css_dif := '';
            IF p_llog.aliqicms1nf <> p_llog.aliqicms1fig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Perc Aliq ICMS Int</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.aliqicms1nf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.aliqicms1fig|| '</td></tr>');
            v_css_dif := '';
            IF p_llog.aliqicms2nf <> p_llog.aliqicms2fig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Perc Aliq ICMS Ext</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.aliqicms2nf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.aliqicms2fig|| '</td></tr>');
            v_css_dif := '';
            IF p_llog.percivanf <> p_llog.percivafig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Perc IVA</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percivanf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percivafig|| '</td></tr>');
            v_css_dif := '';
            IF p_llog.codfiscalnf <> p_llog.codfiscalfig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">CFOP Ent</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.codfiscalnf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.codfiscalfig|| '</td></tr>');
            v_css_dif := '';
            IF p_llog.sittributnf <> p_llog.sittributfig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Sit Tribut</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.sittributnf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.sittributfig|| '</td></tr>');
            v_css_dif := '';
            IF p_llog.codstpiscofinsnf <> p_llog.codstpiscofinsfig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Cod Sit Trib PisCofins</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'||p_llog.codstpiscofinsnf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.codstpiscofinsfig|| '</td></tr>');
            v_css_dif := '';
            IF p_llog.percpisnf <> p_llog.percpisfig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Perc Pis</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percpisnf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.percpisfig|| '</td></tr>');
            v_css_dif := '';
            IF p_llog.perccofinsnf <> p_llog.perccofinsfig THEN
                v_css_dif := 'color:red;font-weight:bolder;';
            END IF;
            v_corpo_email := concat(v_corpo_email,'<tr style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_dif);
            v_corpo_email := concat(v_corpo_email,'\"><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">Perc Cofins</td><td style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.perccofinsnf|| '</td><td style=\"');
            v_corpo_email := concat(v_corpo_email, v_css_tab_email_td);
            v_corpo_email := concat(v_corpo_email,'\">'|| p_llog.perccofinsfig|| '</td></tr>'|| '</tbody></table>'|| concat(utl_tcp.crlf,utl_tcp.crlf));
            v_corpo_email := concat(v_corpo_email,'<br /><br />Para verificar / alterar a parametrizacao do email de recebimento do alerta acesse: http://www.jumboalimentos.com.br, acesso restrito, opcao compras, configuracao compras.');
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email(
                pr_email_para => v_email_para, 
                pr_titulo_email => v_titulo_email, 
                pr_corpo_email=> v_corpo_email
            );
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END enviar_alerta_ent_fig_trib;    /*cria uma coluna com 1 linhas(a linha ja devem existir) no objeto tabela(posicionado na ultima linha)*/

    PROCEDURE criar_col_lin_tab_alerta (
        pv_tabela         IN OUT ttabela,
        p_valor           VARCHAR2,
        p_abertura_td     VARCHAR2,
        p_fechamento_td   VARCHAR2
    ) IS
    BEGIN
        pv_tabela.linhas(pv_tabela.linhas.last).celulas.extend;
        pv_tabela.linhas(pv_tabela.linhas.last).celulas(pv_tabela.linhas(pv_tabela.linhas.last).celulas.last) := concat(concat(p_abertura_td,p_valor),p_fechamento_td);
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END criar_col_lin_tab_alerta;

    PROCEDURE criar_col_2lin_tab_alerta (
        pv_tabela           IN OUT ttabela,
        p_valor1            VARCHAR2,
        p_valor2            VARCHAR2,
        p_abertura_td_num   VARCHAR2,
        p_fechamento_td     VARCHAR2
    ) IS
        v_abertura_td VARCHAR2(4000) DEFAULT NULL;
    BEGIN
        IF pv_tabela.linhas(pv_tabela.linhas.last - 1) IS NULL THEN
            pv_tabela.linhas(pv_tabela.linhas.last - 1) := tlinhatabhtml();
        END IF;
        pv_tabela.linhas(pv_tabela.linhas.last - 1).celulas.extend;
        IF pv_tabela.linhas(pv_tabela.linhas.last) IS NULL THEN
            pv_tabela.linhas(pv_tabela.linhas.last) := tlinhatabhtml();
        END IF;
        pv_tabela.linhas(pv_tabela.linhas.last).celulas.extend;
        v_abertura_td := p_abertura_td_num;
        pv_tabela.linhas(pv_tabela.linhas.last - 1).celulas(pv_tabela.linhas(pv_tabela.linhas.last - 1).celulas.last) := concat(concat(v_abertura_td,nvl(p_valor1 , 0)),p_fechamento_td);
        pv_tabela.linhas(pv_tabela.linhas.last).celulas(pv_tabela.linhas(pv_tabela.linhas.last).celulas.last) := concat(concat(v_abertura_td,nvl(p_valor2, 0)),p_fechamento_td);
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END criar_col_2lin_tab_alerta;    
    
    PROCEDURE criar_col_2lin_tab_alerta (
        pv_tabela            IN OUT ttabela,
        p_valor1             NUMBER,
        p_valor2             NUMBER,
        p_abertura_td_num    VARCHAR2,
        p_fechamento_td      VARCHAR2,
        p_forma_comparacao   NUMBER
    ) IS
        v_tem_dif       BOOLEAN DEFAULT false;
        v_abertura_td   VARCHAR2(4000) DEFAULT NULL;
    BEGIN
        IF pv_tabela.linhas(pv_tabela.linhas.last - 1) IS NULL THEN
            pv_tabela.linhas(pv_tabela.linhas.last - 1) := tlinhatabhtml();
        END IF;
        pv_tabela.linhas(pv_tabela.linhas.last - 1).celulas.extend;
        IF pv_tabela.linhas(pv_tabela.linhas.last) IS NULL THEN
            pv_tabela.linhas(pv_tabela.linhas.last) := tlinhatabhtml();
        END IF;
        pv_tabela.linhas(pv_tabela.linhas.last).celulas.extend;
        v_tem_dif := false;
        v_abertura_td := p_abertura_td_num;
        CASE
            WHEN p_forma_comparacao = 1 THEN
                IF nvl(p_valor1, 0) <> nvl(p_valor2, 0) THEN
                    v_tem_dif := true;
                END IF;
            WHEN p_forma_comparacao = 2 THEN
                IF p_valor1 NOT BETWEEN p_valor2 *.95 AND p_valor2 * 1.05 THEN
                    v_tem_dif := true;
                END IF;
            ELSE
                v_tem_dif := false;
        END CASE;
        IF v_tem_dif = true THEN
            v_abertura_td := replace(p_abertura_td_num, 'style=\"', 'style=\"background-color:red;color:yellow;');
        END IF;
        pv_tabela.linhas(pv_tabela.linhas.last - 1).celulas(pv_tabela.linhas(pv_tabela.linhas.last - 1).celulas.last) := concat(concat(v_abertura_td,nvl(p_valor1 , 0)),p_fechamento_td);
        pv_tabela.linhas(pv_tabela.linhas.last).celulas(pv_tabela.linhas(pv_tabela.linhas.last).celulas.last) := concat(v_abertura_td,concat(nvl(p_valor2, 0),p_fechamento_td));
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END criar_col_2lin_tab_alerta;    

    PROCEDURE atribuir_dados_trib_logent (
        p_llog IN OUT __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__loganaliseent%rowtype
    ) IS
        v_existe      NUMBER DEFAULT 0;
        v_lfig        jumbo.pctribfigura%rowtype;
        v_lexpiscof   jumbo.pcexpiscofinsitem%rowtype;
    BEGIN
        v_existe := 0;
        SELECT
            COUNT(1)
            INTO v_existe
        FROM
            jumbo.pctribentrada te
        WHERE
            te.codfilial = p_llog.codfilial
            AND te.ncm IS NOT NULL
            AND te.ncm = p_llog.codncmex
            AND te.uforigem = p_llog.uffornec
            AND te.tipofornec = p_llog.tipofornec
            AND ROWNUM <= 1;
        IF v_existe > 0 THEN
            p_llog.observacoes := concat(p_llog.observacoes,' ' || ' 7 ');
            p_llog.codfigura := NULL;
            SELECT DISTINCT
                te.codfigura,
                te.codexcecaopiscofins
            INTO
                p_llog.codfigura,
                p_llog.codexcecaopiscofinsfig
            FROM
                jumbo.pctribentrada te
            WHERE
                te.codfilial = p_llog.codfilial
                AND te.ncm IS NOT NULL
                AND te.ncm = p_llog.codncmex
                AND te.uforigem = p_llog.uffornec
                AND te.tipofornec = p_llog.tipofornec
                AND ROWNUM <= 1;
            IF p_llog.codfigura IS NOT NULL THEN
                p_llog.observacoes := concat(p_llog.observacoes,' ' || ' 8 ');
                v_existe := 0;
                SELECT
                    COUNT(1)
                    INTO v_existe
                FROM
                    jumbo.pctribfigura tf
                WHERE
                    tf.codfigura IS NOT NULL
                    AND tf.codfigura = p_llog.codfigura;
                IF v_existe > 0 THEN
                    p_llog.observacoes := concat(p_llog.observacoes, ' ' || ' 9 ');
                    SELECT
                        tf.*
                        INTO v_lfig
                    FROM
                        jumbo.pctribfigura tf
                    WHERE
                        tf.codfigura IS NOT NULL
                        AND tf.codfigura = p_llog.codfigura
                        AND ROWNUM <= 1;
                    p_llog.percicmsfig := v_lfig.percicm;
                    p_llog.percicmsredfig := v_lfig.percicmred;
                    p_llog.percbaseredfig := v_lfig.percbaseredent;
                    p_llog.percicmsdiferidofig := v_lfig.percicmsdiferido;
                    p_llog.percdescicmsdiferidofig := v_lfig.percdescicmsdif;
                    p_llog.percicmsresultantefig := round(v_lfig.percicm);
                    p_llog.perccredicmsfig := v_lfig.percredicms;
                    IF nvl(p_llog.percicmsredfig, 0) > 0 THEN
                        p_llog.percicmsresultantefig := round(p_llog.percicmsredfig);
                        p_llog.perccredicmsfig := round(p_llog.percicmsredfig);
                    ELSE
                        IF nvl(p_llog.percbaseredfig, 0) > 0 THEN
                            p_llog.percicmsresultantefig := round(p_llog.percicmsresultantefig *(1 -(p_llog.percbaseredfig / 100)));
                            p_llog.perccredicmsfig := round(p_llog.perccredicmsfig *(1 -(p_llog.percbaseredfig / 100)));
                        END IF;
                    END IF;
                    IF nvl(p_llog.percdescicmsdiferidofig, 0) > 0 THEN
                        p_llog.percicmsresultantefig := round(p_llog.percicmsresultantefig *(1 -(p_llog.percdescicmsdiferidofig / 100)));
                        p_llog.perccredicmsfig := round(p_llog.perccredicmsfig *(1 -(p_llog.percdescicmsdiferidofig / 100)));
                    END IF;
                    p_llog.percipifig := v_lfig.peripi;
                    p_llog.aliqicms1fig := v_lfig.percaliqint;
                    p_llog.aliqicms2fig := v_lfig.percaliqext;
                    p_llog.ivafig := v_lfig.perciva;
                    p_llog.percivafig := v_lfig.perciva;
                    IF ( nvl(p_llog.ivafig, 0) > 0 ) THEN
                        p_llog.baseicmsstfig := ( p_llog.precoent - nvl(p_llog.vlicmsstnf, 0) ) * ( 1 + ( nvl(p_llog.ivafig, 0) / 100 ) );
                        IF ( nvl(v_lfig.redbaseiva, 0) > 0 ) THEN
                            p_llog.baseicmsstfig := p_llog.baseicmsstfig * v_lfig.redbaseiva / 100;
                        END IF;
                        p_llog.vlicmsstfig := nvl(p_llog.baseicmsstfig, 0) * nvl(p_llog.aliqicms1fig, 0) / 100;
                    ELSE
                        p_llog.baseicmsstfig := 0;
                        p_llog.vlicmsstfig := 0;
                    END IF;
                    IF ( nvl(p_llog.vlicmsstfig, 0) > 0 ) THEN
                        IF ( nvl(v_lfig.redbasealiqext, 0) > 0 ) THEN
                            p_llog.vlicmsstfig := nvl(p_llog.vlicmsstfig, 0) - ( ( ( p_llog.precoent - nvl(p_llog.vlicmsstnf, 0) ) * nvl(p_llog.aliqicms2fig, 0) / 100 ) * v_lfig.redbasealiqext / 100 );
                        ELSE
                            p_llog.vlicmsstfig := nvl(p_llog.vlicmsstfig, 0) - ( ( p_llog.precoent - nvl(p_llog.vlicmsstnf, 0) ) * nvl(p_llog.aliqicms2fig, 0) / 100 );
                        END IF;
                    END IF;
                    p_llog.codfiscalfig := v_lfig.codfiscalent;
                    p_llog.sittributfig := v_lfig.sittribut;
                    p_llog.codstpiscofinsfig := v_lfig.codsittribpiscofins;
                    p_llog.percpisfig := v_lfig.perpis;
                    p_llog.perccofinsfig := v_lfig.percofins;
                    IF nvl(p_llog.vlst, 0) > 0 THEN
                        p_llog.perccredicmsfig := 0;
                    END IF;
                    IF nvl(p_llog.codoper, '') = 'EB' THEN
                        p_llog.codfiscalfig := v_lfig.codfiscalentbonific;
                    END IF;
                    IF p_llog.codoper = 'ET' THEN
                        p_llog.codfiscalfig := v_lfig.codfiscalenttransf;
                    END IF;
                    IF ( p_llog.codexcecaopiscofinsfig IS NOT NULL ) THEN
                        v_existe := 0;
                        SELECT
                            COUNT(1)
                            INTO v_existe
                        FROM
                            jumbo.pcexpiscofinsitem pe
                        WHERE
                            pe.codexcecao = p_llog.codexcecaopiscofinsfig
                            AND pe.codfiscal = p_llog.codfiscalfig;
                        IF v_existe > 0 THEN
                            SELECT
                                pe.*
                                INTO v_lexpiscof
                            FROM
                                jumbo.pcexpiscofinsitem pe
                            WHERE
                                pe.codexcecao = p_llog.codexcecaopiscofinsfig
                                AND pe.codfiscal = p_llog.codfiscalfig;
                            p_llog.codstpiscofinsfig := nvl(v_lexpiscof.codsittribpiscofins, p_llog.codstpiscofinsfig);
                            p_llog.percpisfig := nvl(v_lexpiscof.perpis, 0);
                            p_llog.perccofinsfig := nvl(v_lexpiscof.percofins, 0);
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END atribuir_dados_trib_logent;    

    PROCEDURE veif_variacao_preco (
        p_llog IN OUT __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__loganaliseent%rowtype
    ) IS
        v_percvarmin   NUMBER DEFAULT 0;
        v_percvarmax   NUMBER DEFAULT 0;
    BEGIN
        p_llog.temdivergenciapreco := 0;
        BEGIN
            v_percvarmin := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param('percentual_dif_alert_pcompra_min', 'filial', nvl(p_llog.codfilial, 1));
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
        BEGIN
            v_percvarmax := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
                'percentual_dif_alert_pcompra_max', 
                'filial', 
                nvl(p_llog.codfilial, 1)
            );
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
        IF nvl(p_llog.codfiscalnf, 0) NOT IN (
            1910/*BONIFICACAO*/
        ) AND p_llog.precoent NOT BETWEEN ( p_llog.precoultent * ( 1 + ( v_percvarmin / 100 ) ) ) AND ( p_llog.precoultent * ( 1 +
        ( v_percvarmax / 100 ) ) ) AND p_llog.codoper <> 'EB' THEN
            p_llog.temdivergenciapreco := 1;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END;    
    /*verifica se teve variacao de preco entre a entrada atual e a tabela da aurora*/
    PROCEDURE veif_variacao_preco_aurora (
        p_llog IN OUT __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__loganaliseent%rowtype
    ) IS
        v_existe       NUMBER DEFAULT 0;
        v_pervar_aur   NUMBER DEFAULT 1.02;
    BEGIN
        p_llog.fornecedoraurora := 0;
        p_llog.temdivergenciaprecotabfornec := 0;
        IF p_llog.fornecedor LIKE '%AURO%' AND p_llog.codoper <> 'EB' THEN
            p_llog.fornecedoraurora := 1;
            p_llog.precotaborigem := 0;
            v_existe := 0;
            SELECT
                COUNT(1)
                INTO v_existe
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem a
            WHERE
                a.codfilialorigem =
                    CASE
                        WHEN p_llog.codfilial = '3' THEN
                            '1'
                        ELSE
                            to_char(p_llog.codfilial)
                    END
                AND a.codprodorigem = p_llog.codprod;
            IF v_existe > 0 THEN
                SELECT
                    a.pcompra1 * ( 1 - ( NVL(a.percdescpcompra2,0) / 100 ) ) AS pcompra
                    INTO p_llog.precotaborigem
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem a
                WHERE
                    a.codfilialorigem =
                        CASE
                            WHEN p_llog.codfilial = '3' THEN
                                '1'
                            ELSE
                                to_char(p_llog.codfilial)
                        END
                    AND a.codprodorigem = p_llog.codprod;
                IF nvl(p_llog.codfiscalnf, 0) NOT IN (
                    1910/*BONIFICACAO*/
                ) AND ( trunc(p_llog.precotaborigem, 2) * v_pervar_aur ) < trunc(p_llog.precoent - nvl(p_llog.vlst, 0), 2) AND p_llog
                .codoper <> 'EB' THEN
                    p_llog.temdivergenciaprecotabfornec := 1;
                END IF;
            ELSE
                IF nvl(p_llog.codfiscalnf, 0) NOT IN (
                    1910/*BONIFICACAO*/
                ) THEN
                    p_llog.temdivergenciaprecotabfornec := 1;
                END IF;
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END;    /*chamado pela trigger __FNV_GET_PREFIXOBJECTSDB__trg_alert_ent_nf(on insert pcnfent), envia alerta notificando se a entrada esta de acordo com a tributacao*/
    PROCEDURE enviar_alerta_ent (
        p_llog IN OUT __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__loganaliseent%rowtype
    ) AS
        /*PRAGMA AUTONOMOUS_TRANSACTION;nao pode ser pragma pq gera erro ao ainda nao existir o cabecalho ou os itens*/
        v_email_para             VARCHAR2(4000) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        v_email_para_rcas        VARCHAR2(32767) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        v_titulo_email           VARCHAR2(4000) DEFAULT 'JUMBO - ENTRADA';
        v_titulo_email_rcas      VARCHAR2(4000) DEFAULT 'JUMBO - ALERTA - ENTRADA DE PRODUTOS';
        v_corpo_email            CLOB DEFAULT '';
        v_corpo_email_rcas       CLOB DEFAULT '';
        numtemp                  NUMBER;
        strtemp                  VARCHAR2(4000);
        v_css_tab_email          VARCHAR2(32767) DEFAULT NULL;
        v_css_tab_email_td       VARCHAR2(32767) DEFAULT NULL;
        v_css_tab_email_th       VARCHAR2(32767) DEFAULT NULL;
        v_css_dif                VARCHAR2(32767) DEFAULT NULL;
        v_divergencia_trib       BOOLEAN DEFAULT false;
        v_divergencia_preco      BOOLEAN DEFAULT false;
        v_existe                 NUMBER DEFAULT 0;
        v_percvarmin             NUMBER DEFAULT 0;
        v_percvarmax             NUMBER DEFAULT 0;
        v_contador_itens         NUMBER DEFAULT 0;
        v_lmov                   jumbo.pcmov%rowtype;
        v_lfig                   jumbo.pctribfigura%rowtype;
        v_lfigtransf             jumbo.pctribut%rowtype;
        v_lexpiscof              jumbo.pcexpiscofinsitem%rowtype;
        v_titulo_tab             CLOB DEFAULT '';
        v_titulo_tab_rcas        CLOB DEFAULT '';
        v_css_num                VARCHAR2(20) DEFAULT '';
        v_abertura_td            VARCHAR2(500) DEFAULT '';
        v_fecha_abert_td         VARCHAR2(10) DEFAULT '';
        v_fechamento_td          VARCHAR2(10) DEFAULT '';
        v_abertura_td_num        VARCHAR2(500) DEFAULT '';
        v_abertura_td_num_rsp2   VARCHAR2(500) DEFAULT '';
        v_abertura_td_rsp2       VARCHAR2(500) DEFAULT '';
        v_divergencia_aurora     BOOLEAN DEFAULT false;
        v_fornecedor_aurora      BOOLEAN DEFAULT false;
        v_tabela                 ttabela;
        v_tabela_rcas            ttabela;
        v_enviar_email_rcas      BOOLEAN DEFAULT false;
        v_tem_peixe              BOOLEAN DEFAULT false;
    BEGIN
        v_css_num := 'text-align:right;';
        v_tabela := ttabela();
        v_tabela_rcas := ttabela();
        v_abertura_td := '<td style=\"';
        v_fecha_abert_td := '\">';
        v_fechamento_td := '</td>';
        v_contador_itens := 0;
        v_divergencia_trib := false;
        v_divergencia_preco := false;
        v_css_tab_email := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email');
        v_css_tab_email_td := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email_td');
        v_css_tab_email_th := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email_th');
        v_abertura_td := concat(v_abertura_td,v_css_tab_email_td);
        v_abertura_td_num := v_abertura_td;
        v_abertura_td_rsp2 := concat(v_abertura_td,'\" rowspan=\"2\">');
        v_abertura_td := concat(v_abertura_td,v_fecha_abert_td);
        v_abertura_td_num := concat(v_abertura_td_num,concat(';',v_css_num));
        v_abertura_td_num_rsp2 := concat(v_abertura_td_num,'\" rowspan=\"2\">');
        v_abertura_td_num := concat(v_abertura_td_num,v_fecha_abert_td);
        v_email_para_rcas := obter_emails_rcas_filial(p_llog.codfilial);
        v_email_para_rcas := concat(v_email_para_rcas,obter_emails_superv_filial(p_llog.codfilial));
        FOR li IN (
            SELECT
                pcmov.*,
                p.codncmex,
                p.descricao AS descricao_prod,
                nvl(e.valorultent, 0) AS vlultent,
                f.fornecedor,
                mc.vlicms
            FROM
                jumbo.pcmov
                JOIN jumbo.pcprodut      p ON ( p.codprod = pcmov.codprod )
                LEFT OUTER JOIN jumbo.pcmovcomple   mc ON ( mc.numtransitem = pcmov.numtransitem )
                LEFT OUTER JOIN jumbo.pcest         e ON ( e.codfilial = nvl(p_llog.codfilial, 1)
                                                    AND e.codprod = pcmov.codprod )
                LEFT OUTER JOIN jumbo.pcfornec      f ON ( f.codfornec = p.codfornec )
            WHERE
                pcmov.numtransent = p_llog.numtransent
                AND pcmov.codoper IN (
                    'E',
                    'EB',
                    'ER',
                    'ET'
                )
                AND nvl(pcmov.qt, 0) > 0
            ORDER BY
                pcmov.codprod
        ) LOOP
            IF nvl(li.codfiscal, 0) IN (
                1906
            ) THEN
                EXIT;
            END IF;
            v_contador_itens := v_contador_itens + 1;
            p_llog.dtent := to_date(to_char(li.dtmov, 'dd/mm/yyyy')
                                    || ' '
                                    || nvl(li.horalanc, '00')
                                    || ':'
                                    || nvl(li.minutolanc, '00')
                                    || ':00', 'dd/mm/yyyy hh24:mi:ss');
            p_llog.codfilial := coalesce(p_llog.codfilial, li.codfilial);
            p_llog.codprod := li.codprod;
            p_llog.codoper := li.codoper;
            p_llog.descricao := coalesce(li.descricao_prod, 'em branco');
            p_llog.codncmex := li.codncmex;
            p_llog.numnota := li.numnota;
            p_llog.numtransent := li.numtransent;
            p_llog.numtransitem := li.numtransitem;
            p_llog.qt := li.qt;
            p_llog.precoent := li.punit;
            p_llog.precoultent := li.vlultent;
            p_llog.vlst := nvl(li.st, 0);
            p_llog.codfornec := coalesce(p_llog.codfornec, li.codfornec);
            p_llog.fornecedor := coalesce(p_llog.fornecedor, li.fornecedor);
            p_llog.rotinalanc := coalesce(p_llog.rotinalanc, li.rotinalanc);
            p_llog.equiplanc := coalesce(p_llog.equiplanc, li.equiplanc);
            p_llog.funclanc := coalesce(p_llog.funclanc, li.funclanc);
            p_llog.percicmsnf := li.percicm;
            p_llog.percicmsrednf := round(li.percicmred);
            p_llog.percbaserednf := li.percbasered;
            p_llog.percicmsdiferidonf := li.percicmsdiferido;
            p_llog.percdescicmsdiferidonf := li.percdescicmsdif;
            p_llog.percicmsresultantenf := round(nvl(li.percicm, 0));
            p_llog.precoent := li.punit;
            p_llog.perccredicmsnf := li.percredicms;
            IF nvl(p_llog.percicmsrednf, 0) > 0 THEN
                p_llog.percicmsresultantenf := p_llog.percicmsrednf;
                p_llog.perccredicmsnf := p_llog.percicmsrednf;
            ELSE
                IF nvl(p_llog.percbaserednf, 0) > 0 THEN
                    p_llog.percicmsresultantenf := round(p_llog.percicmsresultantenf *(1 -(p_llog.percbaserednf / 100)));
                    p_llog.perccredicmsnf := round(p_llog.perccredicmsnf *(1 -(p_llog.percbaserednf / 100)));
                END IF;
            END IF;
            IF nvl(p_llog.percdescicmsdiferidonf, 0) > 0 THEN
                p_llog.percicmsresultantenf := round(p_llog.percicmsresultantenf *(1 -(p_llog.percdescicmsdiferidonf / 100)));
                p_llog.perccredicmsnf := round(p_llog.perccredicmsnf *(1 -(p_llog.percdescicmsdiferidonf / 100)));
            END IF;
            p_llog.percipinf := li.percipi;
            p_llog.aliqicms1nf := li.aliqicms1;
            p_llog.aliqicms2nf := li.aliqicms2;
            p_llog.ivanf := li.iva;
            p_llog.percivanf := li.perciva;
            p_llog.baseicmsstnf := round(nvl(li.baseicst, 0), 2);
            p_llog.vlicmsstnf := round(nvl(li.st, 0), 2);
            p_llog.codfiscalnf := li.codfiscal;
            p_llog.sittributnf := li.sittribut;
            p_llog.codstpiscofinsnf := li.codsittribpiscofins;
            p_llog.percpisnf := li.perpis;
            p_llog.perccofinsnf := li.percofins;
            p_llog.vlicmsnf := li.vlicms;
            IF nvl(p_llog.vlst, 0) > 0 THEN
                p_llog.perccredicmsnf := 0;
            END IF;
            IF ( nvl(li.perciva, 0) = 0 ) THEN
                IF ( nvl(li.baseicst, 0) > 0 ) THEN
                    p_llog.ivanf := round((li.baseicst - CASE
                        WHEN nvl(li.baseicms, 0) = 0 THEN
                            li.punit
                        ELSE li.baseicms
                    END) /
                        CASE
                            WHEN nvl(li.baseicms, 0) = 0 THEN
                                li.punit
                            ELSE li.baseicms
                        END
                    * 100, 2);
                    p_llog.percivanf := p_llog.ivanf;
                END IF;
            END IF;
            p_llog.observacoes := 'na procedure enviar_alerta_ent ';
            p_llog.observacoes := concat(p_llog.observacoes,' '|| ' 1 ');
            v_existe := 0;
            p_llog.uffornec := nvl(trim(replace(nvl(p_llog.uffornec, ''), ' ', '')), trim(replace(nvl(li.uffornec, ''), ' ', '')));
            p_llog.observacoes := concat(p_llog.observacoes,' v_uffornec1: |'|| p_llog.uffornec|| '|'|| length(trim(nvl(p_llog.uffornec, '')))|| '|'|| length(p_llog.uffornec)|| '|');
            IF p_llog.uffornec IS NULL THEN
                p_llog.observacoes := concat(p_llog.observacoes ,' eh nulo ');
            ELSE
                p_llog.observacoes := concat(p_llog.observacoes,' nao eh nulo ');
            END IF;        
            /*encontra os dados de uf e tipo do fornecedor, quando nao vem no registro de inclusao da pcmov*/
            IF ( length(trim(nvl(p_llog.uffornec, ''))) = 0 ) OR ( p_llog.uffornec IS NULL ) THEN
                p_llog.observacoes := concat(p_llog.observacoes,' '|| ' 2 ');
                v_existe := 0;
                SELECT
                    COUNT(1)
                INTO v_existe
                FROM
                    jumbo.pcfornec f
                WHERE
                    f.codfornec = nvl(p_llog.codfornec, li.codfornec);
                IF v_existe > 0 THEN
                    p_llog.observacoes := concat(p_llog.observacoes,' '|| ' 5 ');
                    SELECT
                        f.estado,
                        f.tipofornec,
                        f.fornecedor
                    INTO
                        p_llog.uffornec,
                        p_llog.tipofornec,
                        p_llog.fornecedor
                    FROM
                        jumbo.pcfornec f
                    WHERE
                        f.codfornec = nvl(p_llog.codfornec, li.codfornec)
                        AND ROWNUM <= 1;
                END IF;
            END IF;
            p_llog.observacoes := concat(p_llog.observacoes,' '
                                    || ' 6 '
                                    || ' v_uffornec: '
                                    || p_llog.uffornec
                                    || ' vtipofornec: '
                                    || p_llog.tipofornec
                                    || ' codncmex: '
                                    || p_llog.codncmex
                                    || ' codfilial: '
                                    || li.codfilial
                                    || ' ');
            IF p_llog.codoper = 'ET' THEN
                p_llog.codfigura := li.codst; /*transferencia usa figura da saida da origem*/
                IF p_llog.codfigura IS NOT NULL THEN
                    v_existe := 0;
                    SELECT
                        COUNT(1)
                    INTO v_existe
                    FROM
                        jumbo.pctribut te
                    WHERE
                        te.codst = p_llog.codfigura;
                    IF v_existe > 0 THEN
                        p_llog.observacoes := concat(p_llog.observacoes,' '|| ' 7 ');
                        v_existe := 0;
                        p_llog.observacoes := concat(p_llog.observacoes,' '|| ' 9 ');
                        SELECT
                            tf.*
                        INTO v_lfigtransf
                        FROM
                            jumbo.pctribut tf
                        WHERE
                            tf.codst = p_llog.codfigura;
                        p_llog.percicmsfig := v_lfigtransf.codicmtransf;
                        p_llog.percicmsredfig := v_lfigtransf.codicmtransf;
                        p_llog.percbaseredfig := v_lfigtransf.perbaseredtransfent;
                        p_llog.percicmsdiferidofig := v_lfigtransf.perdiferencialtransf;
                        p_llog.percicmsresultantefig := round(v_lfigtransf.codicmtransf);
                        IF nvl(p_llog.percbaseredfig, 0) > 0 THEN
                            p_llog.percicmsresultantefig := round(p_llog.percicmsresultantefig *(p_llog.percbaseredfig / 100));
                        END IF;
                        IF nvl(p_llog.percdescicmsdiferidofig, 0) > 0 THEN
                            p_llog.percicmsresultantefig := round(p_llog.percicmsresultantefig *(1 -(p_llog.percdescicmsdiferidofig
                            / 100)));
                        END IF;
                        p_llog.aliqicms1fig := v_lfigtransf.aliqicms1transf;
                        p_llog.aliqicms2fig := v_lfigtransf.aliqicms2transf;
                        p_llog.ivafig := v_lfigtransf.ivatransf;
                        p_llog.percivafig := v_lfigtransf.ivatransf;
                        IF ( nvl(p_llog.ivafig, 0) > 0 ) THEN
                            p_llog.baseicmsstfig := ( p_llog.precoent - nvl(p_llog.vlicmsstnf, 0) ) * ( 1 + ( nvl(p_llog.ivafig, 0
                            ) / 100 ) );
                            p_llog.vlicmsstfig := nvl(p_llog.baseicmsstfig, 0) * nvl(p_llog.aliqicms1fig, 0) / 100;
                        ELSE
                            p_llog.baseicmsstfig := 0;
                            p_llog.vlicmsstfig := 0;
                        END IF;
                        IF p_llog.codfilial = 3 THEN
                            p_llog.codfiscalfig := v_lfigtransf.codfiscaltransfentinter;
                        ELSE
                            p_llog.codfiscalfig := v_lfigtransf.codfiscaltransfent;
                        END IF;
                        p_llog.sittributfig := v_lfigtransf.sittributtransfent;
                        v_existe := 0;
                        SELECT
                            COUNT(1)
                        INTO v_existe
                        FROM
                            jumbo.pcmov m
                        WHERE
                            m.numtransvenda = p_llog.numtransvendaorig
                            AND m.codprod = p_llog.codprod
                            AND m.dtcancel IS NULL;
                        IF v_existe > 0 THEN
                            v_existe := 0;
                            SELECT
                                *
                            INTO v_lmov
                            FROM
                                jumbo.pcmov m
                            WHERE
                                m.numtransvenda = p_llog.numtransvendaorig
                                AND m.codprod = p_llog.codprod
                                AND m.dtcancel IS NULL;
                            p_llog.codstpiscofinsfig := v_lmov.codsittribpiscofins;
                            p_llog.percpisfig := v_lmov.perpis;
                            p_llog.perccofinsfig := v_lmov.percofins;
                        END IF;
                        IF ( p_llog.codexcecaopiscofinsfig IS NOT NULL ) THEN
                            v_existe := 0;
                            SELECT
                                COUNT(1)
                            INTO v_existe
                            FROM
                                jumbo.pcexpiscofinsitem pe
                            WHERE
                                pe.codexcecao = p_llog.codexcecaopiscofinsfig
                                AND pe.codfiscal = p_llog.codfiscalfig;
                            IF v_existe > 0 THEN
                                SELECT
                                    pe.*
                                INTO v_lexpiscof
                                FROM
                                    jumbo.pcexpiscofinsitem pe
                                WHERE
                                    pe.codexcecao = p_llog.codexcecaopiscofinsfig
                                    AND pe.codfiscal = p_llog.codfiscalfig;
                                p_llog.codstpiscofinsfig := nvl(v_lexpiscof.codsittribpiscofins, p_llog.codstpiscofinsfig);
                                p_llog.percpisfig := nvl(v_lexpiscof.perpis, 0);
                                p_llog.perccofinsfig := nvl(v_lexpiscof.percofins, 0);
                            END IF;
                        END IF;
                        IF ( p_llog.percicmsresultantenf <> p_llog.percicmsresultantefig ) OR ( p_llog.percipinf <> p_llog.percipifig
                        ) OR ( p_llog.aliqicms1nf <> p_llog.aliqicms1fig ) OR ( p_llog.aliqicms2nf <> p_llog.aliqicms2fig ) OR ( p_llog
                        .percivanf <> p_llog.percivafig ) OR ( p_llog.codfiscalnf <> p_llog.codfiscalfig ) OR ( p_llog.sittributnf
                        <> p_llog.sittributfig ) OR ( p_llog.codstpiscofinsnf <> p_llog.codstpiscofinsfig ) OR ( p_llog.percpisnf
                        <> p_llog.percpisfig ) OR ( p_llog.perccofinsnf <> p_llog.perccofinsfig ) OR ( p_llog.baseicmsstnf NOT BETWEEN
                        p_llog.baseicmsstfig *.95 AND p_llog.baseicmsstfig * 1.05 ) OR ( p_llog.vlicmsstnf NOT BETWEEN p_llog.vlicmsstfig
                        *.95 AND p_llog.vlicmsstfig * 1.05 ) THEN
                            p_llog.observacoes := concat(p_llog.observacoes,' '|| ' 10 ');
                            v_divergencia_trib := true;
                            p_llog.temdivergenciatrib := 1;
                        END IF;
                    ELSE /* nao encontrou a figura com os dados da entrada*/
                        p_llog.observacoes := concat(p_llog.observacoes,' '|| ' 12 ');
                        v_divergencia_trib := true;
                        p_llog.temdivergenciatrib := 1;
                    END IF;
                ELSE /* nao v_existe figura com os dados da entrada*/
                    p_llog.observacoes := concat(p_llog.observacoes,' '|| ' 13 ');
                    v_divergencia_trib := true;
                    p_llog.temdivergenciatrib := 1;
                END IF;
            ELSE
                p_llog.codfigura := NULL;
                atribuir_dados_trib_logent(p_llog);
                IF nvl(p_llog.codfigura, -1) > -1 THEN
                    IF ( p_llog.percicmsresultantenf <> p_llog.percicmsresultantefig ) OR ( p_llog.percipinf <> p_llog.percipifig
                    ) OR ( p_llog.aliqicms1nf <> p_llog.aliqicms1fig ) OR ( p_llog.aliqicms2nf <> p_llog.aliqicms2fig ) OR ( p_llog
                    .percivanf <> p_llog.percivafig ) OR ( p_llog.codfiscalnf <> p_llog.codfiscalfig ) OR ( p_llog.sittributnf <>
                    p_llog.sittributfig ) OR ( p_llog.codstpiscofinsnf <> p_llog.codstpiscofinsfig ) OR ( p_llog.percpisnf <> p_llog
                    .percpisfig ) OR ( p_llog.perccofinsnf <> p_llog.perccofinsfig ) OR ( p_llog.baseicmsstnf NOT BETWEEN p_llog.
                    baseicmsstfig *.95 AND p_llog.baseicmsstfig * 1.05 ) OR ( p_llog.vlicmsstnf NOT BETWEEN p_llog.vlicmsstfig *.95 AND p_llog
                    .vlicmsstfig * 1.05 ) THEN
                        p_llog.observacoes := concat(p_llog.observacoes,' '|| ' 10 ');
                        v_divergencia_trib := true;
                        p_llog.temdivergenciatrib := 1;
                    END IF;
                ELSE /*figura inexistente*/
                    p_llog.observacoes := concat(p_llog.observacoes,' '|| ' 11 ');
                    v_divergencia_trib := true;
                    p_llog.temdivergenciatrib := 1;
                END IF;
            END IF;
            veif_variacao_preco(p_llog);
            IF nvl(p_llog.temdivergenciapreco, 0) > 0 THEN
                v_divergencia_preco := true;
            END IF;
            veif_variacao_preco_aurora(p_llog);
            IF nvl(p_llog.temdivergenciaprecotabfornec, 0) > 0 THEN
                v_divergencia_aurora := true;
            END IF;
            IF nvl(p_llog.fornecedoraurora, 0) > 0 THEN
                v_fornecedor_aurora := true;
            END IF;
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__loganaliseent VALUES p_llog;
            IF ( NOT ( inserting OR deleting OR updating ) ) THEN
                COMMIT;
            END IF;            
            /*atualiza o controle de envio de email ao negativar estoque*/
            v_existe := 0;
            SELECT
                COUNT(1)
            INTO v_existe
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__emailnegprod
            WHERE
                codfilial = p_llog.codfilial
                AND codprod = p_llog.codprod
                AND nvl(negativou, 0) = 1;
            IF ( v_existe > 0 ) THEN
                UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__emailnegprod
                SET
                    negativou = 0,
                    dtpositivou = sysdate
                WHERE
                    codfilial = p_llog.codfilial
                    AND codprod = p_llog.codprod
                    AND nvl(negativou, 0) = 1;
                IF ( NOT ( inserting OR deleting OR updating ) ) THEN
                    COMMIT;
                END IF;
            END IF;            /*cria as colunas da linha do item*/
            v_tabela.linhas.extend;
            v_tabela.linhas(v_tabela.linhas.last) := tlinhatabhtml();
            criar_col_lin_tab_alerta(v_tabela, nvl(p_llog.codprod, 0), v_abertura_td_num_rsp2, v_fechamento_td);
            criar_col_lin_tab_alerta(v_tabela, nvl(p_llog.descricao, 'em branco'), v_abertura_td_rsp2, v_fechamento_td);
            criar_col_lin_tab_alerta(v_tabela, nvl(p_llog.codncmex, 'em branco'), v_abertura_td_num_rsp2, v_fechamento_td);
            criar_col_lin_tab_alerta(v_tabela, nvl(p_llog.qt, 0), v_abertura_td_num_rsp2, v_fechamento_td);
            IF nvl(p_llog.temdivergenciapreco, 0) > 0 THEN
                criar_col_lin_tab_alerta(
                    v_tabela, 
                    to_char(nvl(p_llog.precoultent, 0), '990D90'), 
                    replace(v_abertura_td_num_rsp2,'style=\"', 'style=\"background-color:red;color:yellow;'), 
                    v_fechamento_td
                );
                criar_col_lin_tab_alerta(
                    v_tabela, 
                    to_char(nvl(p_llog.precoent, 0), '990D90'), 
                    replace(v_abertura_td_num_rsp2, 'style=\"', 'style=\"background-color:red;color:yellow;'), 
                    v_fechamento_td
                );
            ELSE
                criar_col_lin_tab_alerta(
                    v_tabela, 
                    to_char(nvl(p_llog.precoultent, 0), '990D90'), 
                    v_abertura_td_num_rsp2, 
                    v_fechamento_td
                );
                IF nvl(p_llog.fornecedoraurora, 0) > 0 THEN
                    IF nvl(p_llog.temdivergenciaprecotabfornec, 0) > 0 THEN
                        criar_col_lin_tab_alerta(
                            v_tabela, 
                            to_char(nvl(p_llog.precoent, 0), '990D90'), 
                            replace(v_abertura_td_num_rsp2, 'style=\"', 'style=\"background-color:red;color:yellow;'),
                            v_fechamento_td
                        );
                    ELSE
                        criar_col_lin_tab_alerta(
                            v_tabela, 
                            to_char(nvl(p_llog.precoent, 0), '990D90'), 
                            v_abertura_td_num_rsp2, 
                            v_fechamento_td
                        );
                    END IF;
                ELSE
                    criar_col_lin_tab_alerta(
                        v_tabela, 
                        to_char(nvl(p_llog.precoent, 0), '990D90'), 
                        v_abertura_td_num_rsp2, 
                        v_fechamento_td
                    );
                END IF;
            END IF;
            IF nvl(p_llog.fornecedoraurora, 0) > 0 THEN
                IF nvl(p_llog.temdivergenciaprecotabfornec, 0) > 0 THEN
                    criar_col_lin_tab_alerta(
                        v_tabela, 
                        to_char(nvl(p_llog.precotaborigem, 0), '990D90'), 
                        replace(v_abertura_td_num_rsp2, 'style=\"', 'style=\"background-color:red;color:yellow;'),
                        v_fechamento_td
                    );
                ELSE
                    criar_col_lin_tab_alerta(
                        v_tabela, 
                        to_char(nvl(p_llog.precotaborigem, 0), '990D90'),
                        v_abertura_td_num_rsp2, 
                        v_fechamento_td
                    );
                END IF;
            END IF;
            criar_col_lin_tab_alerta(v_tabela, nvl(p_llog.codfigura, -1), v_abertura_td_num_rsp2, v_fechamento_td);
            v_tabela.linhas.extend;
            criar_col_2lin_tab_alerta(v_tabela, 'XML', 'FIG', v_abertura_td, v_fechamento_td);
            criar_col_2lin_tab_alerta(
                v_tabela, p_llog.sittributnf, 
                p_llog.sittributfig, 
                v_abertura_td_num, 
                v_fechamento_td,
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                p_llog.codstpiscofinsnf, 
                p_llog.codstpiscofinsfig,
                v_abertura_td_num, 
                v_fechamento_td,
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                p_llog.codfiscalnf, 
                p_llog.codfiscalfig, 
                v_abertura_td_num,
                v_fechamento_td,
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela,
                round(p_llog.percicmsnf, 2), 
                round(p_llog.percicmsfig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.percicmsrednf, 2), 
                round(p_llog.percicmsredfig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.percbaserednf, 2), 
                round(p_llog.percbaseredfig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, round(p_llog.percdescicmsdiferidonf, 2), 
                round(p_llog.percdescicmsdiferidofig, 2),
                v_abertura_td_num, 
                v_fechamento_td, 
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.percicmsresultantenf, 2),
                round(p_llog.percicmsresultantefig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                1
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.perccredicmsnf, 2), 
                round(p_llog.perccredicmsfig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.aliqicms1nf, 2), 
                round(p_llog.aliqicms1fig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                1
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.aliqicms2nf, 2), 
                round(p_llog.aliqicms2fig, 2),
                v_abertura_td_num, 
                v_fechamento_td, 
                1
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.percivanf, 2),
                round(p_llog.percivafig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                1
            );
            criar_col_2lin_tab_alerta(
                v_tabela,
                round(p_llog.baseicmsstnf, 2), 
                round(p_llog.baseicmsstfig, 2),
                v_abertura_td_num, 
                v_fechamento_td, 
                2
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.vlicmsstnf, 2), 
                round(p_llog.vlicmsstfig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                2
            );
            criar_col_2lin_tab_alerta(
                v_tabela,
                round(p_llog.percpisnf, 2), 
                round(p_llog.percpisfig, 2),
                v_abertura_td_num, 
                v_fechamento_td,
                1
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.perccofinsnf, 2), 
                round(p_llog.perccofinsfig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                1
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.percipinf, 2),
                round(p_llog.percipifig, 2),
                v_abertura_td_num,
                v_fechamento_td, 
                1
            );
            IF nvl(p_llog.qt, 0) > 500 THEN
                v_enviar_email_rcas := true;
            END IF;            
            /*criaa a linha do item que sera notificado aos rcas da entrada*/
            v_tabela_rcas.linhas.extend;
            v_tabela_rcas.linhas(v_tabela_rcas.linhas.last) := tlinhatabhtml();
            criar_col_lin_tab_alerta(v_tabela_rcas, nvl(p_llog.codprod, 0), v_abertura_td_num, v_fechamento_td);
            criar_col_lin_tab_alerta(v_tabela_rcas, nvl(p_llog.descricao, 'em branco'), v_abertura_td, v_fechamento_td);
            criar_col_lin_tab_alerta(v_tabela_rcas, nvl(p_llog.qt, 0), v_abertura_td_num, v_fechamento_td);
            IF instr(nvl(p_llog.descricao, ''), 'PEIXE') > 0 THEN
                v_tem_peixe := true;
            END IF;
        END LOOP;
        IF v_contador_itens > 0 THEN
            v_titulo_email := concat(v_titulo_email,' - Filial '|| p_llog.codfilial|| ' NF: '|| p_llog.numnota);
            v_titulo_email_rcas := concat(v_titulo_email_rcas,' - Filial '|| p_llog.codfilial);
            v_corpo_email_rcas := 'Ha previsao de entrada dos seguintes itens nesta data: ';
            v_corpo_email_rcas := concat(v_corpo_email_rcas,to_char(sysdate, 'dd/mm/yyyy'));
            v_corpo_email_rcas := concat(v_corpo_email_rcas,'<br />IMPORTANTE: Os referidos itens somente serao disponibilizados para venda apos checagens de tributacao e conferencia de demais informacoes legais e fiscais e somente depois disso estarao disponveis para venda, podendo inclusive nao serem disponibilizados nesta data!<br /><br />'|| utl_tcp.crlf);
            IF ( v_divergencia_trib = true ) THEN
                v_titulo_email := concat(v_titulo_email,' - DIVERG TRIB');
                v_corpo_email := concat('A entrada transacao nr. ',concat(p_llog.numtransent, ' entrou com divergencia na tributacao.'));
                v_email_para := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
                    p_nomeparam => 'enviar_alerta_ent_fig_trib', 
                    p_tipoentidade => 'filial', 
                    p_codentidade => p_llog.codfilial, 
                    p_valor_padrao => v_email_para
                );
            ELSE
                v_titulo_email := concat(v_titulo_email,' - TRIB OK');
                v_corpo_email := concat('A entrada transacao nr. ',concat(p_llog.numtransent,' entrou com a tributacao ok.'));
                v_email_para := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
                    p_nomeparam => 'enviar_alerta_ent_fig_tribok', 
                    p_tipoentidade => 'filial', 
                    p_codentidade => p_llog.codfilial, 
                    p_valor_padrao => v_email_para
                );
            END IF;
            IF ( v_divergencia_preco = true ) THEN
                v_titulo_email := concat(v_titulo_email,' - DIVERG PRECO ');
                v_corpo_email := concat(v_corpo_email,' Tambem entrou com variacao de preco que excede a parametrizada, o que pode indicar erro no multiplo do produto na 253.');
                v_email_para := concat(v_email_para,';');
                v_email_para := concat(v_email_para,__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
                    p_nomeparam => 'email_alerta_variacao_pcompra', 
                    p_tipoentidade=> 'filial', 
                    p_codentidade => p_llog.codfilial, 
                    p_valor_padrao => v_email_para
                ));
            ELSE
                v_titulo_email := concat(v_titulo_email,' - PRECO OK');
                v_corpo_email := concat(v_corpo_email,' O preco entrou conforme o parametrizado.');
                v_email_para := concat(v_email_para,';');
                v_email_para := concat(v_email_para,__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
                    p_nomeparam => 'email_alerta_variacao_pcompraok', 
                    p_tipoentidade=> 'filial', 
                    p_codentidade => p_llog.codfilial,
                    p_valor_padrao => v_email_para
                ));
            END IF;
            IF ( v_divergencia_aurora = true ) THEN
                v_titulo_email := concat(v_titulo_email, ' - DIVERG PRECO AURORA ');
                v_corpo_email := concat(v_corpo_email, ' Tambem entrou com diferenca de preco em relacao a tabela de precos da aurora.');
                v_email_para := concat(v_email_para,';');
                v_email_para := concat(v_email_para,__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
                    p_nomeparam => 'email_alerta_variacao_pcompra_aurora',
                    p_tipoentidade => 'filial', 
                    p_codentidade => p_llog.codfilial, 
                    p_valor_padrao => v_email_para
                ));
            END IF;
            v_corpo_email := concat(v_corpo_email,' Verifique se os valores procedem: (A entrada foi registrada normalmente)');
            v_corpo_email := concat(v_corpo_email,utl_tcp.crlf|| '<table style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email);
            v_corpo_email := concat(v_corpo_email,'\"><tbody>');
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Data Entrada</td>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,to_char(p_llog.dtent, 'dd/mm/yyyy hh24:mi:ss')|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Num Transacao</td>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,p_llog.numtransent|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Num Nota</td>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,p_llog.numnota|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Cod Fornec</td>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,p_llog.codfornec|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Uf Fornec</td>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,p_llog.uffornec|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Tipo Fornec</td>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,p_llog.tipofornec|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Qt Itens</td>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,v_contador_itens|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Rotina Lanc</td>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email, p_llog.rotinalanc|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Importado XML</td>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,p_llog.importado|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Func Lanc</td>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,p_llog.funclanc|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'</tbody></table><br />'|| utl_tcp.crlf);
            IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__', p_owner => '__FNV_GET_NOMESCHEMA__') ) AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido
            (p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
                v_titulo_tab := '';
                v_titulo_tab := concat(v_titulo_tab,'<thead>'|| '<tr>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"3\">'|| 'Codprod'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"3\">'|| 'Descricao'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"3\">'|| 'Ncm'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"3\">'|| 'Qtde'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"3\">'|| 'Preco Ant'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"3\">'|| 'Preco Ent'|| '</th>');
                IF v_fornecedor_aurora = true THEN
                    v_titulo_tab := concat(v_titulo_tab,'<th style=\"');
                    v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                    v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"3\">'|| 'Preco Tab Aur'|| '</th>');
                END IF;
                v_titulo_tab := concat(v_titulo_tab,'<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" colspan=\"19\">'|| 'Tributacao'|| '</th>'|| '</tr>'|| utl_tcp.crlf|| '<tr>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"2\">'|| 'FIG'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"2\">'|| 'Origem'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"2\">'|| 'CODST'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"2\">'|| 'CSTPCOF'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"2\">'|| 'CFOP'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" colspan=\"6\">'|| 'ICMS'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" colspan=\"5\">'|| 'ICMS ST'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"2\">'|| 'PIS'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"2\">'|| 'COFINS'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\" rowspan=\"2\">'|| 'IPI'|| '</th>'|| '</tr>'|| utl_tcp.crlf|| '<tr>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\">'|| 'PERC'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\">'|| 'PERC<br />RED'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\">'|| 'PERC<br />BASERED'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\">'|| 'PERC<br />DIFER.'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab, '\">'|| 'PERC<br />RESULT.'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\">'|| 'PERC<br />CRED'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\">'|| 'AliqInt'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\">'|| 'AliqExt'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\">'|| 'IVA'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\">'|| 'BASEST'|| '</th>'|| '<th style=\"');
                v_titulo_tab := concat(v_titulo_tab,v_css_tab_email_th);
                v_titulo_tab := concat(v_titulo_tab,'\">'|| 'VLST'|| '</th>'|| '</tr>'|| '</thead>');
                v_titulo_tab_rcas := '';
                v_titulo_tab_rcas := concat(v_titulo_tab_rcas,'<thead>'|| '<tr>'|| '<th style=\"');
                v_titulo_tab_rcas := concat(v_titulo_tab_rcas,v_css_tab_email_th);
                v_titulo_tab_rcas := concat(v_titulo_tab_rcas,'\">'|| 'Codprod'|| '</th>'|| '<th style=\"');
                v_titulo_tab_rcas := concat(v_titulo_tab_rcas,v_css_tab_email_th);
                v_titulo_tab_rcas := concat(v_titulo_tab_rcas,'\">'|| 'Descricao'|| '</th>'|| '<th style=\"');
                v_titulo_tab_rcas := concat(v_titulo_tab_rcas,v_css_tab_email_th);
                v_titulo_tab_rcas := concat(v_titulo_tab_rcas,'\">'|| 'Qtde'|| '</th>'|| '</tr>'|| '</thead>');
                v_tabela.passo_zebra := 2;
                v_tabela.prop_style := v_css_tab_email;
                v_tabela.titulo := v_titulo_tab;
                v_tabela_rcas.passo_zebra := 1;
                v_tabela_rcas.prop_style := v_css_tab_email;
                v_tabela_rcas.titulo := v_titulo_tab_rcas;
                v_corpo_email := concat(v_corpo_email, utl_tcp.crlf|| '<br /><br />'|| '__TABHTML__'|| concat(utl_tcp.crlf,utl_tcp.crlf)|| '<br /><br />Para verificar / alterar a parametrizacao do email de recebimento do alerta acesse: http://www.jumboalimentos.com.br, acesso restrito, opcao compras, configuracao compras.');
                v_corpo_email_rcas := concat(v_corpo_email_rcas,utl_tcp.crlf|| '<br /><br />'|| '__TABHTML__'|| concat(utl_tcp.crlf,utl_tcp.crlf)|| '<br /><br />');
                IF v_tem_peixe = false THEN
                    v_email_para := replace(lower(v_email_para), 'edson.nunes@jumboalimentos.com.br', '');
                    v_email_para_rcas := replace(lower(v_email_para_rcas), 'edson.nunes@jumboalimentos.com.br', '');
                    v_email_para := replace(lower(v_email_para), ';;', ';');
                ELSE
                    v_email_para := concat(v_email_para,';edson.nunes@jumboalimentos.com.br');
                    v_email_para_rcas := concat(v_email_para_rcas,';edson.nunes@jumboalimentos.com.br');
                    v_email_para := replace(lower(v_email_para), ';;', ';');
                END IF;
                /*entradas manuais, sem importar XML, nao devem gerar o alerta*/
                if (nvl(p_llog.importado,0) = 1) then 
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email(
                        pr_email_para => v_email_para, 
                        pr_titulo_email => v_titulo_email, 
                        pr_corpo_email=> v_corpo_email, 
                        pr_tab_html => v_tabela
                    );
                end if;
                IF v_fornecedor_aurora = false OR v_enviar_email_rcas = true THEN
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email(
                        pr_email_para =>concat(v_email_para_rcas,'jumbo.ti@jumboalimentos.com.br'), 
                        pr_titulo_email => v_titulo_email_rcas, 
                        pr_corpo_email => v_corpo_email_rcas, 
                        pr_tab_html => v_tabela_rcas);
                END IF;
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END enviar_alerta_ent;
    PROCEDURE enviar_alerta_ent_ped (
        p_llog IN OUT __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__loganaliseent%rowtype
    ) AS
        PRAGMA autonomous_transaction;
        v_email_para             VARCHAR2(4000) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        v_titulo_email           VARCHAR2(4000) DEFAULT 'JUMBO - PRE-ENTRADA';
        v_corpo_email            CLOB DEFAULT '';
        numtemp                  NUMBER;
        strtemp                  VARCHAR2(4000);
        v_css_tab_email          VARCHAR2(32767) DEFAULT NULL;
        v_css_tab_email_td       VARCHAR2(32767) DEFAULT NULL;
        v_css_tab_email_th       VARCHAR2(32767) DEFAULT NULL;
        v_css_dif                VARCHAR2(32767) DEFAULT NULL;
        v_divergencia_trib       BOOLEAN DEFAULT false;
        v_divergencia_preco      BOOLEAN DEFAULT false;
        v_existe                 NUMBER DEFAULT 0;
        v_percvarmin             NUMBER DEFAULT 0;
        v_percvarmax             NUMBER DEFAULT 0;
        v_contador_itens         NUMBER DEFAULT 0;
        v_lfig                   jumbo.pctribfigura%rowtype;
        v_lexpiscof              jumbo.pcexpiscofinsitem%rowtype;
        v_titulo_tab             CLOB DEFAULT '';
        v_css_num                VARCHAR2(20) DEFAULT '';
        v_abertura_td            VARCHAR2(500) DEFAULT '';
        v_fecha_abert_td         VARCHAR2(10) DEFAULT '';
        v_fechamento_td          VARCHAR2(10) DEFAULT '';
        v_abertura_td_num        VARCHAR2(500) DEFAULT '';
        v_abertura_td_num_rsp2   VARCHAR2(500) DEFAULT '';
        v_abertura_td_rsp2       VARCHAR2(500) DEFAULT '';
        v_divergencia_aurora     BOOLEAN DEFAULT false;
        v_fornecedor_aurora      BOOLEAN DEFAULT false;
        v_tabela                 ttabela;
        v_pervar_aur             NUMBER DEFAULT 1.02;
    BEGIN
        dbms_output.put_line('inicio');
        v_css_num := 'text-align:right;';
        v_tabela := ttabela();
        v_abertura_td := '<td style=\"';
        v_fecha_abert_td := '\">';
        v_fechamento_td := '</td>';
        v_contador_itens := 0;
        v_divergencia_trib := false;
        v_divergencia_preco := false;
        v_css_tab_email := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email');
        v_css_tab_email_td := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email_td');
        v_css_tab_email_th := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email_th');
        v_abertura_td := concat(v_abertura_td,v_css_tab_email_td);
        v_abertura_td_num := v_abertura_td;
        v_abertura_td_rsp2 := concat(v_abertura_td,'\" rowspan=\"2\">');
        v_abertura_td := concat(v_abertura_td,v_fecha_abert_td);
        v_abertura_td_num := concat(v_abertura_td_num,';');
        v_abertura_td_num := concat(v_abertura_td_num,v_css_num);
        v_abertura_td_num_rsp2 := concat(v_abertura_td_num,'\" rowspan=\"2\">');
        v_abertura_td_num := concat(v_abertura_td_num,v_fecha_abert_td);
        FOR li IN (
            SELECT
                pcpedido.datalanc,
                pcpedido.codfilial,
                pcpedido.codfornec,
                pcpedido.funclanc,
                pcpedido.rotinalanc   AS rotlanc,
                pcpedido.tipobonific,
                pcfornec.estado,
                pcfornec.tipofornec,
                pcfornec.fornecedor,
                pcitem.percicmred,
                pcitem.codprod,
                pcitem.pliquido,
                pcitem.qtpedida,
                pcitem.vlst,
                pcitem.pericm,
                pcitem.percdescicmsdif,
                pcitem.pcompra,
                pcitem.percicmsdiferido,
                pcitem.peripi,
                pcitem.percaliqint,
                pcitem.percaliqext,
                pcitem.perciva,
                pcitem.codsittribpiscofins,
                pcitem.perpis,
                pcitem.percofins,
                pe.codfiscal          AS codfiscal,
                pe.sittribut          AS sittribut,
                pe.numtransitem,
                pe.codoper,
                pcprodut.codncmex,
                pcprodut.descricao    AS descricao_prod,
                nvl(e.valorultent, 0) AS vlultent,
                pcitem.baseicst,
                pcitem.baseicms,
                pcitem.vlicms,
                pcitem.percredicms
            FROM
                jumbo.pcpedido
                JOIN jumbo.pcitem ON ( pcitem.numped = pcpedido.numped )
                JOIN jumbo.pcprodut ON ( pcprodut.codprod = pcitem.codprod )
                LEFT OUTER JOIN jumbo.pcmovpreent         pe ON ( pe.numtransent = p_llog.numtransent
                                                            AND pe.codprod = pcitem.codprod
                                                            AND pe.numseq = pcitem.numseq )
                LEFT OUTER JOIN jumbo.pcmovcomplepreent   cpe ON ( cpe.numtransitem = pe.numtransitem )
                LEFT OUTER JOIN jumbo.pcfornec ON ( pcfornec.codfornec = pcpedido.codfornec )
                LEFT OUTER JOIN jumbo.pcest               e ON ( e.codfilial = nvl(p_llog.codfilial, 1)
                                                    AND e.codprod = pcitem.codprod )
            WHERE
                pcpedido.numped = p_llog.numped
                AND nvl(pcpedido.tipobonific, 'X') <> 'B'
            ORDER BY
                pcitem.codprod
        ) LOOP
            IF li.tipobonific <> 'N' THEN
                CONTINUE;
            END IF;
            v_contador_itens := v_contador_itens + 1;
            p_llog.dtent := li.datalanc;
            p_llog.codfilial := coalesce(p_llog.codfilial, li.codfilial);
            p_llog.codprod := li.codprod;
            p_llog.descricao := coalesce(li.descricao_prod, 'em branco');
            p_llog.codncmex := li.codncmex;
            p_llog.numtransitem := li.numtransitem;
            p_llog.qt := li.qtpedida;
            p_llog.precoent := nvl(li.pliquido, li.pcompra) + nvl(li.vlst, 0);
            p_llog.precoultent := li.vlultent;
            p_llog.vlst := nvl(li.vlst, 0);
            p_llog.codfornec := coalesce(p_llog.codfornec, li.codfornec);
            p_llog.fornecedor := coalesce(p_llog.fornecedor, li.fornecedor);
            p_llog.rotinalanc := coalesce(p_llog.rotinalanc, li.rotlanc);
            p_llog.equiplanc := NULL;
            p_llog.funclanc := coalesce(p_llog.funclanc, li.funclanc);
            p_llog.percicmsnf := li.pericm;
            p_llog.percicmsrednf := round(li.percicmred);
            p_llog.percbaserednf := NULL;/*li.PERCBASERED CAMPO NAO EXISTE NA PCITEM;*/
            p_llog.percicmsdiferidonf := li.percicmsdiferido;
            p_llog.percdescicmsdiferidonf := li.percdescicmsdif;
            p_llog.percicmsresultantenf := round(nvl(li.pericm, 0));
            p_llog.vlicmsnf := nvl(li.vlst, 0);
            p_llog.perccredicmsnf := nvl(li.percredicms, 0);
            p_llog.codoper := li.codoper;
            IF nvl(p_llog.percicmsrednf, 0) > 0 THEN
                p_llog.percicmsresultantenf := p_llog.percicmsrednf;
                p_llog.perccredicmsnf := p_llog.percicmsrednf;
            ELSE
                IF nvl(p_llog.percbaserednf, 0) > 0 THEN
                    p_llog.percicmsresultantenf := round(p_llog.percicmsresultantenf *(1 -(p_llog.percbaserednf / 100)));
                    p_llog.perccredicmsnf := round(p_llog.perccredicmsnf *(1 -(p_llog.percbaserednf / 100)));
                END IF;
            END IF;
            IF nvl(p_llog.percdescicmsdiferidonf, 0) > 0 THEN
                p_llog.percicmsresultantenf := round(p_llog.percicmsresultantenf *(1 -(p_llog.percdescicmsdiferidonf / 100)));
                p_llog.perccredicmsnf := round(p_llog.perccredicmsnf *(1 -(p_llog.percdescicmsdiferidonf / 100)));
            END IF;
            p_llog.percipinf := li.peripi;
            p_llog.aliqicms1nf := li.percaliqint;
            p_llog.aliqicms2nf := li.percaliqext;
            p_llog.ivanf := round(nvl(li.perciva, 0), 2);
            p_llog.percivanf := round(nvl(li.perciva, 0), 2);
            p_llog.baseicmsstnf := round(nvl(li.baseicst, 0), 2);
            p_llog.vlicmsstnf := round(nvl(li.vlst, 0), 2);
            p_llog.codfiscalnf := li.codfiscal;
            p_llog.sittributnf := li.sittribut;
            p_llog.codstpiscofinsnf := li.codsittribpiscofins;
            p_llog.percpisnf := li.perpis;
            p_llog.perccofinsnf := li.percofins;
            p_llog.observacoes := '';
            p_llog.observacoes := concat(p_llog.observacoes,' '|| ' 1 ');
            IF ( nvl(li.perciva, 0) = 0 ) THEN
                IF ( nvl(li.baseicst, 0) > 0 ) THEN
                    p_llog.ivanf := round((li.baseicst - CASE
                        WHEN nvl(li.baseicms, 0) = 0 THEN
                            li.pcompra
                        ELSE li.baseicms
                    END) /
                        CASE
                            WHEN nvl(li.baseicms, 0) = 0 THEN
                                li.pcompra
                            ELSE li.baseicms
                        END
                    * 100, 2);
                    p_llog.percivanf := p_llog.ivanf;
                END IF;
            END IF;
            IF nvl(p_llog.vlst, 0) > 0 THEN
                p_llog.perccredicmsnf := 0;
            END IF;
            v_existe := 0;
            p_llog.uffornec := nvl(trim(replace(nvl(p_llog.uffornec, ''), ' ', '')), trim(replace(nvl(li.estado, ''), ' ', '')));
            p_llog.tipofornec := nvl(
                trim(replace(nvl(p_llog.tipofornec, ''), ' ', '')), 
                trim(replace(nvl(li.tipofornec, ''), ' ', ''))
            );
            p_llog.observacoes := concat(p_llog.observacoes,' v_uffornec1: |'|| p_llog.uffornec|| '|'|| length(trim(nvl(p_llog.uffornec, '')))|| '|'|| length(p_llog.uffornec)|| '|');
            IF p_llog.uffornec IS NULL THEN
                p_llog.observacoes := concat(p_llog.observacoes,' eh nulo ');
            ELSE
                p_llog.observacoes := concat(p_llog.observacoes,' nao eh nulo ');
            END IF;            /*encontra os dados de uf e tipo do fornecedor, que nao vem no registro de inclusao da pcmov*/
            IF ( length(trim(nvl(p_llog.uffornec, ''))) = 0 ) OR ( p_llog.uffornec IS NULL ) THEN
                p_llog.observacoes := concat(p_llog.observacoes,' '|| ' 2 ');
                v_existe := 0;
                SELECT
                    COUNT(1)
                INTO v_existe
                FROM
                    jumbo.pcfornec f
                WHERE
                    f.codfornec = nvl(p_llog.codfornec, li.codfornec);
                IF v_existe > 0 THEN
                    p_llog.observacoes := concat(p_llog.observacoes,' '|| ' 5 ');
                    SELECT
                        f.estado,
                        f.tipofornec,
                        f.fornecedor
                    INTO
                        p_llog.uffornec,
                        p_llog.tipofornec,
                        p_llog.fornecedor
                    FROM
                        jumbo.pcfornec f
                    WHERE
                        f.codfornec = nvl(p_llog.codfornec, li.codfornec)
                        AND ROWNUM <= 1;
                END IF;
            END IF;
            p_llog.observacoes := concat(p_llog.observacoes,' '
                                    || ' 6 '
                                    || ' v_uffornec: '
                                    || p_llog.uffornec
                                    || ' vtipofornec: '
                                    || p_llog.tipofornec
                                    || ' codncmex: '
                                    || p_llog.codncmex
                                    || ' codfilial: '
                                    || li.codfilial
                                    || ' ');
            p_llog.codfigura := NULL;
            atribuir_dados_trib_logent(p_llog);
            IF nvl(p_llog.codfigura, -1) > -1 THEN
                IF ( p_llog.percicmsresultantenf <> p_llog.percicmsresultantefig ) OR ( p_llog.percipinf <> p_llog.percipifig ) OR
                ( p_llog.aliqicms1nf <> p_llog.aliqicms1fig ) OR ( p_llog.aliqicms2nf <> p_llog.aliqicms2fig ) OR ( p_llog.percivanf
                <> p_llog.percivafig ) OR ( p_llog.codfiscalnf <> p_llog.codfiscalfig ) OR ( p_llog.sittributnf <> p_llog.sittributfig
                ) OR ( p_llog.codstpiscofinsnf <> p_llog.codstpiscofinsfig ) OR ( p_llog.percpisnf <> p_llog.percpisfig ) OR ( p_llog
                .perccofinsnf <> p_llog.perccofinsfig ) OR ( p_llog.baseicmsstnf NOT BETWEEN p_llog.baseicmsstfig *.95 AND p_llog.baseicmsstfig
                * 1.05 ) OR ( p_llog.vlicmsstnf NOT BETWEEN p_llog.vlicmsstfig *.95 AND p_llog.vlicmsstfig * 1.05 ) THEN
                    p_llog.observacoes := concat(p_llog.observacoes,' '|| ' 10 ');
                    v_divergencia_trib := true;
                    p_llog.temdivergenciatrib := 1;
                END IF;
            ELSE /*figura inexistente*/
                p_llog.observacoes := concat(p_llog.observacoes, ' '|| ' 11 ');
                v_divergencia_trib := true;
                p_llog.temdivergenciatrib := 1;
            END IF;
            veif_variacao_preco(p_llog);
            IF nvl(p_llog.temdivergenciapreco, 0) > 0 THEN
                v_divergencia_preco := true;
            END IF;
            veif_variacao_preco_aurora(p_llog);
            IF nvl(p_llog.temdivergenciaprecotabfornec, 0) > 0 THEN
                v_divergencia_aurora := true;
            END IF;
            IF nvl(p_llog.fornecedoraurora, 0) > 0 THEN
                v_fornecedor_aurora := true;
            END IF;
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__loganaliseent VALUES p_llog;
            COMMIT;            
            /*cria as colunas da linha do item*/
            v_tabela.linhas.extend;
            v_tabela.linhas(v_tabela.linhas.last) := tlinhatabhtml();
            criar_col_lin_tab_alerta(v_tabela, nvl(p_llog.codprod, 0), v_abertura_td_num_rsp2, v_fechamento_td);
            criar_col_lin_tab_alerta(v_tabela, nvl(p_llog.descricao, 'em branco'), v_abertura_td_rsp2, v_fechamento_td);
            criar_col_lin_tab_alerta(v_tabela, nvl(p_llog.codncmex, 'em branco'), v_abertura_td_num_rsp2, v_fechamento_td);
            criar_col_lin_tab_alerta(v_tabela, nvl(p_llog.qt, 0), v_abertura_td_num_rsp2, v_fechamento_td);
            IF nvl(p_llog.temdivergenciapreco, 0) > 0 THEN
                criar_col_lin_tab_alerta(
                    v_tabela,
                    to_char(nvl(p_llog.precoultent, 0), '990D90'),
                    replace(v_abertura_td_num_rsp2,'style=\"', 'style=\"background-color:red;color:yellow;'), 
                    v_fechamento_td
                );
                criar_col_lin_tab_alerta(
                    v_tabela, 
                    to_char(nvl(p_llog.precoent, 0), '990D90'), 
                    replace(v_abertura_td_num_rsp2, 'style=\"', 'style=\"background-color:red;color:yellow;'), 
                    v_fechamento_td
                );
            ELSE
                criar_col_lin_tab_alerta(
                    v_tabela, 
                    to_char(nvl(p_llog.precoultent, 0), '990D90'), 
                    v_abertura_td_num_rsp2,
                    v_fechamento_td
                );
                IF nvl(p_llog.fornecedoraurora, 0) > 0 THEN
                    IF nvl(p_llog.temdivergenciaprecotabfornec, 0) > 0 THEN
                        criar_col_lin_tab_alerta(
                            v_tabela,
                            to_char(nvl(p_llog.precoent, 0), '990D90'), 
                            replace(v_abertura_td_num_rsp2, 'style=\"', 'style=\"background-color:red;color:yellow;'),
                            v_fechamento_td
                        );
                    ELSE
                        criar_col_lin_tab_alerta(
                            v_tabela,
                            to_char(nvl(p_llog.precoent, 0), '990D90'), 
                            v_abertura_td_num_rsp2, 
                            v_fechamento_td
                        );
                    END IF;
                ELSE
                    criar_col_lin_tab_alerta(
                        v_tabela, 
                        to_char(nvl(p_llog.precoent, 0), '990D90'), 
                        v_abertura_td_num_rsp2,
                        v_fechamento_td
                    );
                END IF;
            END IF;
            IF nvl(p_llog.fornecedoraurora, 0) > 0 THEN
                IF nvl(p_llog.temdivergenciaprecotabfornec, 0) > 0 THEN
                    criar_col_lin_tab_alerta(
                        v_tabela, 
                        to_char(nvl(p_llog.precotaborigem, 0), '990D90'),
                        replace(v_abertura_td_num_rsp2, 'style=\"', 'style=\"background-color:red;color:yellow;'), 
                        v_fechamento_td
                    );
                ELSE
                    criar_col_lin_tab_alerta(
                        v_tabela,
                        to_char(nvl(p_llog.precotaborigem, 0), '990D90'), 
                        v_abertura_td_num_rsp2, 
                        v_fechamento_td
                    );
                END IF;
            END IF;
            criar_col_lin_tab_alerta(v_tabela, nvl(p_llog.codfigura, -1), v_abertura_td_num_rsp2, v_fechamento_td);
            v_tabela.linhas.extend;
            criar_col_2lin_tab_alerta(v_tabela, 'XML', 'FIG', v_abertura_td, v_fechamento_td);
            criar_col_2lin_tab_alerta(
                v_tabela, 
                p_llog.sittributnf, 
                p_llog.sittributfig, 
                v_abertura_td_num, 
                v_fechamento_td,
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                p_llog.codstpiscofinsnf, 
                p_llog.codstpiscofinsfig, 
                v_abertura_td_num,
                v_fechamento_td,
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                p_llog.codfiscalnf, 
                p_llog.codfiscalfig, 
                v_abertura_td_num,
                v_fechamento_td,
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.percicmsnf, 2), 
                round(p_llog.percicmsfig, 2),
                v_abertura_td_num, 
                v_fechamento_td, 
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.percicmsrednf, 2), 
                round(p_llog.percicmsredfig, 2),
                v_abertura_td_num, 
                v_fechamento_td,
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.percbaserednf, 2), 
                round(p_llog.percbaseredfig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.percdescicmsdiferidonf, 2),
                round(p_llog.percdescicmsdiferidofig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.percicmsresultantenf, 2), 
                round(p_llog.percicmsresultantefig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                1
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.perccredicmsnf, 2), 
                round(p_llog.perccredicmsfig, 2), 
                v_abertura_td_num, 
                v_fechamento_td,
                0
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.aliqicms1nf, 2),
                round(p_llog.aliqicms1fig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                1
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.aliqicms2nf, 2), 
                round(p_llog.aliqicms2fig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                1
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.percivanf, 2), 
                round(p_llog.percivafig, 2), 
                v_abertura_td_num,
                v_fechamento_td, 
                1
            );            
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.baseicmsstnf, 2),
                round(p_llog.baseicmsstfig, 2),
                v_abertura_td_num, 
                v_fechamento_td, 
                2
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.vlicmsstnf, 2), 
                round(p_llog.vlicmsstfig, 2),
                v_abertura_td_num, 
                v_fechamento_td, 
                2
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.percpisnf, 2), 
                round(p_llog.percpisfig, 2),
                v_abertura_td_num, 
                v_fechamento_td, 
                1
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.perccofinsnf, 2), 
                round(p_llog.perccofinsfig, 2), 
                v_abertura_td_num, 
                v_fechamento_td, 
                1
            );
            criar_col_2lin_tab_alerta(
                v_tabela, 
                round(p_llog.percipinf, 2), 
                round(p_llog.percipifig, 2), 
                v_abertura_td_num,
                v_fechamento_td, 
                1
            );
        END LOOP;
        IF v_contador_itens > 0 THEN
            v_titulo_email := concat(v_titulo_email,' - Filial '|| p_llog.codfilial || ' NF: '|| p_llog.numnota);
            IF ( v_divergencia_trib = true ) THEN
                v_titulo_email := v_titulo_email || ' - DIVERG TRIB';
                v_corpo_email := concat('A entrada transacao nr. ',concat(p_llog.numtransent,' entrou com divergencia na tributacao.'));
                v_email_para := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
                    p_nomeparam => 'enviar_alerta_ent_fig_trib', 
                    p_tipoentidade => 'filial', 
                    p_codentidade => p_llog.codfilial, 
                    p_valor_padrao => v_email_para
                );
            ELSE
                v_titulo_email := concat(v_titulo_email,' - TRIB OK');
                v_corpo_email := concat('A entrada transacao nr. ',concat(p_llog.numtransent,' entrou com a tributacao ok.'));
                v_email_para := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
                    p_nomeparam => 'enviar_alerta_ent_fig_tribok', 
                    p_tipoentidade => 'filial', 
                    p_codentidade => p_llog.codfilial, 
                    p_valor_padrao => v_email_para
                );
            END IF;
            IF ( v_divergencia_preco = true ) THEN
                v_titulo_email := concat(v_titulo_email,' - DIVERG PRECO ');
                v_corpo_email := concat(v_corpo_email,' Tambem entrou com variacao de preco que excede a parametrizada, o que pode indicar erro no multiplo do produto na 253.');
                v_email_para := concat(v_email_para,concat(';',__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
                    p_nomeparam => 'email_alerta_variacao_pcompra', 
                    p_tipoentidade => 'filial', 
                    p_codentidade => p_llog.codfilial, 
                    p_valor_padrao => v_email_para
                )));
            ELSE
                v_titulo_email := concat(v_titulo_email , ' - PRECO OK');
                v_corpo_email := concat(v_corpo_email , ' O preco entrou conforme o parametrizado.');
                v_email_para := concat(v_email_para,concat(';',__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
                    p_nomeparam => 'email_alerta_variacao_pcompraok', 
                    p_tipoentidade => 'filial', 
                    p_codentidade => p_llog.codfilial, 
                    p_valor_padrao => v_email_para
                )));
            END IF;
            IF ( v_divergencia_aurora = true ) THEN
                v_titulo_email := concat(v_titulo_email , ' - DIVERG PRECO AURORA ');
                v_corpo_email := concat(v_corpo_email , ' Tambem entrou com diferenca de preco em relacao a tabela de precos da aurora.');
                v_email_para := concat(v_email_para,concat(';',__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_param(
                    p_nomeparam => 'email_alerta_variacao_pcompra_aurora',
                    p_tipoentidade => 'filial', 
                    p_codentidade => p_llog.codfilial, 
                    p_valor_padrao => v_email_para
                )));
            END IF;
            v_corpo_email := concat(v_corpo_email,' Verifique se os valores procedem: (O pedido foi registrado normalmente)');
            v_corpo_email := concat(v_corpo_email,utl_tcp.crlf|| '<table style=\"');
            v_corpo_email := concat(v_corpo_email,v_css_tab_email);
            v_corpo_email := concat(v_corpo_email,'\"><tbody>');
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Data Entrada</td>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,to_char(p_llog.dtent, 'dd/mm/yyyy hh24:mi:ss')|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Num Pedido</td>');
            v_corpo_email := concat(v_corpo_email,concat(v_abertura_td,p_llog.numped));
            v_corpo_email := concat(v_corpo_email,'</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Num Transacao</td>' || concat(v_abertura_td,p_llog.numtransent) || '</td>' || '</tr>' || utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Num Nota</td>'|| concat(v_abertura_td,p_llog.numnota)|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Cod Fornec</td>'|| concat(v_abertura_td,p_llog.codfornec)|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Uf Fornec</td>'|| concat(v_abertura_td,p_llog.uffornec)|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Tipo Fornec</td>'|| concat(v_abertura_td,p_llog.tipofornec)|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Qt Itens</td>'|| concat(v_abertura_td,v_contador_itens)|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Rotina Lanc</td>'|| concat(v_abertura_td,p_llog.rotinalanc)|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Importado XML</td>'||concat(v_abertura_td,'S')|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'<tr>');
            v_corpo_email := concat(v_corpo_email,v_abertura_td);
            v_corpo_email := concat(v_corpo_email,'Func Lanc</td>'|| concat(v_abertura_td,p_llog.funclanc)|| '</td>'|| '</tr>'|| utl_tcp.crlf);
            v_corpo_email := concat(v_corpo_email,'</tbody></table><br />'|| utl_tcp.crlf);
            IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__', p_owner => '__FNV_GET_NOMESCHEMA__') ) AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido
            (p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
                v_titulo_tab := ''
                                || '<thead>'
                                || '<tr>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" rowspan=\"3\">'
                                || 'Codprod'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" rowspan=\"3\">'
                                || 'Descricao'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" rowspan=\"3\">'
                                || 'Ncm'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" rowspan=\"3\">'
                                || 'Qtde'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" rowspan=\"3\">'
                                || 'Preco Ant'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" rowspan=\"3\">'
                                || 'Preco Ent'
                                || '</th>';
                IF v_fornecedor_aurora = true THEN
                    v_titulo_tab := v_titulo_tab
                                    || '<th style=\"'
                                    || v_css_tab_email_th
                                    || '\" rowspan=\"3\">'
                                    || 'Preco Tab Aur'
                                    || '</th>';
                END IF;
                v_titulo_tab := v_titulo_tab
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" colspan=\"19\">'
                                || 'Tributacao'
                                || '</th>'
                                || '</tr>'
                                || utl_tcp.crlf
                                || '<tr>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" rowspan=\"2\">'
                                || 'FIG'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" rowspan=\"2\">'
                                || 'Origem'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" rowspan=\"2\">'
                                || 'CODST'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" rowspan=\"2\">'
                                || 'CSTPCOF'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" rowspan=\"2\">'
                                || 'CFOP'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" colspan=\"6\">'
                                || 'ICMS'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" colspan=\"5\">'
                                || 'ICMS ST'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" rowspan=\"2\">'
                                || 'PIS'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" rowspan=\"2\">'
                                || 'COFINS'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\" rowspan=\"2\">'
                                || 'IPI'
                                || '</th>'
                                || '</tr>'
                                || utl_tcp.crlf
                                || '<tr>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\">'
                                || 'PERC'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\">'
                                || 'PERC<br />RED'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\">'
                                || 'PERC<br />BASERED'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\">'
                                || 'PERC<br />DIFER.'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\">'
                                || 'PERC<br />RESULT.'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\">'
                                || 'PERC<br />CRED'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\">'
                                || 'AliqInt'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\">'
                                || 'AliqExt'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\">'
                                || 'IVA'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\">'
                                || 'BASEST'
                                || '</th>'
                                || '<th style=\"'
                                || v_css_tab_email_th
                                || '\">'
                                || 'VLST'
                                || '</th>'
                                || '</tr>'
                                || '</thead>';
                v_tabela.passo_zebra := 2;
                v_tabela.prop_style := v_css_tab_email;
                v_tabela.titulo := v_titulo_tab;
                v_corpo_email := concat(v_corpo_email,utl_tcp.crlf)
                                    || '<br /><br />'
                                    || '__TABHTML__'
                                    || concat(utl_tcp.crlf,utl_tcp.crlf)
                                    || '<br /><br />Para verificar / alterar a parametrizacao do email de recebimento do alerta acesse: http://www.jumboalimentos.com.br, acesso restrito, opcao compras, configuracao compras.';
                dbms_output.put_line('antes');
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email(pr_email_para => v_email_para, pr_titulo_email => v_titulo_email, pr_corpo_email
                => v_corpo_email, pr_tab_html => v_tabela);
                dbms_output.put_line('depois');
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            dbms_output.put_line(concat(sqlerrm,dbms_utility.format_error_backtrace));
            NULL;
    END enviar_alerta_ent_ped;
    FUNCTION obter_param (
        p_nomeparam      VARCHAR2 DEFAULT NULL,
        p_tipoentidade   VARCHAR2 DEFAULT NULL,
        p_codentidade    VARCHAR2 DEFAULT NULL,
        p_codprocesso    NUMBER DEFAULT NULL,
        p_valor_padrao   VARCHAR2 DEFAULT NULL
    ) RETURN VARCHAR2 AS
        existe    NUMBER DEFAULT 0;
        retorno   VARCHAR2(4000) DEFAULT NULL;
    BEGIN
        existe := 1;
        BEGIN
            SELECT
                valor
            INTO retorno
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__param p
            WHERE
                ( ( p_nomeparam IS NOT NULL
                    AND lower(TRIM(p.param)) = lower(TRIM(p_nomeparam)) ) )
                AND ( ( p_tipoentidade IS NOT NULL
                        AND lower(TRIM(p.tipoentidade)) = lower(TRIM(p_tipoentidade)) ) )
                AND ( ( p_codentidade IS NOT NULL
                        AND lower(TRIM(p.codentidade)) = lower(TRIM(p_codentidade)) ) )
                AND ( ( p_codprocesso IS NOT NULL
                        AND lower(TRIM(p.codprocessorelacionado)) = lower(TRIM(p_codprocesso)) ) );
        EXCEPTION
            WHEN no_data_found THEN
                existe := 0;
                NULL;
            WHEN OTHERS THEN
                inserir_erro(p_linha => $$plsql_line);
        END;
        IF existe = 0 THEN
            existe := 1;
            BEGIN
                SELECT
                    valor
                INTO retorno
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__param p
                WHERE
                    ( ( p_nomeparam IS NOT NULL
                        AND lower(TRIM(p.param)) = lower(TRIM(p_nomeparam)) ) )
                    AND ( ( p_tipoentidade IS NOT NULL
                            AND lower(TRIM(p.tipoentidade)) = lower(TRIM(p_tipoentidade)) ) )
                    AND ( ( p_codentidade IS NOT NULL
                            AND lower(TRIM(p.codentidade)) = lower(TRIM(p_codentidade)) ) )
                    AND p_codprocesso IS NULL;
            EXCEPTION
                WHEN no_data_found THEN
                    existe := 0;
                    NULL;
                WHEN OTHERS THEN
                    inserir_erro(p_linha => $$plsql_line);
            END;
        END IF;
        IF existe = 0 THEN
            existe := 1;
            BEGIN
                SELECT
                    valor
                INTO retorno
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__param p
                WHERE
                    ( ( p_nomeparam IS NOT NULL
                        AND lower(TRIM(p.param)) = lower(TRIM(p_nomeparam)) ) )
                    AND ( p.tipoentidade IS NULL )
                    AND ( p.codentidade IS NULL )
                    AND ( ( p_codprocesso IS NOT NULL
                            AND lower(TRIM(p.codprocessorelacionado)) = lower(TRIM(p_codprocesso)) )
                            OR ( p_codprocesso IS NULL
                                AND p.codprocessorelacionado IS NULL ) );
            EXCEPTION
                WHEN no_data_found THEN
                    existe := 0;
                    NULL;
                WHEN OTHERS THEN
                    inserir_erro(p_linha => $$plsql_line);
            END;
        END IF;
        IF existe = 0 THEN
            SELECT
                COUNT(1)
            INTO existe
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__param p
            WHERE
                ( ( p_nomeparam IS NOT NULL
                    AND lower(TRIM(p.param)) = lower(TRIM(p_nomeparam)) ) )
                AND p.tipoentidade IS NULL
                AND p.codentidade IS NULL
                AND ( p.codprocessorelacionado IS NULL
                        OR ( p.codprocessorelacionado IS NOT NULL
                            AND p_codprocesso IS NULL ) );
            IF existe = 1 THEN
                SELECT
                    valor
                INTO retorno
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__param p
                WHERE
                    ( ( p_nomeparam IS NOT NULL
                        AND lower(TRIM(p.param)) = lower(TRIM(p_nomeparam)) ) )
                    AND p.tipoentidade IS NULL
                    AND p.codentidade IS NULL
                    AND ( p.codprocessorelacionado IS NULL
                            OR ( p.codprocessorelacionado IS NOT NULL
                                AND p_codprocesso IS NULL ) );
            ELSE
                existe := 0;
            END IF;
        END IF;
        IF existe = 0 THEN
            retorno := p_valor_padrao;
        END IF;
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END obter_param;
    PROCEDURE gerar_historico_est_aur AS
        PRAGMA autonomous_transaction;
    BEGIN
        FOR li IN (
            SELECT
                *
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem
            where 
                codorigemdado = 1
        ) LOOP 
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__histest_diario_origem (
                codorigemdado,
                data,
                codfilial,
                coditemestorigem,
                codprod,
                qt
            ) VALUES (
                li.codorigemdado,
                trunc(sysdate - 1),
                li.codfilialorigem,
                li.coditemest,
                li.codprodorigem,
                li.qtfisicodisponivel
            );
        END LOOP;
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END gerar_historico_est_aur;
    FUNCTION primeiro_dia_fat_mes (
        p_data DATE
    ) RETURN DATE AS
        v_retorno       DATE default NULL;
        v_prim_sab      DATE default NULL;
        v_prim_quarta   DATE default NULL;
    BEGIN
        v_prim_sab := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.primeiro_dia_semana_mes(p_data, 'sÃ¡bado');
        v_prim_quarta := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.primeiro_dia_semana_mes(p_data, 'quarta');
        IF ( v_prim_sab > v_prim_quarta ) THEN
            v_retorno := v_prim_quarta;
        ELSE
            v_retorno := v_prim_sab;
        END IF;
        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END primeiro_dia_fat_mes;
    FUNCTION qtde_fat_mes (
        p_data DATE
    ) RETURN NUMBER AS
        v_retorno       NUMBER DEFAULT 0;
        v_dtfat         DATE default NULL;
        v_ult_dia_mes   DATE default NULL;
    BEGIN
        v_dtfat := nvl(p_data, sysdate);
        v_dtfat := to_date('01/' || to_char(v_dtfat, 'mm/yyyy'), 'dd/mm/yyyy');
        v_ult_dia_mes := last_day(v_dtfat);
        WHILE v_dtfat <= v_ult_dia_mes LOOP
            IF ( lower(to_char(v_dtfat, 'Day')) LIKE '%'
                                                        || lower(TRIM('quarta'))
                                                        || '%' OR lower(to_char(v_dtfat, 'Day')) LIKE '%'
                                                                                                    || lower(TRIM('sÃ¡bado'))
                                                                                                    || '%' ) THEN
                v_retorno := v_retorno + 1;
            END IF;
            v_dtfat := v_dtfat + 1;
        END LOOP;
        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END qtde_fat_mes;
    PROCEDURE atualizar_ultcomp_cli (
        dtini   DATE DEFAULT NULL,
        dtfim   DATE DEFAULT NULL
    ) AS
        PRAGMA autonomous_transaction;
        retorno          VARCHAR2(4000) DEFAULT '0';
        proc             VARCHAR2(100) DEFAULT 'atualizar_negocio_aurora';
        lca              __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__negocios_origem%rowtype;
        v_existe         NUMBER DEFAULT 0;
        dtiniproc        DATE;
        dtfimproc        DATE;
        qtnegociosinsa   NUMBER DEFAULT 0;
    BEGIN
        dtiniproc := dtini;
        dtfimproc := dtfim;
        IF dtiniproc IS NULL THEN
            dtiniproc := to_date(to_char(sysdate, 'dd/mm/yyyy'), 'dd/mm/yyyy');
        END IF;
        IF dtfimproc IS NULL THEN
            dtfimproc := sysdate;
        END IF;
        FOR li IN (
            SELECT DISTINCT
                s.codcli,
                s.dtsaida,
                p.numpedrca,
                s.numped,
                s.numnota,
                s.numtransvenda,
                s.coddevol,
                s.dtcancel,
                s.vltotal,
                s.numitens
            FROM
                jumbo.pcnfsaid   s
                JOIN jumbo.pcmov      m ON ( m.numtransvenda = s.numtransvenda )
                JOIN jumbo.pcpedc     p ON ( p.numtransvenda = s.numtransvenda )
            WHERE
                s.dtsaida BETWEEN dtiniproc AND dtfimproc
                AND s.dtcancel IS NULL
                AND s.especie = 'NF'
                AND m.codoper = 'S'
                AND nvl(m.qt, 0) > 0
                AND m.dtcancel IS NULL
            ORDER BY
                s.dtsaida ASC,
                s.numtransvenda ASC
        ) LOOP
            DELETE FROM __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliultcomp
            WHERE
                codcli = li.codcli;
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliultcomp (
                codcli,
                dtultcomp,
                numpedrca,
                numped,
                numnota,
                numtransvenda,
                coddevol,
                dtcancel,
                vltotal,
                qtitens
            ) VALUES (
                li.codcli,
                li.dtsaida,
                li.numpedrca,
                li.numped,
                li.numnota,
                li.numtransvenda,
                li.coddevol,
                li.dtcancel,
                li.vltotal,
                li.numitens
            );
        END LOOP;
        COMMIT;
        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END atualizar_ultcomp_cli;
    PROCEDURE atualizar_ultvenda_prod (
        dtini   DATE DEFAULT NULL,
        dtfim   DATE DEFAULT NULL
    ) AS
        PRAGMA autonomous_transaction;
        retorno          VARCHAR2(4000) DEFAULT '0';
        proc             VARCHAR2(100) DEFAULT 'atualizar_negocio_aurora';
        lca              __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__negocios_origem%rowtype;
        v_existe         NUMBER DEFAULT 0;
        dtiniproc        DATE;
        dtfimproc        DATE;
        qtnegociosinsa   NUMBER DEFAULT 0;
    BEGIN
        dtiniproc := dtini;
        dtfimproc := dtfim;
        IF dtiniproc IS NULL THEN
            dtiniproc := to_date(to_char(sysdate, 'dd/mm/yyyy'), 'dd/mm/yyyy');
        END IF;
        IF dtfimproc IS NULL THEN
            dtfimproc := sysdate;
        END IF;
        FOR li IN (
            SELECT DISTINCT
                s.codusur,
                m.codprod,
                m.codoper,
                s.dtsaida,
                p.numpedrca,
                s.numped,
                s.numnota,
                s.numtransvenda,
                m.coddevol,
                m.dtcancel,
                nvl(m.qt, m.qtcont) AS qt,
                nvl(m.punit, m.punitcont) AS punit,
                m.percdesc,
                nvl(m.qt, m.qtcont) * nvl(m.punit, m.punitcont) AS vltotal,
                s.numitens
            FROM
                jumbo.pcnfsaid   s
                JOIN jumbo.pcmov      m ON ( m.numtransvenda = s.numtransvenda )
                JOIN jumbo.pcpedc     p ON ( p.numtransvenda = s.numtransvenda )
            WHERE
                s.dtsaida BETWEEN dtiniproc AND dtfimproc
                AND s.dtcancel IS NULL
                AND s.especie = 'NF'
                AND m.codoper = 'S'
                AND nvl(m.qt, 0) > 0
                AND m.dtcancel IS NULL
            ORDER BY
                s.dtsaida ASC,
                s.numtransvenda ASC
        ) LOOP
            DELETE FROM __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__prodrcaultvenda
            WHERE
                codprod = li.codprod
                AND codrca = li.codusur;
            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__prodrcaultvenda (
                codrca,
                codprod,
                codoper,
                dtultvenda,
                numpedrca,
                numped,
                numnota,
                numtransvenda,
                coddevol,
                dtcancel,
                qt,
                vlunit,
                percdesc,
                vltotal
            ) VALUES (
                li.codusur,
                li.codprod,
                li.codoper,
                li.dtsaida,
                li.numpedrca,
                li.numped,
                li.numnota,
                li.numtransvenda,
                li.coddevol,
                li.dtcancel,
                li.qt,
                li.punit,
                li.percdesc,
                li.vltotal
            );
        END LOOP;
        COMMIT;
        retorno := '0';
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
            retorno := sqlerrm;
    END atualizar_ultvenda_prod;
    
    /*deve ser executado no mes seguinte ou com indicacao de data do mes de referencia apos o mes alvo*/
    PROCEDURE atualizar_objetivos_naomov_mes (
        p_dtini   DATE DEFAULT NULL,
        p_dtfim   DATE DEFAULT NULL
    ) AS
        v_existe                     NUMBER DEFAULT 0;
        v_dtini                      DATE;
        v_dtfim                      DATE;
        v_qtitensgrupo               NUMBER;
        v_ano_atual                  NUMBER;
        v_mes_atual                  VARCHAR2(100);
        v_valor_excluir              NUMBER;
        v_valor_por_item             NUMBER;
        v_peso1cx                    NUMBER;
        v_valor_acrescentar          NUMBER;
        v_valor_restante             NUMBER;
        v_valor_total_excluir_rca    NUMBER DEFAULT 0;
        v_valor_total_incluido_rca   NUMBER DEFAULT 0;
        v_codentidade                NUMBER DEFAULT 0;
    BEGIN
        v_ano_atual := to_char(trunc(nvl(p_dtini, sysdate)), 'yyyy');
        v_mes_atual := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_char(trunc(nvl(p_dtini, sysdate)), 'mm'));
        v_dtini := last_day(add_months(trunc(nvl(p_dtini, sysdate)), -2)) + 1;
        v_dtfim := last_day(v_dtini);
        DELETE FROM __FNV_GET_PREFIXOBJECTSDB__objetivositensnaomov
        WHERE
            ano = to_char(v_dtini, 'yyyy')
            AND lower(TRIM(mes)) = lower(TRIM(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_char(v_dtini, 'mm'))));
        COMMIT;
        FOR li IN (
            WITH movimentacoes AS (
                SELECT
                    codfilial,
                    coditemvisao,
                    SUM(nvl(qtentjumbo, 0)) AS qtentjumbo,
                    SUM(nvl(qtsaidajumbo, 0)) AS qtsaidajumbo,
                    SUM(nvl(qtsaidaaurora, 0)) AS qtsaidaaurora,
                    SUM(nvl(qtestjumbo, 0)) AS qtestjumbo,
                    SUM(nvl(qtestaurora, 0)) AS qtestaurora
                FROM
                    (
                        SELECT
                            to_char(e.codfilial) AS codfilial,
                            to_char(nvl(g.codvisivelgrupo, m.codprod)) AS coditemvisao,
                            nvl(m.qt, m.qtcont) - nvl(m.qtdevol, 0) AS qtentjumbo,
                            NULL AS qtsaidajumbo,
                            NULL AS qtsaidaaurora,
                            NULL AS qtestjumbo,
                            NULL AS qtestaurora
                        FROM
                            jumbo.pcnfent        e
                            JOIN jumbo.pcmov          m ON ( m.numtransent = e.numtransent )
                            LEFT OUTER JOIN __FNV_GET_PREFIXOBJECTSDB__integgrupoprod    ig ON ( ig.codprod = m.codprod )
                            LEFT OUTER JOIN __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv   g ON ( g.codgrupoprod = ig.codgrupoprod )
                        WHERE
                            trunc(e.dtent) BETWEEN v_dtini AND v_dtfim
                            AND e.dtcancel IS NULL
                            AND m.dtcancel IS NULL
                            AND m.codoper IN (
                                'E',
                                'ET',
                                'EB',
                                'ER'
                            )
                            AND nvl(m.qt, m.qtcont) - nvl(m.qtdevol, 0) > 0
                        UNION ALL
                        SELECT
                            to_char(s.codfilial) AS codfilial,
                            to_char(nvl(g.codvisivelgrupo, m.codprod)) AS coditemvisao,
                            NULL AS qtentjumbo,
                            nvl(m.qt, m.qtcont) - nvl(m.qtdevol, 0) AS qtsaidajumbo,
                            NULL AS qtsaidaaurora,
                            NULL AS qtestjumbo,
                            NULL AS qtestaurora
                        FROM
                            jumbo.pcnfsaid       s
                            JOIN jumbo.pcmov          m ON ( m.numtransvenda = s.numtransvenda )
                            LEFT OUTER JOIN __FNV_GET_PREFIXOBJECTSDB__integgrupoprod    ig ON ( ig.codprod = m.codprod )
                            LEFT OUTER JOIN __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv   g ON ( g.codgrupoprod = ig.codgrupoprod )
                        WHERE
                            trunc(s.dtsaida) BETWEEN v_dtini AND v_dtfim
                            AND s.dtcancel IS NULL
                            AND m.dtcancel IS NULL
                            AND m.codoper IN (
                                'S',
                                'SB'
                            )
                            AND nvl(m.qt, m.qtcont) - nvl(m.qtdevol, 0) > 0
                        UNION ALL
                        SELECT
                            to_char(s.cod_unid) AS codfilial,
                            to_char(nvl(g.codvisivelgrupo, s.cd_item)) AS coditemvisao,
                            NULL AS qtentjumbo,
                            NULL AS qtsaidajumbo,
                            nvl(s.qtde_liquida_item, 0) AS qtsaidaaurora,
                            NULL AS qtestjumbo,
                            NULL AS qtestaurora
                        FROM
                            dados_vendas_origem         s
                            LEFT OUTER JOIN __FNV_GET_PREFIXOBJECTSDB__integgrupoprod    ig ON ( ig.codprod = s.cd_item )
                            LEFT OUTER JOIN __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv   g ON ( g.codgrupoprod = ig.codgrupoprod )
                        WHERE
                            trunc(s.dt_emissao_nfsa) BETWEEN v_dtini AND v_dtfim
                            AND nvl(s.qtde_liquida_item, 0) > 0 /*uma devolucao na aurora (-) poderia anular uma venda*/
                        UNION ALL
                        SELECT
                            to_char(e.codfilial) AS codfilial,
                            to_char(nvl(g.codvisivelgrupo, e.codprod)) AS coditemvisao,
                            NULL AS qtentjumbo,
                            NULL AS qtsaidajumbo,
                            NULL AS qtsaidaaurora,
                            greatest(nvl(nvl(e.qtestger, e.qtest), 0), nvl(nvl(e.qtest, e.qtestger), 0)) AS qtestjumbo,
                            NULL AS qtestaurora
                        FROM
                            jumbo.pchistest      e
                            LEFT OUTER JOIN __FNV_GET_PREFIXOBJECTSDB__integgrupoprod    ig ON ( ig.codprod = e.codprod )
                            LEFT OUTER JOIN __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv   g ON ( g.codgrupoprod = ig.codgrupoprod )
                        WHERE
                            trunc(e.data) = v_dtfim
                        UNION ALL
                        SELECT
                            to_char(e.codfilial) AS codfilial,
                            to_char(nvl(g.codvisivelgrupo, e.codprod)) AS coditemvisao,
                            NULL AS qtentjumbo,
                            NULL AS qtsaidajumbo,
                            NULL AS qtsaidaaurora,
                            NULL AS qtestjumbo,
                            nvl(e.qt, 0) AS qtestaurora
                        FROM
                            __FNV_GET_PREFIXOBJECTSDB__histest_diario_origem        e
                            LEFT OUTER JOIN __FNV_GET_PREFIXOBJECTSDB__integgrupoprod    ig ON ( ig.codprod = e.codprod )
                            LEFT OUTER JOIN __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv   g ON ( g.codgrupoprod = ig.codgrupoprod )
                        WHERE
                            trunc(e.data) = v_dtfim
                    )
                GROUP BY
                    codfilial,
                    coditemvisao
                HAVING SUM(nvl(qtentjumbo, 0)) > 0
                        OR SUM(nvl(qtsaidajumbo, 0)) > 0
                        OR SUM(nvl(qtsaidaaurora, 0)) > 0
                        OR SUM(nvl(qtestjumbo, 0)) > 0
                        OR SUM(nvl(qtestaurora, 0)) > 0
            ), resultante1 AS (
                SELECT
                    u.codfilial,
                    m.qtentjumbo,
                    m.qtsaidajumbo,
                    m.qtsaidaaurora,
                    m.qtestjumbo,
                    m.qtestaurora,
                    ''
                    ||
                        CASE
                            WHEN nvl(m.qtentjumbo, 0) > 0 THEN
                                '|TEVE ENTRADA JUMBO('
                                || nvl(m.qtentjumbo, 0)
                                || ')'
                            ELSE
                                ''
                        END
                    ||
                        CASE
                            WHEN nvl(m.qtsaidajumbo, 0) > 0 THEN
                                '|TEVE SAIDA JUMBO('
                                || nvl(m.qtsaidajumbo, 0)
                                || ')'
                            ELSE
                                ''
                        END
                    ||
                        CASE
                            WHEN nvl(m.qtsaidaaurora, 0) > 0 THEN
                                '|TEVE SAIDA AURORA('
                                || nvl(m.qtsaidaaurora, 0)
                                || ')'
                            ELSE
                                ''
                        END
                    ||
                        CASE
                            WHEN nvl(m.qtestjumbo, 0) > 0 THEN
                                '|TEVE ESTOQUE JUMBO('
                                || nvl(m.qtestjumbo, 0)
                                || ')'
                            ELSE
                                ''
                        END
                    ||
                        CASE
                            WHEN nvl(m.qtestaurora, 0) > 0 THEN
                                '|TEVE ESTOQUE AURORA('
                                || nvl(m.qtestaurora, 0)
                                || ')'
                            ELSE
                                ''
                        END
                    AS mensagem,
                    CASE
                        WHEN length(nvl(''
                                        ||
                            CASE
                                WHEN nvl(m.qtentjumbo, 0) > 0 THEN
                                    '|TEVE ENTRADA JUMBO('
                                    || nvl(m.qtentjumbo, 0)
                                    || ')'
                                ELSE
                                    ''
                            END
                                        ||
                            CASE
                                WHEN nvl(m.qtsaidajumbo, 0) > 0 THEN
                                    '|TEVE SAIDA JUMBO('
                                    || nvl(m.qtsaidajumbo, 0)
                                    || ')'
                                ELSE
                                    ''
                            END
                                        ||
                            CASE
                                WHEN nvl(m.qtsaidaaurora, 0) > 0 THEN
                                    '|TEVE SAIDA AURORA('
                                    || nvl(m.qtsaidaaurora, 0)
                                    || ')'
                                ELSE
                                    ''
                            END
                                        ||
                            CASE
                                WHEN nvl(m.qtestjumbo, 0) > 0 THEN
                                    '|TEVE ESTOQUE JUMBO('
                                    || nvl(m.qtestjumbo, 0)
                                    || ')'
                                ELSE
                                    ''
                            END
                                        ||
                            CASE
                                WHEN nvl(m.qtestaurora, 0) > 0 THEN
                                    '|TEVE ESTOQUE AURORA('
                                    || nvl(m.qtestaurora, 0)
                                    || ')'
                                ELSE
                                    ''
                            END, '')) > 0 THEN
                            0
                        ELSE
                            1
                    END AS excluir,
                    o.*
                FROM
                    __FNV_GET_PREFIXOBJECTSDB__objetivossinergia   o
                    JOIN jumbo.pcusuari         u ON to_char(u.codusur) = o.codentidade
                    LEFT OUTER JOIN movimentacoes          m ON ( m.codfilial = u.codfilial
                                                            AND m.coditemvisao = o.coditemvisao )
                WHERE
                    o.ano = to_char(v_dtini, 'yyyy')
                    AND lower(TRIM(o.mes)) = lower(TRIM(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_char(v_dtini, 'mm'))))
                    AND o.codcampanhasinergia = 0
                    AND nvl(o.realizado, 0) <= 0
                ORDER BY
                    o.codentidade,
                    o.coditemvisao
            )
            SELECT
                r1.codfilial,
                r1.qtentjumbo,
                r1.qtsaidajumbo,
                r1.qtestjumbo,
                r1.qtestaurora,
                r1.mensagem,
                r1.excluir,
                r1.codobjetivosinergia,
                r1.codcampanhasinergia,
                r1.entidade,
                r1.codentidade,
                r1.visao,
                r1.coditemvisao,
                r1.unidade,
                r1.valor,
                r1.percmaxating,
                r1.mes,
                r1.ano,
                r1.realizado,
                r1.codgrupogiro,
                SUM(
                    CASE
                        WHEN r1.excluir = 1 THEN
                            r1.valor
                        ELSE
                            0
                    END
                ) OVER(
                    PARTITION BY codentidade
                    ORDER BY
                        codentidade
                ) AS vltotalexcluirrca
            FROM
                resultante1 r1
            ORDER BY
                r1.codentidade,
                r1.coditemvisao
        ) LOOP
            IF ( li.codentidade <> v_codentidade ) THEN
                /*novo rca(esta ordenado por rca)*/
                
                /*insere o log do total excluido do rca no mes*/
                IF nvl(v_codentidade, 0) <> 0 THEN
                    INSERT INTO __FNV_GET_PREFIXOBJECTSDB__objetivossinergianaomovrca (
                        ano,
                        mes,
                        rca,
                        vltotalobjetnaomovexcluido,
                        vltotalobjetnaomovincluido
                    ) VALUES (
                        li.ano,
                        li.mes,
                        v_codentidade,
                        v_valor_total_excluir_rca,
                        v_valor_total_incluido_rca
                    );
                    COMMIT;
                END IF;
                v_codentidade := li.codentidade;
                v_valor_total_excluir_rca := li.vltotalexcluirrca;
                v_valor_total_incluido_rca := 0;
                dbms_output.put_line('novo rca: '
                                        || li.codentidade
                                        || ' valortotexcl: '
                                        || v_valor_total_excluir_rca);
            END IF;
            v_existe := 0;
            
            /*insere o log do item do laco, independente se vai excluir ou nao*/
            INSERT INTO __FNV_GET_PREFIXOBJECTSDB__objetivositensnaomov (
                codfilial,
                codentidade,
                coditemvisao,
                codgrupogiro,
                valor,
                ano,
                mes,
                excluir,
                motivo
            ) VALUES (
                li.codfilial,
                li.codentidade,
                li.coditemvisao,
                li.codgrupogiro,
                li.valor,
                li.ano,
                li.mes,
                li.excluir,
                li.mensagem
            );
            COMMIT;
            IF li.excluir = 1 AND v_valor_total_excluir_rca > 0 THEN
                /*somente se registro marcado para excluir*/
                v_valor_excluir := li.valor;
                v_valor_restante := v_valor_excluir;
                SELECT
                    COUNT(1)
                INTO v_qtitensgrupo
                FROM
                    __FNV_GET_PREFIXOBJECTSDB__objetivossinergia o
                WHERE
                    o.codcampanhasinergia = 0
                    AND o.codentidade = li.codentidade
                    AND o.codgrupogiro = li.codgrupogiro
                    AND o.ano = v_ano_atual
                    AND lower(TRIM(o.mes)) = lower(TRIM(v_mes_atual));
                v_valor_por_item := v_valor_excluir / v_qtitensgrupo;
                dbms_output.put_line('excluindo o item '
                                        || li.coditemvisao
                                        || ' valor: '
                                        || v_valor_excluir
                                        || ' valor por item: '
                                        || v_valor_por_item
                                        || ' qtitensgrupo: '
                                        || v_qtitensgrupo);
                IF v_valor_total_incluido_rca < v_valor_total_excluir_rca THEN
                    /*inclusao das metas excluidas no mes seguinte. 
                    somente entra aqui se ainda nao atingiu o total a excluir do rca, senao pula*/
                    dbms_output.put_line(' tem valor a excluir, entrando no laco de inclusao');
                    FOR la IN (
                        SELECT
                            o.codobjetivosinergia,
                            o.codentidade,
                            o.coditemvisao,
                            o.valor,
                            MIN(nvl(p.pesoliq, 1)) AS pesoliq,
                            MIN(nvl(p.qtunitcx, 1)) AS qtunitcx
                        FROM
                            __FNV_GET_PREFIXOBJECTSDB__objetivossinergia   o
                            LEFT OUTER JOIN __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv     g ON ( g.codvisivelgrupo = o.coditemvisao )
                            LEFT OUTER JOIN __FNV_GET_PREFIXOBJECTSDB__integgrupoprod      ig ON ( ig.codgrupoprod = g.codgrupoprod )
                            LEFT OUTER JOIN jumbo.pcprodut         p ON ( to_char(p.codprod) = to_char(nvl(to_char(ig.codprod), o.coditemvisao
                            )) )
                        WHERE
                            o.codcampanhasinergia = 0
                            AND o.codentidade = li.codentidade
                            AND o.codgrupogiro = li.codgrupogiro
                            AND o.ano = v_ano_atual
                            AND lower(TRIM(o.mes)) = lower(TRIM(v_mes_atual))
                        GROUP BY
                            o.codobjetivosinergia,
                            o.codentidade,
                            o.coditemvisao,
                            o.valor
                        ORDER BY
                            6
                    ) LOOP
                        dbms_output.put_line('acrescentando no item ' || la.coditemvisao);
                        v_peso1cx := la.pesoliq * la.qtunitcx;
                        IF ( MOD(v_valor_por_item, v_peso1cx) > 0 ) THEN
                            v_valor_acrescentar := ( trunc(v_valor_por_item / v_peso1cx, 0) + 1 ) * v_peso1cx;
                        ELSE
                            v_valor_acrescentar := v_valor_por_item;
                        END IF;
                        /* para nao arredondar para caixa, comentar o if anterior e descomentar essa linha abaixo
                        v_valor_acrescentar := v_valor_por_item;*/
                        INSERT INTO __FNV_GET_PREFIXOBJECTSDB__objetivossinergialog (
                            data,
                            codobjetivosinergia,
                            valorant,
                            valor,
                            obs,
                            codusuariosis
                        ) VALUES (
                            sysdate,
                            la.codobjetivosinergia,
                            la.valor,
                            nvl(la.valor, 0) + v_valor_acrescentar,
                            'ACRESCIMO POR EXCLUSAO DO ITEM DO MES ANTERIOR('
                            || li.coditemvisao
                            || '='
                            || li.valor
                            || ')',
                            142
                        );
                        UPDATE __FNV_GET_PREFIXOBJECTSDB__objetivossinergia o
                        SET
                            o.valor = nvl(o.valor, 0) + v_valor_acrescentar
                        WHERE
                            o.codobjetivosinergia = la.codobjetivosinergia;
                        COMMIT;
                        v_valor_restante := v_valor_restante - v_valor_acrescentar;
                        v_valor_total_incluido_rca := v_valor_total_incluido_rca + v_valor_acrescentar;
                        IF v_valor_restante <= 0 OR v_valor_total_incluido_rca >= v_valor_total_excluir_rca THEN
                            EXIT;
                        END IF;
                    END LOOP;
                END IF;
                
                /*log e excluisao do registro nao movimentado*/
                dbms_output.put_line('excluindo objeto do item: '
                                        || li.coditemvisao
                                        || ' valor: '
                                        || li.valor);
                INSERT INTO __FNV_GET_PREFIXOBJECTSDB__objetivossinergialog (
                    data,
                    codobjetivosinergia,
                    valorant,
                    valor,
                    obs,
                    codusuariosis
                ) VALUES (
                    sysdate,
                    li.codobjetivosinergia,
                    li.valor,
                    0,
                    'EXCLUSAO DO ITEM POR NAO MOVIMENTACAO',
                    142
                );
                DELETE FROM __FNV_GET_PREFIXOBJECTSDB__objetivossinergia o
                WHERE
                    o.codobjetivosinergia = li.codobjetivosinergia;
                COMMIT;
            END IF;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END atualizar_objetivos_naomov_mes;
    PROCEDURE gerar_hist_evol_objet_sinergia (
        p_dtref DATE DEFAULT NULL
    ) IS
        v_dataref   DATE;
        v_anoref    NUMBER;
        v_mesref    VARCHAR2(100);
        v_existe    NUMBER;
    BEGIN
        v_dataref := trunc(nvl(p_dtref, sysdate));
        v_mesref := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_char(v_dataref, 'mm'));
        v_anoref := to_char(v_dataref, 'yyyy');
        FOR li IN (
            SELECT
                o.*,                
                case 
                    when nvl(o.realizado,0) > (nvl(o.valor,0) * nvl(o.percmaxating,100) / 100) then
                        nvl(o.valor,0) * nvl(o.percmaxating,100) / 100
                    else
                        nvl(o.realizado,0)
                end as realizado_liq                        
            FROM
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia o
            WHERE
                o.ano = v_anoref
                AND lower(TRIM(o.mes)) = lower(TRIM(v_mesref))
            ORDER BY
                o.codentidade,
                o.codcampanhasinergia,
                o.coditemvisao
        ) LOOP
            v_existe := 0;
            SELECT
                COUNT(1)
            INTO v_existe
            FROM
                __FNV_GET_PREFIXOBJECTSDB__evolobjetsinergia ev
            WHERE
                ev.codobjetivosinergia = li.codobjetivosinergia
                AND trunc(ev.data) = v_dataref;
                
            IF v_existe = 0 THEN
                INSERT INTO __FNV_GET_PREFIXOBJECTSDB__evolobjetsinergia ev (
                    ev.codobjetivosinergia,
                    ev.data,
                    ev.realizado
                ) VALUES (
                    li.codobjetivosinergia,
                    v_dataref,
                    li.realizado_liq
                );
            ELSE
                UPDATE __FNV_GET_PREFIXOBJECTSDB__evolobjetsinergia ev
                SET
                    ev.realizado = li.realizado_liq
                WHERE
                    ev.codobjetivosinergia = li.codobjetivosinergia
                    AND trunc(ev.data) = v_dataref;
            END IF;
        END LOOP;
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            inserir_erro(p_linha => $$plsql_line);
    END;
    
    
    
    /**
    * Faz varias chegagens ao inserir uma nota em pcnfsaid (acionado via trigger)
    * devido as particularidades de table mutant e autonomous_transaction nao encontrar
    * o registro inteiro recem inserido, os dados sao atribuidos MANUALMENTE ao parametro na trigger 
    * jumbo.__FNV_GET_PREFIXOBJECTSDB__pcnfsaid_aft_ins. Portanto, dados a serem utilizados nesta procedure devem ser antes
    * inseridos no parametro na referida trigger, ou virao nulos.
    */
    PROCEDURE PROCESSAMENTOS_POS_NFSAIDA(P_REG JUMBO.PCNFSAID%ROWTYPE) AS
        --PRAGMA autonomous_transaction;
        v_div __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__checagens_notas_saida%rowtype;
        v_cli jumbo.pcclient%rowtype;
        v_calculast VARCHAR2(1) DEFAULT 'S';
    BEGIN
        if p_reg.numtransvenda is not null then
            
            v_div.numtransvenda := p_reg.numtransvenda;
            v_div.codfilial := p_reg.codfilial;
            v_div.numnota := p_reg.numnota;
            v_div.numcar := p_reg.numcar;
            v_div.dtsaida := p_reg.dtsaida;
            v_div.codcli := p_reg.codcli;
            v_div.divergencias := '';           
            
            select * into v_cli from jumbo.pcclient where codcli = p_reg.codcli;
            if nvl(v_cli.consumidorfinal,'X') = 'S' then
                if nvl(v_cli.contribuinte,'N') = 'S' then
                    v_div.divergencias := v_div.divergencias || '|CAMPO CONSUMIDORFINAL=' ||nvl(v_cli.consumidorfinal,'X') || ' E CAMPO contribuinte=' ||NVL(v_cli.contribuinte,'X');
                end if;
                if nvl(v_cli.tipofj,'x') = 'J' AND upper(replace(trim(NVL(v_cli.ieent,'X')),' ','')) NOT IN ('ISENTO','ISENTA') then
                    v_div.divergencias := v_div.divergencias || '|CAMPO CONSUMIDORFINAL=' ||nvl(v_cli.consumidorfinal,'X') || ' E CAMPO IEENT=' ||NVL(v_cli.ieent,'X');
                end if;
            elsif nvl(v_cli.tipofj,'x') = 'J' AND upper(replace(trim(NVL(v_cli.ieent,'X')),' ','')) NOT IN ('ISENTO','ISENTA') then                                            
                if nvl(v_cli.calculast,'N') = 'N' then                
                    v_div.divergencias := v_div.divergencias || '|CAMPO CONSUMIDORFINAL=' ||nvl(v_cli.consumidorfinal,'X') || ' E CAMPO IEENT=' ||NVL(v_cli.ieent,'X') || ' E CAMPO CALCULAST=' || nvl(v_cli.calculast,'X');
                end if;
            end if;
            
            if length(v_div.divergencias) > 0 then
                insert into __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__checagens_notas_saida values v_div;
                __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.commitar_se_possivel();
            end if;

        end if;
    EXCEPTION
        WHEN OTHERS THEN
            inserir_erro(p_linha => $$plsql_line);
    END PROCESSAMENTOS_POS_NFSAIDA;
    
    
    /**
    * Faz varias chegagens ao inserir uma nota em pcmov (acionado via trigger)
    * devido as particularidades de table mutant e autonomous_transaction nao encontrar
    * o registro inteiro recem inserido, os dados sao atribuidos MANUALMENTE ao parametro na trigger 
    * jumbo.__FNV_GET_PREFIXOBJECTSDB__pcmov_aft_ins. Portanto, dados a serem utilizados nesta procedure devem ser antes
    * inseridos no parametro na referida trigger, ou virao nulos.
    */
    PROCEDURE CHECAGENS_ITENSNFSAIDA(P_REG JUMBO.PCMOV%ROWTYPE) AS
        --PRAGMA autonomous_transaction;
        v_div __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__checagens_notas_saida%rowtype;
        v_prod jumbo.pcprodut%rowtype;
        v_calculast VARCHAR2(1) DEFAULT 'S';
    BEGIN
        if p_reg.numtransvenda is not null then
            
            v_div.numtransvenda := p_reg.numtransvenda;
            v_div.codfilial := p_reg.codfilial;
            v_div.numnota := p_reg.numnota;
            v_div.numcar := p_reg.numcar;
            v_div.dtsaida := p_reg.dtmov;
            v_div.divergencias := '';
            
            v_div.codprod := P_REG.codprod;                
            v_div.divergencias := '';
            
            /*checagens tributarias*/
            if P_REG.sittribut = 10 then
                if P_REG.codfiscal not in (5403,6403,5910,6910) then
                    v_div.divergencias := v_div.divergencias || '|CST ' || P_REG.sittribut || ' COM CFOP ' || P_REG.codfiscal;
                end if;
                if nvl(P_REG.st,0) <= 0 then
                    v_div.divergencias := v_div.divergencias || '|CST ' || P_REG.sittribut || ' COM CFOP ' || P_REG.codfiscal || ' E SEM ST';
                end if;                    
            elsif P_REG.sittribut = 60 then
                if P_REG.codfiscal not in (5405,5409,6404,5910,6910,5927) then
                    v_div.divergencias := v_div.divergencias || '|CST ' || P_REG.sittribut || ' COM CFOP ' || P_REG.codfiscal;
                end if;
                if nvl(P_REG.st,0) > 0 then
                    v_div.divergencias := v_div.divergencias || '|CST ' || P_REG.sittribut || ' COM CFOP ' || P_REG.codfiscal || ' E COM ST('||P_REG.st||')';
                end if;                    
            end if;
            
            /*checagens cadastrais*/
            select * into v_prod from jumbo.pcprodut where codprod = p_reg.codprod;
            if (v_prod.codprod <> v_prod.codprodprinc) then
                v_div.divergencias := v_div.divergencias || '|CODPROD ' || v_prod.CODPROD || ' <> CODPRODMASTER OU CODPRODPRINC ' || v_prod.codprodprinc || ' ' || v_prod.codprodmaster;
            end if;
            
            if length(v_div.divergencias) > 0 then
                insert into __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__checagens_notas_saida values v_div;
                --commit;
            end if;
                
        end if;
    EXCEPTION
        WHEN OTHERS THEN
            --ROLLBACK;
            inserir_erro(p_linha => $$plsql_line);
    END CHECAGENS_ITENSNFSAIDA;
    
    /*atualiza a quantidade de clientes positivados no mes*/    
    procedure atualizar_posit_cli_mes(p_dtini date default last_day(add_months(trunc(sysdate),-1))+1, p_dtfim date default last_day(trunc(sysdate))) as
        p_entidade varchar2(100) default 'rca';
        p_nome_valor varchar2(100) default 'positivacao_cliente_mes';
    begin
        for li in (
            with clientes_jumbo as (
                SELECT
                    distinct 
                    s.codusur,
                    to_number(regexp_replace(s.cgc,'[^0-9]*')) as cgc
                FROM
                    jumbo.pcnfsaid s
                    join jumbo.pcmov m on (m.numtransvenda = s.numtransvenda)
                where
                    s.dtsaida between p_dtini and p_dtfim
                    and s.dtcancel is null
                    and m.dtcancel is null
                    and s.especie = 'NF'
                    and m.codoper IN ('S','SB')
                    and nvl(m.qt,m.qtcont) - nvl(m.qtdevol,0) > 0
            ),cliente_aurora as (
                SELECT   
                    distinct 
                    s.vendedor,
                    to_number(regexp_replace(s.cgc_destino,'[^0-9]*')) as cgc
                FROM
                    dados_vendas_origem s
                where
                    s.dt_emissao_nfsa between p_dtini and p_dtfim
                    and s.qtde_liquida_item > 0        
            ),clientes_juntos as (
                select * from clientes_jumbo
                union 
                select * from cliente_aurora
            )
            select codusur,count(cgc) as qt from clientes_juntos group by codusur order by 1,2
        ) loop
            begin
                begin
                    delete 
                    from 
                        __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade 
                    where 
                        entidade = p_entidade
                        and codentidade = li.codusur
                        and nome_valor = p_nome_valor
                        and periodo_ini_ref = p_dtini 
                        and periodo_fim_ref = p_dtfim;
                exception
                    when others then 
                        dbms_output.put_line(sqlerrm);
                        dbms_output.put_line(dbms_utility.format_error_backtrace());
                        inserir_erro(p_linha => $$plsql_line);
                        null;
                    
                end;
                insert into __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade(entidade,codentidade,nome_valor,periodo_ini_ref,periodo_fim_ref,valor,codsituacaoregistro) values (p_entidade,li.codusur,p_nome_valor,p_dtini,p_dtfim,li.qt,1);            
            exception 
                when others then
                    dbms_output.put_line(sqlerrm);
                    dbms_output.put_line(dbms_utility.format_error_backtrace());
                    inserir_erro(p_linha => $$plsql_line);                    
                    null;
            end;
        end loop;
        commit;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            inserir_erro(p_linha => $$plsql_line);
    end atualizar_posit_cli_mes;
    
    /*atualiza a quantidade de produtos positivados no mes*/    
    procedure atualizar_posit_prod_mes(p_dtini date default last_day(add_months(trunc(sysdate),-1))+1, p_dtfim date default last_day(trunc(sysdate))) as
        p_entidade varchar2(100) default 'rca';
        p_nome_valor varchar2(100) default 'positivacao_produto_mes';
    begin
        for li in (
            with produtos_jumbo as (
                SELECT
                    distinct 
                    s.codusur,
                    m.codprod
                FROM
                    jumbo.pcnfsaid s
                    join jumbo.pcmov m on (m.numtransvenda = s.numtransvenda)
                where
                    s.dtsaida between p_dtini and p_dtfim
                    and s.dtcancel is null
                    and m.dtcancel is null
                    and s.especie = 'NF'
                    and m.codoper IN ('S','SB')
                    and nvl(m.qt,m.qtcont) - nvl(m.qtdevol,0) > 0
            ),produtos_aurora as (
                SELECT   
                    distinct 
                    s.vendedor,
                    s.cd_item as codprod
                FROM
                    dados_vendas_origem s
                where
                    s.dt_emissao_nfsa between p_dtini and p_dtfim
                    and s.qtde_liquida_item > 0        
            ),produtos_juntos as (
                select * from produtos_jumbo
                union 
                select * from produtos_aurora
            )
            select codusur,count(codprod) as qt from produtos_juntos group by codusur order by 1,2
        ) loop
            begin
                begin
                    delete 
                    from 
                        __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade 
                    where 
                        entidade = p_entidade
                        and codentidade = li.codusur
                        and nome_valor = p_nome_valor
                        and periodo_ini_ref = p_dtini 
                        and periodo_fim_ref = p_dtfim;
                exception
                    when others then 
                        dbms_output.put_line(sqlerrm);
                        dbms_output.put_line(dbms_utility.format_error_backtrace());
                        inserir_erro(p_linha => $$plsql_line);
                        null;
                    
                end;
                insert into __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade(entidade,codentidade,nome_valor,periodo_ini_ref,periodo_fim_ref,valor,codsituacaoregistro) values (p_entidade,li.codusur,p_nome_valor,p_dtini,p_dtfim,li.qt,1);            
            exception 
                when others then
                    dbms_output.put_line(sqlerrm);
                    dbms_output.put_line(dbms_utility.format_error_backtrace());
                    inserir_erro(p_linha => $$plsql_line);                    
                    null;
            end;
        end loop;
        commit;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            inserir_erro(p_linha => $$plsql_line);
    end atualizar_posit_prod_mes;
    
    /*atualiza os valores de venda no mes*/    
    procedure atualizar_venda_rca_mes(p_dtini date default last_day(add_months(trunc(sysdate),-1))+1, p_dtfim date default last_day(trunc(sysdate))) as
        p_entidade varchar2(100) default 'rca';
        p_nome_valor1 varchar2(100) default 'peso_venda_mes';
        p_nome_valor2 varchar2(100) default 'valor_venda_mes';
    begin
        for li in (
            /*comando sql visao rca*/
            WITH usuarios AS (
                SELECT
                    codusuariosis AS codusuariosis,
                    nome          AS nome
                FROM
                    (
                        SELECT
                            pcusuari.codusur AS codusuariosis,
                            pcusuari.nome    AS nome
                        FROM
                            jumbo.pcusuari pcusuari
                        GROUP BY
                            pcusuari.codusur,
                            pcusuari.nome
                    )
                GROUP BY
                    codusuariosis,
                    nome
            ), valoressaida_0 AS (
                SELECT
                    pcnfsaid.codusur                                                                                               AS codusur,
                    nvl(nvl(pcmov.pesoliq, pcprodut.pesoliq), 0) * ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) - nvl(pcmov.qtdevol, 0) ) AS pesototal,
                    nvl(nvl(pcmov.punit, pcmov.punitcont), 0) * ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) - nvl(pcmov.qtdevol, 0) )    AS valortotal
                FROM
                            jumbo.pcnfsaid pcnfsaid
                    JOIN jumbo.pcmov             pcmov ON ( pcmov.numtransvenda = pcnfsaid.numtransvenda
                                                AND pcnfsaid.dtcancel IS NULL )
                    JOIN jumbo.pcprodut          pcprodut ON ( pcprodut.codprod = pcmov.codprod )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( pcnfsaid.codusur = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                WHERE
                    pcnfsaid.dtsaida BETWEEN p_dtini AND p_dtfim
                    AND pcmov.codoper IN ( 'S' )
                    AND pcnfsaid.especie = 'NF'
                UNION ALL
                SELECT
                    pcnfent.codusurdevol AS codusur,
                    nvl(nvl(pcmov.pesoliq, pcprodut.pesoliq), 0) *
                    CASE
                        WHEN nvl(pcmov.qtdevol, 0) > 0 THEN
                                nvl(pcmov.qtdevol, 0)
                        ELSE
                            ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) )
                    END
                    * - 1                AS pesototal,
                    nvl(nvl(pcmov.punit, pcmov.punitcont), 0) *
                    CASE
                        WHEN nvl(pcmov.qtdevol, 0) > 0 THEN
                                nvl(pcmov.qtdevol, 0)
                        ELSE
                            ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) )
                    END
                    * - 1                AS valortotal
                FROM
                            jumbo.pcnfent pcnfent
                    JOIN jumbo.pcmov             pcmov ON ( pcmov.numtransent = pcnfent.numtransent
                                                AND pcnfent.dtcancel IS NULL
                                                AND nvl(pcmov.numped, 0) = 0 )
                    JOIN jumbo.pcprodut          pcprodut ON ( pcprodut.codprod = pcmov.codprod )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( pcnfent.codusurdevol = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                WHERE
                    pcnfent.dtent BETWEEN p_dtini AND p_dtfim
                    AND pcmov.codoper IN ( 'ED' )
                    AND pcnfent.especie = 'NF'
                UNION ALL
                SELECT
                    dados_vendas_origem.vendedor                   AS codusur,
                    nvl(dados_vendas_origem.peso_liquido_item, 0)  AS pesototal,
                    nvl(dados_vendas_origem.valor_liquido_item, 0) AS valortotal
                FROM
                            __FNV_GET_NOMESCHEMA__.dados_vendas_origem dados_vendas_origem
                    JOIN jumbo.pcprodut          pcprodut ON ( pcprodut.codprod = dados_vendas_origem.cd_item )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( dados_vendas_origem.vendedor = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                WHERE
                    dados_vendas_origem.dt_emissao_nfsa BETWEEN p_dtini AND p_dtfim
            ), resultante_intermediaria AS (
                SELECT
                    usuarios.codusuariosis    AS codusuariosis,
                    usuarios.nome             AS nome,
                    valoressaida_0.pesototal  AS pesototal_0,
                    valoressaida_0.valortotal AS valortotal_0
                FROM
                    valoressaida_0
                    LEFT OUTER JOIN usuarios ON ( usuarios.codusuariosis = valoressaida_0.codusur )
            ), resultante_final AS (
                SELECT
                    r.codusuariosis             AS codusuariosis,
                    r.nome                      AS nome,
                    SUM(nvl(r.pesototal_0, 0))  AS pesototal_0,
                    SUM(nvl(r.valortotal_0, 0)) AS valortotal_0
                FROM
                    resultante_intermediaria r
                GROUP BY
                    r.codusuariosis,
                    r.nome
            )
            SELECT
                *
            FROM
                resultante_final
            ORDER BY
                1 ASC
        ) loop
            begin
                begin
                    delete 
                    from 
                        __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade 
                    where 
                        entidade = p_entidade
                        and codentidade = li.codusuariosis
                        and nome_valor in (p_nome_valor1,p_nome_valor2)
                        and periodo_ini_ref = p_dtini 
                        and periodo_fim_ref = p_dtfim;                        
                exception
                    when others then 
                        dbms_output.put_line(sqlerrm);
                        dbms_output.put_line(dbms_utility.format_error_backtrace());
                        inserir_erro(p_linha => $$plsql_line);
                        null;
                    
                end;
                insert into __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade(entidade,codentidade,nome_valor,periodo_ini_ref,periodo_fim_ref,valor,codsituacaoregistro) values (p_entidade,li.codusuariosis,p_nome_valor1,p_dtini,p_dtfim,li.pesototal_0,1);            
                insert into __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade(entidade,codentidade,nome_valor,periodo_ini_ref,periodo_fim_ref,valor,codsituacaoregistro) values (p_entidade,li.codusuariosis,p_nome_valor2,p_dtini,p_dtfim,li.valortotal_0,1);            
            exception 
                when others then
                    dbms_output.put_line(sqlerrm);
                    dbms_output.put_line(dbms_utility.format_error_backtrace());
                    inserir_erro(p_linha => $$plsql_line);                    
                    null;
            end;
        end loop;
        commit;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            inserir_erro(p_linha => $$plsql_line);
    end atualizar_venda_rca_mes;
    
    /*atualiza clientes nao positivados no mes*/    
    procedure atualiz_clientes_naopos_mes(p_dtini date default last_day(add_months(trunc(sysdate),-1))+1, p_dtfim date default last_day(trunc(sysdate))) as
        p_entidade varchar2(100) default 'rca';
        p_nome_valor1 varchar2(100) default 'clientes_naoposit_mes';
        v_codusur number default 0;
        v_valor clob;
    begin
        for li in (
            WITH usuarios AS (
                SELECT
                    codusuariosis AS codusuariosis,
                    nome          AS nome
                FROM
                    (
                        SELECT
                            pcusuari.codusur AS codusuariosis,
                            pcusuari.nome    AS nome
                        FROM
                            jumbo.pcusuari pcusuari
                        GROUP BY
                            pcusuari.codusur,
                            pcusuari.nome
                    )
                GROUP BY
                    codusuariosis,
                    nome
            ), clientes AS (
                SELECT
                    cgccli   AS cgccli,
                    cliente  AS cliente,
                    fantasia AS fantasia
                FROM
                    (
                        SELECT
                            to_number(regexp_replace(pcclient.cgcent,'[^0-9]*')) AS cgccli,
                            MAX(regexp_replace(pcclient.cliente,'[\"&\\n\\t\\r]',' '))                                                                  AS cliente,
                            MAX(regexp_replace(pcclient.fantasia,'[\"&\\n\\t\\r]',' '))                                                                 AS fantasia
                        FROM
                            jumbo.pcclient pcclient
                        GROUP BY
                            to_number(regexp_replace(pcclient.cgcent,'[^0-9]*'))
                        UNION
                        SELECT
                            to_number(regexp_replace(__FNV_GET_PREFIXOBJECTSDB__pessoa_origem.numcnpjcpf,'[^0-9]*')) AS cgccli,                            
                            MAX(regexp_replace(__FNV_GET_PREFIXOBJECTSDB__pessoa_origem.nomerazao,'[\"&\\n\\t\\r]',' '))                                                                    AS cliente,
                            MAX(regexp_replace(__FNV_GET_PREFIXOBJECTSDB__pessoa_origem.fantasia,'[\"&\\n\\t\\r]',' '))                                                                    AS fantasia
                        FROM
                                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem __FNV_GET_PREFIXOBJECTSDB__cliente_origem
                            JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pessoa_origem __FNV_GET_PREFIXOBJECTSDB__pessoa_origem ON ( __FNV_GET_PREFIXOBJECTSDB__cliente_origem.codpessoaorigem = __FNV_GET_PREFIXOBJECTSDB__pessoa_origem.codpessoa )
                        WHERE
                            NOT EXISTS (
                                SELECT
                                    1
                                FROM
                                    jumbo.pcclient
                                WHERE
                                    to_number(regexp_replace(pcclient.cgcent,'[^0-9]*')) = to_number(regexp_replace(__FNV_GET_PREFIXOBJECTSDB__pessoa_origem.numcnpjcpf,'[^0-9]*'))
                            )
                        GROUP BY
                            to_number(regexp_replace(__FNV_GET_PREFIXOBJECTSDB__pessoa_origem.numcnpjcpf,'[^0-9]*'))
                    )
                GROUP BY
                    cgccli,
                    cliente,
                    fantasia
            ), valoressaida_0 AS (
                SELECT
                    to_number(regexp_replace(pcnfsaid.cgc,'[^0-9]*'))                            AS cgccli,
                    pcnfsaid.codusur                                                                                               AS codusur,
                    nvl(nvl(pcmov.pesoliq, pcprodut.pesoliq), 0) * ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) - nvl(pcmov.qtdevol, 0) ) AS pesototal
                FROM
                            jumbo.pcnfsaid pcnfsaid
                    JOIN jumbo.pcmov             pcmov ON ( pcmov.numtransvenda = pcnfsaid.numtransvenda
                                                AND pcnfsaid.dtcancel IS NULL )
                    JOIN jumbo.pcprodut          pcprodut ON ( pcprodut.codprod = pcmov.codprod )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( pcnfsaid.codusur = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                WHERE
                    pcnfsaid.dtsaida BETWEEN add_months(p_dtini,-1) AND last_day(add_months(p_dtini,-1))
                    AND pcmov.codoper IN ( 'S' )
                    AND pcnfsaid.especie = 'NF'
                UNION ALL
                SELECT
                    to_number(regexp_replace(pcnfent.cgc,'[^0-9]*')) AS cgccli,
                    pcnfent.codusurdevol                                                               AS codusur,
                    nvl(nvl(pcmov.pesoliq, pcprodut.pesoliq), 0) *
                    CASE
                        WHEN nvl(pcmov.qtdevol, 0) > 0 THEN
                                nvl(pcmov.qtdevol, 0)
                        ELSE
                            ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) )
                    END
                    * - 1                                                                              AS pesototal
                FROM
                            jumbo.pcnfent pcnfent
                    JOIN jumbo.pcmov             pcmov ON ( pcmov.numtransent = pcnfent.numtransent
                                                AND pcnfent.dtcancel IS NULL
                                                AND nvl(pcmov.numped, 0) = 0 )
                    JOIN jumbo.pcprodut          pcprodut ON ( pcprodut.codprod = pcmov.codprod )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( pcnfent.codusurdevol = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                WHERE
                    pcnfent.dtent BETWEEN add_months(p_dtini,-1) AND last_day(add_months(p_dtini,-1))
                    AND pcmov.codoper IN ( 'ED' )
                    AND pcnfent.especie = 'NF'
                UNION ALL
                SELECT
                    to_number(regexp_replace(dados_vendas_origem.cgc_destino,'[^0-9]*')) AS cgccli,
                    dados_vendas_origem.vendedor                                                                           AS codusur,
                    nvl(dados_vendas_origem.peso_liquido_item, 0)                                                          AS pesototal
                FROM
                            __FNV_GET_NOMESCHEMA__.dados_vendas_origem dados_vendas_origem
                    JOIN jumbo.pcprodut          pcprodut ON ( pcprodut.codprod = dados_vendas_origem.cd_item )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( dados_vendas_origem.vendedor = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                WHERE
                    dados_vendas_origem.dt_emissao_nfsa BETWEEN add_months(p_dtini,-1) AND last_day(add_months(p_dtini,-1))
            ), valoressaida_1 AS (
                SELECT
                    to_number(regexp_replace(pcnfsaid.cgc,'[^0-9]*'))                            AS cgccli,
                    pcnfsaid.codusur                                                                                               AS codusur,
                    nvl(nvl(pcmov.pesoliq, pcprodut.pesoliq), 0) * ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) - nvl(pcmov.qtdevol, 0) ) AS pesototal
                FROM
                            jumbo.pcnfsaid pcnfsaid
                    JOIN jumbo.pcmov             pcmov ON ( pcmov.numtransvenda = pcnfsaid.numtransvenda
                                                AND pcnfsaid.dtcancel IS NULL )
                    JOIN jumbo.pcprodut          pcprodut ON ( pcprodut.codprod = pcmov.codprod )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( pcnfsaid.codusur = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                WHERE
                    pcnfsaid.dtsaida BETWEEN p_dtini AND p_dtfim
                    AND pcmov.codoper IN ( 'S' )
                    AND pcnfsaid.especie = 'NF'
                UNION ALL
                SELECT
                    to_number(regexp_replace(pcnfent.cgc,'[^0-9]*')) AS cgccli,
                    pcnfent.codusurdevol                                                               AS codusur,
                    nvl(nvl(pcmov.pesoliq, pcprodut.pesoliq), 0) *
                    CASE
                        WHEN nvl(pcmov.qtdevol, 0) > 0 THEN
                                nvl(pcmov.qtdevol, 0)
                        ELSE
                            ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) )
                    END
                    * - 1                                                                              AS pesototal
                FROM
                            jumbo.pcnfent pcnfent
                    JOIN jumbo.pcmov             pcmov ON ( pcmov.numtransent = pcnfent.numtransent
                                                AND pcnfent.dtcancel IS NULL
                                                AND nvl(pcmov.numped, 0) = 0 )
                    JOIN jumbo.pcprodut          pcprodut ON ( pcprodut.codprod = pcmov.codprod )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( pcnfent.codusurdevol = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                WHERE
                    pcnfent.dtent BETWEEN p_dtini AND p_dtfim
                    AND pcmov.codoper IN ( 'ED' )
                    AND pcnfent.especie = 'NF'
                UNION ALL
                SELECT
                    to_number(regexp_replace(dados_vendas_origem.cgc_destino,'[^0-9]*')) AS cgccli,
                    dados_vendas_origem.vendedor                                                                           AS codusur,
                    nvl(dados_vendas_origem.peso_liquido_item, 0)                                                          AS pesototal
                FROM
                            __FNV_GET_NOMESCHEMA__.dados_vendas_origem dados_vendas_origem
                    JOIN jumbo.pcprodut          pcprodut ON ( pcprodut.codprod = dados_vendas_origem.cd_item )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( dados_vendas_origem.vendedor = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                WHERE
                    dados_vendas_origem.dt_emissao_nfsa BETWEEN p_dtini AND p_dtfim
            ), resultante_intermediaria AS (
                SELECT
                    usuarios.codusuariosis   AS codusuariosis,
                    usuarios.nome            AS nome,
                    clientes.cgccli          AS cgccli,
                    clientes.cliente         AS cliente,
                    clientes.fantasia        AS fantasia,
                    valoressaida_0.pesototal AS pesototal_0,
                    NULL                     AS pesototal_1
                FROM
                    valoressaida_0
                    LEFT OUTER JOIN usuarios ON ( usuarios.codusuariosis = valoressaida_0.codusur )
                    LEFT OUTER JOIN clientes ON ( to_number(regexp_replace(clientes.cgccli,'[^0-9]*')) = to_number(regexp_replace(valoressaida_0.cgccli,'[^0-9]*')) )
                UNION ALL
                SELECT
                    usuarios.codusuariosis   AS codusuariosis,
                    usuarios.nome            AS nome,
                    clientes.cgccli          AS cgccli,
                    clientes.cliente         AS cliente,
                    clientes.fantasia        AS fantasia,
                    NULL                     AS pesototal_0,
                    valoressaida_1.pesototal AS pesototal_1
                FROM
                    valoressaida_1
                    LEFT OUTER JOIN usuarios ON ( usuarios.codusuariosis = valoressaida_1.codusur )
                    LEFT OUTER JOIN clientes ON ( to_number(regexp_replace(clientes.cgccli,'[^0-9]*')) = to_number(regexp_replace(valoressaida_1.cgccli,'[^0-9]*')) )
            ), resultante_final AS (
                SELECT
                    r.codusuariosis            AS codusuariosis,
                    r.nome                     AS nome,
                    r.cgccli                   AS cgccli,
                    r.cliente                  AS cliente,
                    r.fantasia                 AS fantasia,
                    SUM(nvl(r.pesototal_0, 0)) AS pesototal_0,
                    SUM(nvl(r.pesototal_1, 0)) AS pesototal_1        
                FROM
                    resultante_intermediaria r
                GROUP BY
                    r.codusuariosis,
                    r.nome,
                    r.cgccli,
                    r.cliente,
                    r.fantasia
                having
                    SUM(nvl(r.pesototal_0, 0)) > 0 
                    and SUM(nvl(r.pesototal_1, 0)) <= 0
            )
            SELECT
                *
            FROM
                resultante_final
            ORDER BY
                1 ASC,
                3 ASC
        ) loop 
            if (v_codusur <> li.codusuariosis and dbms_lob.getlength(v_valor) > 0) then
                v_valor := concat('[',concat(v_valor,']'));
                begin
                    delete 
                    from 
                        __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade 
                    where 
                        entidade = p_entidade
                        and codentidade = v_codusur
                        and nome_valor in (p_nome_valor1)
                        and periodo_ini_ref = p_dtini 
                        and periodo_fim_ref = p_dtfim;                        
                exception
                    when others then 
                        dbms_output.put_line(sqlerrm);
                        dbms_output.put_line(dbms_utility.format_error_backtrace());
                        inserir_erro(p_linha => $$plsql_line);
                        null;                    
                end;
                v_valor := replace(v_valor,'[,','[');
                insert into __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade(entidade,codentidade,nome_valor,periodo_ini_ref,periodo_fim_ref,valor,dadosclob,codsituacaoregistro) values (p_entidade,v_codusur,p_nome_valor1,p_dtini,p_dtfim,0,v_valor,1);
                v_valor := null;
            else
                if (v_valor is null) then
                    v_valor := '';
                end if;
                if dbms_lob.getlength(v_valor) = 0 then
                    v_valor := '';
                else 
                    v_valor := concat(v_valor, ',');
                end if;
                v_valor := concat(v_valor,'{\"cgccli\":\"' || nvl(li.cgccli,'') || '\",\"cliente\":\"'||nvl(li.cliente,'')||'\",\"fantasia\":\"'||nvl(li.fantasia,'')||'\",\"pesototal_0\":\"'||nvl(li.pesototal_0,0)||'\",\"pesototal_1\":\"'||nvl(li.pesototal_1,0)||'\"}');
            end if;
            v_codusur := li.codusuariosis;
        end loop; 
        if (dbms_lob.getlength(v_valor) > 0) then
            v_valor := concat('[',concat(v_valor,']'));
            begin
                delete 
                from 
                    __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade 
                where 
                    entidade = p_entidade
                    and codentidade = v_codusur
                    and nome_valor in (p_nome_valor1)
                    and periodo_ini_ref = p_dtini 
                    and periodo_fim_ref = p_dtfim;                        
            exception
                when others then 
                    dbms_output.put_line(sqlerrm);
                    dbms_output.put_line(dbms_utility.format_error_backtrace());
                    inserir_erro(p_linha => $$plsql_line);
                    null;                    
            end;
            v_valor := replace(v_valor,'[,','[');
            insert into __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade(entidade,codentidade,nome_valor,periodo_ini_ref,periodo_fim_ref,valor,dadosclob,codsituacaoregistro) values (p_entidade,v_codusur,p_nome_valor1,p_dtini,p_dtfim,0,v_valor,1);
            v_valor := null;
        end if;
        commit;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            inserir_erro(p_linha => $$plsql_line);
    end atualiz_clientes_naopos_mes;
    
    /*atualiza os produtos nao positivados no mes*/    
    procedure atualiz_prod_naopos_mes(p_dtini date default last_day(add_months(trunc(sysdate),-1))+1, p_dtfim date default last_day(trunc(sysdate))) as
        p_entidade varchar2(100) default 'rca';
        p_nome_valor1 varchar2(100) default 'produtos_naoposit_mes';
        v_codusur number default 0;
        v_valor clob;
    begin
        for li in (
            WITH usuarios AS (
                SELECT
                    codusuariosis AS codusuariosis,
                    nome          AS nome
                FROM
                    (
                        SELECT
                            pcusuari.codusur AS codusuariosis,
                            pcusuari.nome    AS nome
                        FROM
                            jumbo.pcusuari pcusuari
                        GROUP BY
                            pcusuari.codusur,
                            pcusuari.nome
                    )
                GROUP BY
                    codusuariosis,
                    nome
            ), produtos AS (
                SELECT
                    codprod   AS codprod,
                    descricao AS descricao
                FROM
                    (
                        SELECT
                            to_char(pcprodut.codprod) AS codprod,
                            pcprodut.descricao        AS descricao
                        FROM
                            jumbo.pcprodut pcprodut
                        GROUP BY
                            to_char(pcprodut.codprod),
                            pcprodut.descricao
                    )
                GROUP BY
                    codprod,
                    descricao
            ), valoressaida_0 AS (
                SELECT
                    to_char(pcmov.codprod)                                                                                         AS codprod,
                    pcnfsaid.codusur                                                                                               AS codusur,
                    nvl(nvl(pcmov.pesoliq, pcprodut.pesoliq), 0) * ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) - nvl(pcmov.qtdevol, 0) ) AS pesototal
                FROM
                            jumbo.pcnfsaid pcnfsaid
                    JOIN jumbo.pcmov                  pcmov ON ( pcmov.numtransvenda = pcnfsaid.numtransvenda
                                                AND pcnfsaid.dtcancel IS NULL )
                    JOIN jumbo.pcprodut               pcprodut ON ( pcprodut.codprod = pcmov.codprod )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis      __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( pcnfsaid.codusur = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                    LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod  __FNV_GET_PREFIXOBJECTSDB__integgrupoprod ON ( __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codprod = pcprodut.codprod )
                    LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv ON ( __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codgrupoprod = __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codgrupoprod )
                WHERE
                    pcnfsaid.dtsaida BETWEEN add_months(p_dtini,-1) AND last_day(add_months(p_dtini,-1))
                    AND pcmov.codoper IN ( 'S' )
                    AND pcnfsaid.especie = 'NF'
                UNION ALL
                SELECT
                    to_char(pcmov.codprod) AS codprod,
                    pcnfent.codusurdevol   AS codusur,
                    nvl(nvl(pcmov.pesoliq, pcprodut.pesoliq), 0) *
                    CASE
                        WHEN nvl(pcmov.qtdevol, 0) > 0 THEN
                                nvl(pcmov.qtdevol, 0)
                        ELSE
                            ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) )
                    END
                    * - 1                  AS pesototal
                FROM
                            jumbo.pcnfent pcnfent
                    JOIN jumbo.pcmov                  pcmov ON ( pcmov.numtransent = pcnfent.numtransent
                                                AND pcnfent.dtcancel IS NULL
                                                AND nvl(pcmov.numped, 0) = 0 )
                    JOIN jumbo.pcprodut               pcprodut ON ( pcprodut.codprod = pcmov.codprod )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis      __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( pcnfent.codusurdevol = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                    LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod  __FNV_GET_PREFIXOBJECTSDB__integgrupoprod ON ( __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codprod = pcprodut.codprod )
                    LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv ON ( __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codgrupoprod = __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codgrupoprod )
                WHERE
                    pcnfent.dtent BETWEEN add_months(p_dtini,-1) AND last_day(add_months(p_dtini,-1))
                    AND pcmov.codoper IN ( 'ED' )
                    AND pcnfent.especie = 'NF'
                UNION ALL
                SELECT
                    to_char(dados_vendas_origem.cd_item)          AS codprod,
                    dados_vendas_origem.vendedor                  AS codusur,
                    nvl(dados_vendas_origem.peso_liquido_item, 0) AS pesototal
                FROM
                            __FNV_GET_NOMESCHEMA__.dados_vendas_origem dados_vendas_origem
                    JOIN jumbo.pcprodut               pcprodut ON ( pcprodut.codprod = dados_vendas_origem.cd_item )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis      __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( dados_vendas_origem.vendedor = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                    LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod  __FNV_GET_PREFIXOBJECTSDB__integgrupoprod ON ( __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codprod = pcprodut.codprod )
                    LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv ON ( __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codgrupoprod = __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codgrupoprod )
                WHERE
                    dados_vendas_origem.dt_emissao_nfsa BETWEEN add_months(p_dtini,-1) AND last_day(add_months(p_dtini,-1))
            ), valoressaida_1 AS (
                SELECT
                    to_char(pcmov.codprod)                                                                                         AS codprod,
                    pcnfsaid.codusur                                                                                               AS codusur,
                    nvl(nvl(pcmov.pesoliq, pcprodut.pesoliq), 0) * ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) - nvl(pcmov.qtdevol, 0) ) AS pesototal
                FROM
                            jumbo.pcnfsaid pcnfsaid
                    JOIN jumbo.pcmov                  pcmov ON ( pcmov.numtransvenda = pcnfsaid.numtransvenda
                                                AND pcnfsaid.dtcancel IS NULL )
                    JOIN jumbo.pcprodut               pcprodut ON ( pcprodut.codprod = pcmov.codprod )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis      __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( pcnfsaid.codusur = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                    LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod  __FNV_GET_PREFIXOBJECTSDB__integgrupoprod ON ( __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codprod = pcprodut.codprod )
                    LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv ON ( __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codgrupoprod = __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codgrupoprod )
                WHERE
                    pcnfsaid.dtsaida BETWEEN p_dtini AND p_dtfim
                    AND pcmov.codoper IN ( 'S' )
                    AND pcnfsaid.especie = 'NF'
                UNION ALL
                SELECT
                    to_char(pcmov.codprod) AS codprod,
                    pcnfent.codusurdevol   AS codusur,
                    nvl(nvl(pcmov.pesoliq, pcprodut.pesoliq), 0) *
                    CASE
                        WHEN nvl(pcmov.qtdevol, 0) > 0 THEN
                                nvl(pcmov.qtdevol, 0)
                        ELSE
                            ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) )
                    END
                    * - 1                  AS pesototal
                FROM
                            jumbo.pcnfent pcnfent
                    JOIN jumbo.pcmov                  pcmov ON ( pcmov.numtransent = pcnfent.numtransent
                                                AND pcnfent.dtcancel IS NULL
                                                AND nvl(pcmov.numped, 0) = 0 )
                    JOIN jumbo.pcprodut               pcprodut ON ( pcprodut.codprod = pcmov.codprod )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis      __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( pcnfent.codusurdevol = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                    LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod  __FNV_GET_PREFIXOBJECTSDB__integgrupoprod ON ( __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codprod = pcprodut.codprod )
                    LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv ON ( __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codgrupoprod = __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codgrupoprod )
                WHERE
                    pcnfent.dtent BETWEEN p_dtini AND p_dtfim
                    AND pcmov.codoper IN ( 'ED' )
                    AND pcnfent.especie = 'NF'
                UNION ALL
                SELECT
                    to_char(dados_vendas_origem.cd_item)          AS codprod,
                    dados_vendas_origem.vendedor                  AS codusur,
                    nvl(dados_vendas_origem.peso_liquido_item, 0) AS pesototal
                FROM
                            __FNV_GET_NOMESCHEMA__.dados_vendas_origem dados_vendas_origem
                    JOIN jumbo.pcprodut               pcprodut ON ( pcprodut.codprod = dados_vendas_origem.cd_item )
                    JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis      __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( dados_vendas_origem.vendedor = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                    AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                    LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod  __FNV_GET_PREFIXOBJECTSDB__integgrupoprod ON ( __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codprod = pcprodut.codprod )
                    LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv ON ( __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codgrupoprod = __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codgrupoprod )
                WHERE
                    dados_vendas_origem.dt_emissao_nfsa BETWEEN p_dtini AND p_dtfim
            ), resultante_intermediaria AS (
                SELECT
                    usuarios.codusuariosis   AS codusuariosis,
                    usuarios.nome            AS nome,
                    produtos.codprod         AS codprod,
                    produtos.descricao       AS descricao,
                    valoressaida_0.pesototal AS pesototal_0,
                    NULL                     AS pesototal_1
                FROM
                    valoressaida_0
                    LEFT OUTER JOIN usuarios ON ( usuarios.codusuariosis = valoressaida_0.codusur )
                    LEFT OUTER JOIN produtos ON ( produtos.codprod = valoressaida_0.codprod )
                UNION ALL
                SELECT
                    usuarios.codusuariosis   AS codusuariosis,
                    usuarios.nome            AS nome,
                    produtos.codprod         AS codprod,
                    produtos.descricao       AS descricao,
                    NULL                     AS pesototal_0,
                    valoressaida_1.pesototal AS pesototal_1
                FROM
                    valoressaida_1
                    LEFT OUTER JOIN usuarios ON ( usuarios.codusuariosis = valoressaida_1.codusur )
                    LEFT OUTER JOIN produtos ON ( produtos.codprod = valoressaida_1.codprod )
            ), resultante_final AS (
                SELECT
                    r.codusuariosis            AS codusuariosis,
                    r.nome                     AS nome,
                    r.codprod                  AS codprod,
                    r.descricao                AS descricao,
                    SUM(nvl(r.pesototal_0, 0)) AS pesototal_0,
                    SUM(nvl(r.pesototal_1, 0)) AS pesototal_1
                FROM
                    resultante_intermediaria r
                GROUP BY
                    r.codusuariosis,
                    r.nome,
                    r.codprod,
                    r.descricao
                /*having
                    SUM(nvl(r.pesototal_0, 0)) > 0
                    and SUM(nvl(r.pesototal_1, 0)) <= 0*/
            )
            SELECT
                *
            FROM
                resultante_final
            ORDER BY
                1 ASC,
                3 ASC
        ) loop 
            if (v_codusur <> li.codusuariosis and v_valor is not null) then
                v_valor := concat('[',concat(v_valor,']'));
                begin
                    delete 
                    from 
                        __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade 
                    where 
                        entidade = p_entidade
                        and codentidade = v_codusur
                        and nome_valor in (p_nome_valor1)
                        and periodo_ini_ref = p_dtini 
                        and periodo_fim_ref = p_dtfim;                        
                exception
                    when others then 
                        dbms_output.put_line(sqlerrm);
                        dbms_output.put_line(dbms_utility.format_error_backtrace());
                        inserir_erro(p_linha => $$plsql_line);
                        null;                    
                end;
                insert into __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade(entidade,codentidade,nome_valor,periodo_ini_ref,periodo_fim_ref,valor,dadosclob,codsituacaoregistro) values (p_entidade,v_codusur,p_nome_valor1,p_dtini,p_dtfim,0,v_valor,1);
                v_valor := null;
            else
                if v_valor is null then
                    v_valor := '';
                else 
                    v_valor := concat(v_valor,',');
                end if;
                v_valor := concat(v_valor,'{\"codprod\":\"' || li.codprod || '\",\"descricao\":\"'||li.descricao||'\",\"pesototal_0\":\"'||li.pesototal_0||'\",\"pesototal_1\":\"'||li.pesototal_1||'\"}');
            end if;
            v_codusur := li.codusuariosis;
        end loop; 
        if (v_valor is not null) then
            v_valor := concat('[',concat(v_valor,']'));
            begin
                delete 
                from 
                    __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade 
                where 
                    entidade = p_entidade
                    and codentidade = v_codusur
                    and nome_valor in (p_nome_valor1)
                    and periodo_ini_ref = p_dtini 
                    and periodo_fim_ref = p_dtfim;                        
            exception
                when others then 
                    dbms_output.put_line(sqlerrm);
                    dbms_output.put_line(dbms_utility.format_error_backtrace());
                    inserir_erro(p_linha => $$plsql_line);
                    null;                    
            end;
            insert into __FNV_GET_PREFIXOBJECTSDB__valores_por_entidade(entidade,codentidade,nome_valor,periodo_ini_ref,periodo_fim_ref,valor,dadosclob,codsituacaoregistro) values (p_entidade,v_codusur,p_nome_valor1,p_dtini,p_dtfim,0,v_valor,1);
            v_valor := null;
        end if;
        commit;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            inserir_erro(p_linha => $$plsql_line);
    end atualiz_prod_naopos_mes;
    
    /*atualiza varios indicadores do mes*/    
    procedure atualizar_valores_si__FNV_GET_PREFIXOBJECTSDB__(p_dtini date default last_day(add_months(trunc(sysdate),-1))+1, p_dtfim date default last_day(trunc(sysdate))) as
    begin
        /*fora destes horarios nao ha necessidade de processamento, haja vista nao haver faturamento*/
        if to_number(to_char(sysdate,'hh24')) in (5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23) then
            atualizar_venda_rca_mes(p_dtini,p_dtfim);
            atualizar_posit_cli_mes(p_dtini,p_dtfim);
            atualizar_posit_prod_mes(p_dtini,p_dtfim);
        end if;
        
        /*as positivacoes sao atualizaoes mais pesadas, entao rodam em menos horarios*/
        if to_number(to_char(sysdate,'hh24')) in (7,10,12,14,16,17,18,19,20,23) then
            atualiz_clientes_naopos_mes(p_dtini,p_dtfim);
            atualiz_prod_naopos_mes(p_dtini,p_dtfim);
        end if;
        
        /*atualiza o mes anterior, para pegar devolucoes posteriores*/
        if to_number(to_char(p_dtini,'dd')) <= 3 then
            if to_number(to_char(sysdate,'hh24')) in (6,10,13,16,18,20,22) then
                atualizar_venda_rca_mes(add_months(p_dtini,-1),last_day(add_months(p_dtini,-1)));
                atualizar_posit_cli_mes(add_months(p_dtini,-1),last_day(add_months(p_dtini,-1)));
                atualizar_posit_prod_mes(add_months(p_dtini,-1),last_day(add_months(p_dtini,-1)));
            end if;
        elsif to_number(to_char(p_dtini,'dd')) between 4 and 10  then
            if to_number(to_char(sysdate,'hh24')) = 22 then
                atualizar_venda_rca_mes(add_months(p_dtini,-1),last_day(add_months(p_dtini,-1)));
                atualizar_posit_cli_mes(add_months(p_dtini,-1),last_day(add_months(p_dtini,-1)));
                atualizar_posit_prod_mes(add_months(p_dtini,-1),last_day(add_months(p_dtini,-1)));
            end if;
        end if;
        
        
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            inserir_erro(p_linha => $$plsql_line);
    end atualizar_valores_si__FNV_GET_PREFIXOBJECTSDB__;
    
    procedure atualizar_vals_si__FNV_GET_PREFIXOBJECTSDB___mesatual as
    begin
        atualizar_valores_si__FNV_GET_PREFIXOBJECTSDB__();
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            inserir_erro(p_linha => $$plsql_line);
    end atualizar_vals_si__FNV_GET_PREFIXOBJECTSDB___mesatual;
END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_analise":{
		"nomepackagesqldb":"__CHAVE__",
		"nomepackagesqlsistema":"__CHAVE__",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_analise AS
    PROCEDURE corrigir_estgerant (
        p_codfilial_ini        NUMBER DEFAULT NULL,
        p_codfilial_fim        NUMBER DEFAULT NULL,
        p_codprod_ini          NUMBER DEFAULT NULL,
        p_codprod_fim          NUMBER DEFAULT NULL,
        p_dtini                DATE DEFAULT trunc(sysdate),
        p_dtfim                DATE DEFAULT trunc(sysdate),
        p_atualizar_a_frente   BOOLEAN DEFAULT true,
        p_atualizar_a_traz     BOOLEAN DEFAULT false
    );


    PROCEDURE vincular_ent_saida (
        p_codfilial_ini   NUMBER,
        p_codfilial_fim   NUMBER,
        p_codprod_ini     NUMBER,
        p_codprod_fim     NUMBER,
        p_dtini           DATE,
        p_dtfim           DATE,
        p_limitador       NUMBER DEFAULT 1000
    );


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_analise;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_analise AS


    TYPE treg IS RECORD (
        codfilial           NUMBER default NULL,
        codprod             NUMBER default NULL,
        numtranssaida       NUMBER default NULL,
        numtransent         NUMBER default NULL,
        numnota             NUMBER default NULL,
        chavenfe            VARCHAR2(100) DEFAULT NULL,
        descprod            VARCHAR2(1000) DEFAULT NULL,
        cgc                 VARCHAR2(100) DEFAULT NULL,
        uf                  VARCHAR2(10) DEFAULT NULL,
        codoper             VARCHAR2(2) DEFAULT NULL,
        dt                  DATE default NULL,
        dtcancelnf          DATE default NULL,
        dtcancelmov         DATE default NULL,
        horalanc            NUMBER default NULL,
        minutolanc          NUMBER default NULL,
        qt                  NUMBER default NULL,
        qtdevol             NUMBER default NULL,
        qtsaidadestalignf   NUMBER default NULL,
        qtrestasairnf       NUMBER default NULL,
        qtestgerant         NUMBER default NULL,
        vltab               NUMBER default NULL,
        percdesc            NUMBER default NULL,
        vl                  NUMBER default NULL,
        vldesc              NUMBER default NULL,
        ncm                 VARCHAR2(100) DEFAULT NULL,
        cfop                NUMBER default NULL,
        codsittrib          NUMBER default NULL,
        codfigtrib          NUMBER default NULL,
        aliqicms            NUMBER default NULL,
        percredbaseicms     NUMBER default NULL,
        baseicms            NUMBER default NULL,
        vlicms              NUMBER default NULL,
        perciva             NUMBER default NULL,
        aliqinterna         NUMBER default NULL,
        aliqexterna         NUMBER default NULL,
        percst              NUMBER default NULL,
        percredst           NUMBER default NULL,
        basest              NUMBER default NULL,
        vlst                NUMBER default NULL,
        percpis             NUMBER default NULL,
        vlpis               NUMBER default NULL,
        perccofins          NUMBER default NULL,
        vlcofins            NUMBER default NULL,
        perccom             NUMBER default NULL,
        vlcomissao          NUMBER default NULL,
        percfrete           NUMBER default NULL,
        vlfrete             NUMBER default NULL,
        numtransitem        NUMBER default NULL,
        numtransantcanc     NUMBER default NULL,
        numtransvig         NUMBER default NULL,
        ordenacao_temp1     VARCHAR2(10) DEFAULT NULL,
        ordenacao_temp2     NUMBER default NULL,
        ordenacao_temp3     NUMBER default NULL,
        ordenacao_temp4     NUMBER default NULL
    );
    crlf          VARCHAR2(2) DEFAULT chr(10);
    strtemp1      VARCHAR2(4000) DEFAULT NULL;
    numtemp1      NUMBER default NULL;
    datetemp1     DATE default NULL;
    v_limitador   NUMBER DEFAULT 1000;


    PROCEDURE corrigir_estgerant (
        p_codfilial_ini        NUMBER DEFAULT NULL,
        p_codfilial_fim        NUMBER DEFAULT NULL,
        p_codprod_ini          NUMBER DEFAULT NULL,
        p_codprod_fim          NUMBER DEFAULT NULL,
        p_dtini                DATE DEFAULT trunc(sysdate),
        p_dtfim                DATE DEFAULT trunc(sysdate),
        p_atualizar_a_frente   BOOLEAN DEFAULT true,
        p_atualizar_a_traz     BOOLEAN DEFAULT false
    ) AS
        /*Corrigir a informacao do estant estoque anterior para fins de analise peps*/


        v_numtransitemmax    NUMBER default NULL;
        v_numtransentmax     NUMBER default NULL;
        v_numtransvendamax   NUMBER default NULL;
        v_qtestgerant_ini    NUMBER default NULL;
        v_estapos_ini        NUMBER default NULL;
        v_qtestgerant        NUMBER default NULL;
        v_estapos            NUMBER default NULL;
        v_data_ini           DATE default NULL;
    BEGIN
        FOR lf IN (
            SELECT
                pcfilial.codigo
            FROM
                jumbo.pcfilial
            WHERE
                pcfilial.codigo BETWEEN p_codfilial_ini AND p_codfilial_fim
            ORDER BY
                pcfilial.codigo
        ) LOOP
            FOR lp IN (
                SELECT
                    pcprodut.codprod
                FROM
                    jumbo.pcprodut
                WHERE
                    pcprodut.codprod BETWEEN p_codprod_ini AND p_codprod_fim
                ORDER BY
                    pcprodut.codprod
            ) LOOP
                v_numtransitemmax := NULL;
                SELECT
                    MAX(numtransitem)
                INTO v_numtransitemmax
                FROM
                    jumbo.pcmov m
                WHERE
                    m.codfilial = lf.codigo
                    AND m.codprod = lp.codprod
                    AND m.qtestgerant IS NOT NULL
                    AND m.numtransitem IS NOT NULL
                    AND m.dtmov BETWEEN p_dtini AND p_dtfim;


                v_numtransentmax := NULL;
                SELECT
                    MAX(numtransent)
                INTO v_numtransentmax
                FROM
                    jumbo.pcmov m
                WHERE
                    m.codfilial = lf.codigo
                    AND m.codprod = lp.codprod
                    AND m.qtestgerant IS NOT NULL
                    AND m.numtransent IS NOT NULL
                    AND m.dtmov BETWEEN p_dtini AND p_dtfim;


                v_numtransvendamax := NULL;
                SELECT
                    MAX(numtransvenda)
                INTO v_numtransvendamax
                FROM
                    jumbo.pcmov m
                WHERE
                    m.codfilial = lf.codigo
                    AND m.codprod = lp.codprod
                    AND m.qtestgerant IS NOT NULL
                    AND m.numtransvenda IS NOT NULL
                    AND m.dtmov BETWEEN p_dtini AND p_dtfim;


                IF ( v_numtransitemmax IS NOT NULL ) OR ( v_numtransentmax IS NOT NULL ) OR ( v_numtransvendamax IS NOT NULL ) THEN
                    SELECT
                        MAX(to_date(to_char(m.dtmov, 'dd/mm/yyyy')
                                    || ' '
                                    || m.horalanc
                                    || ':'
                                    || m.minutolanc, 'dd/mm/yyyy hh24:mi'))
                    INTO v_data_ini
                    FROM
                        jumbo.pcmov m
                    WHERE
                        m.codfilial = lf.codigo
                        AND m.codprod = lp.codprod
                        AND ( ( v_numtransitemmax IS NOT NULL
                                AND m.numtransitem = v_numtransitemmax )
                                OR ( v_numtransentmax IS NOT NULL
                                    AND m.numtransent = v_numtransentmax )
                                OR ( v_numtransvendamax IS NOT NULL
                                    AND m.numtransvenda = v_numtransvendamax ) );


                    SELECT
                        nvl(m.qtestgerant, 0),
                        CASE
                            WHEN m.codoper LIKE 'S%' THEN
                                nvl(m.qtestgerant, 0) - nvl(m.qt, m.qtcont)
                            ELSE
                                nvl(m.qtestgerant, 0) + nvl(m.qt, m.qtcont)
                        END
                    INTO
                        v_qtestgerant,
                        v_estapos
                    FROM
                        jumbo.pcmov m
                    WHERE
                        m.codfilial = lf.codigo
                        AND m.codprod = lp.codprod
                        AND ( ( v_numtransitemmax IS NOT NULL
                                AND m.numtransitem = v_numtransitemmax )
                                OR ( v_numtransentmax IS NOT NULL
                                    AND m.numtransent = v_numtransentmax )
                                OR ( v_numtransvendamax IS NOT NULL
                                    AND m.numtransvenda = v_numtransvendamax ) )
                        AND m.dtmov = to_date(to_char(v_data_ini, 'dd/mm/yyyy'), 'dd/mm/yyyy')
                        AND to_number(m.horalanc) = to_number(to_char(v_data_ini, 'hh24'))
                        AND to_number(m.minutolanc) = to_number(to_char(v_data_ini, 'mi'));


                    v_qtestgerant_ini := v_qtestgerant;
                    v_estapos_ini := v_estapos;
                    v_qtestgerant := v_estapos;
                    IF p_atualizar_a_frente = true THEN
                        FOR li IN (
                            SELECT
                                codoper,
                                numtransvenda,
                                numtransent,
                                numtransitem,
                                qtestgerant,
                                nvl(qt, qtcont) AS qt
                            FROM
                                jumbo.pcmov m
                            WHERE
                                m.codfilial = lf.codigo
                                AND m.codprod = lp.codprod
                                AND m.dtmov BETWEEN p_dtini AND p_dtfim
                                AND ( m.dtmov > to_date(to_char(v_data_ini, 'dd/mm/yyyy'), 'dd/mm/yyyy')
                                        OR ( m.dtmov = to_date(to_char(v_data_ini, 'dd/mm/yyyy'), 'dd/mm/yyyy')
                                            AND ( to_number(m.horalanc) > to_number(to_char(v_data_ini, 'hh24'))
                                                    OR ( to_number(m.horalanc) = to_number(to_char(v_data_ini, 'hh24'))
                                                        AND ( to_number(m.minutolanc) > to_number(to_char(v_data_ini, 'mi'))
                                                            OR ( to_number(m.minutolanc) = to_number(to_char(v_data_ini, 'mi'))
                                                                    AND ( ( nvl(m.numtransitem, nvl(v_numtransitemmax, 0) + 1) > nvl
                                                                    (v_numtransitemmax, 0) )
                                                                        AND ( nvl(m.numtransent, nvl(v_numtransentmax, 0) + 1) > nvl
                                                                        (v_numtransentmax, 0) )
                                                                        AND ( nvl(m.numtransvenda, nvl(v_numtransvendamax, 0) + 1)> nvl(v_numtransvendamax, 0) ) ) ) ) ) ) ) )
                            ORDER BY
                                m.dtmov,
                                m.horalanc,
                                m.minutolanc,
                                m.numtransitem,
                                CASE
                                        WHEN m.codoper LIKE 'S%' THEN
                                            'S'
                                        ELSE
                                            'E'
                                    END,
                                nvl(m.numtransent, 999999999999),
                                nvl(m.numtransvenda, 999999999999),
                                nvl(m.numtransitem, 999999999999)
                        ) LOOP
                            v_qtestgerant := nvl(li.qtestgerant, nvl(v_qtestgerant, 0));
                            IF ( li.codoper LIKE 'S%' ) THEN
                                v_estapos := v_qtestgerant - li.qt;
                            ELSE
                                v_estapos := v_qtestgerant + li.qt;
                            END IF;


                            IF li.qtestgerant IS NULL THEN
                                UPDATE jumbo.pcmov m1
                                SET
                                    m1.qtestgerant = v_qtestgerant
                                WHERE
                                    m1.codfilial = lf.codigo
                                    AND m1.codprod = lp.codprod
                                    AND ( ( m1.numtransitem IS NOT NULL
                                            AND m1.numtransitem = li.numtransitem )
                                            OR ( m1.numtransitem IS NULL
                                                AND m1.numtransent IS NOT NULL
                                                AND m1.numtransent = li.numtransent )
                                            OR ( m1.numtransitem IS NULL
                                                AND m1.numtransent IS NULL
                                                AND m1.numtransvenda IS NOT NULL
                                                AND m1.numtransvenda = li.numtransvenda ) );


                            END IF;


                            v_qtestgerant := v_estapos;
                        END LOOP;


                        COMMIT;
                    END IF;


                    v_qtestgerant := v_qtestgerant_ini;
                    IF p_atualizar_a_traz = true THEN
                        FOR li IN (
                            SELECT
                                codoper,
                                numtransvenda,
                                numtransent,
                                numtransitem,
                                qtestgerant,
                                nvl(qt, qtcont) AS qt
                            FROM
                                jumbo.pcmov m
                            WHERE
                                m.codfilial = lf.codigo
                                AND m.codprod = lp.codprod
                                AND ( m.dtmov < to_date(to_char(v_data_ini, 'dd/mm/yyyy'), 'dd/mm/yyyy')
                                        OR ( m.dtmov = to_date(to_char(v_data_ini, 'dd/mm/yyyy'), 'dd/mm/yyyy')
                                            AND ( to_number(m.horalanc) < to_number(to_char(v_data_ini, 'hh24'))
                                                    OR ( to_number(m.horalanc) = to_number(to_char(v_data_ini, 'hh24'))
                                                        AND ( to_number(m.minutolanc) < to_number(to_char(v_data_ini, 'mi'))
                                                            OR ( to_number(m.minutolanc) = to_number(to_char(v_data_ini, 'mi'))
                                                                    AND ( ( nvl(m.numtransitem, nvl(v_numtransitemmax, 0) - 1) < nvl
                                                                    (v_numtransitemmax, nvl(m.numtransitem, 0) + 1) )
                                                                        AND ( nvl(m.numtransent, nvl(v_numtransentmax, 0) - 1) < nvl
                                                                        (v_numtransentmax, nvl(m.numtransent, 0) + 1) )
                                                                        AND ( nvl(m.numtransvenda, nvl(v_numtransvendamax, 0) - 1)
                                                                        < nvl(v_numtransvendamax, nvl(m.numtransvenda, 0) + 1) ) )
                                                                        ) ) ) ) ) )
                            ORDER BY
                                m.dtmov DESC,
                                m.horalanc DESC,
                                m.minutolanc DESC,
                                m.numtransitem DESC,
                                CASE
                                        WHEN m.codoper LIKE 'S%' THEN
                                            'S'
                                        ELSE
                                            'E'
                                    END
                                DESC,
                                nvl(m.numtransent, 999999999999) DESC,
                                nvl(m.numtransvenda, 999999999999) DESC,
                                nvl(m.numtransitem, 999999999999) DESC
                        ) LOOP
                            v_estapos := nvl(v_qtestgerant, 0);
                            v_qtestgerant := li.qtestgerant;
                            IF ( v_qtestgerant IS NULL ) THEN
                                IF ( li.codoper LIKE 'S%' ) THEN
                                    v_qtestgerant := v_estapos + li.qt;
                                ELSE
                                    v_qtestgerant := v_estapos - li.qt;
                                END IF;


                                UPDATE jumbo.pcmov m1
                                SET
                                    m1.qtestgerant = v_qtestgerant
                                WHERE
                                    m1.codfilial = lf.codigo
                                    AND m1.codprod = lp.codprod
                                    AND ( ( m1.numtransitem IS NOT NULL
                                            AND m1.numtransitem = li.numtransitem )
                                            OR ( m1.numtransitem IS NULL
                                                AND m1.numtransent IS NOT NULL
                                                AND m1.numtransent = li.numtransent )
                                            OR ( m1.numtransitem IS NULL
                                                AND m1.numtransent IS NULL
                                                AND m1.numtransvenda IS NOT NULL
                                                AND m1.numtransvenda = li.numtransvenda ) );


                            END IF;


                        END LOOP;


                        COMMIT;
                    END IF;


                END IF;


            END LOOP;
        END LOOP;
    END;


    PROCEDURE saida_nula (
        pv_lvinc IN OUT __FNV_GET_NOMESCHEMA__.vinc_ent_saida%rowtype
    ) AS
    BEGIN
        pv_lvinc.numtranssaida := NULL;
        pv_lvinc.numtransantcancsaida := NULL;
        pv_lvinc.numtransvigentesaida := NULL;
        pv_lvinc.numnotasaida := NULL;
        pv_lvinc.numtransitemsaida := NULL;
        pv_lvinc.chavenfesaida := NULL;
        pv_lvinc.descprodsaida := NULL;
        pv_lvinc.cnpjcliente := NULL;
        pv_lvinc.ufcliente := NULL;
        pv_lvinc.codopersaida := NULL;
        pv_lvinc.dtsaida := NULL;
        pv_lvinc.dtcancelnfsaida := NULL;
        pv_lvinc.dtcancelmovsaida := NULL;
        pv_lvinc.horalancsaida := NULL;
        pv_lvinc.minutolancsaida := NULL;
        pv_lvinc.qtsaida := NULL;
        pv_lvinc.qtdevolsaida := NULL;
        pv_lvinc.qtsaidadestalignfsaida := NULL;
        pv_lvinc.qtrestasairnfsaida := NULL;
        pv_lvinc.qtestgerantsaida := NULL;
        pv_lvinc.vltabsaida := NULL;
        pv_lvinc.vltottabsaida := NULL;
        pv_lvinc.vlligtabsaida := NULL;
        pv_lvinc.percdescsaida := NULL;
        pv_lvinc.vlsaida := NULL;
        pv_lvinc.vltotsaida := NULL;
        pv_lvinc.vlligsaida := NULL;
        pv_lvinc.vldescsaida := NULL;
        pv_lvinc.vltotdescsaida := NULL;
        pv_lvinc.vlligdescsaida := NULL;
        pv_lvinc.ncmmovsaida := NULL;
        pv_lvinc.cfopsaida := NULL;
        pv_lvinc.codsittribsaida := NULL;
        pv_lvinc.codfigtribsaida := NULL;
        pv_lvinc.aliqicmssaida := NULL;
        pv_lvinc.percredbaseicmssaida := NULL;
        pv_lvinc.baseicmssaida := NULL;
        pv_lvinc.vlicmssaida := NULL;
        pv_lvinc.vltoticmssaida := NULL;
        pv_lvinc.vlligicmssaida := NULL;
        pv_lvinc.percivasaida := NULL;
        pv_lvinc.aliqintsaida := NULL;
        pv_lvinc.aliqextsaida := NULL;
        pv_lvinc.percstsaida := NULL;
        pv_lvinc.percredstsaida := NULL;
        pv_lvinc.basestsaida := NULL;
        pv_lvinc.vlstsaida := NULL;
        pv_lvinc.vltotstsaida := NULL;
        pv_lvinc.vlligstsaida := NULL;
        pv_lvinc.percpissaida := NULL;
        pv_lvinc.vlpissaida := NULL;
        pv_lvinc.vltotpissaida := NULL;
        pv_lvinc.vlligpissaida := NULL;
        pv_lvinc.perccofinssaida := NULL;
        pv_lvinc.vlcofinssaida := NULL;
        pv_lvinc.vltotcofinssaida := NULL;
        pv_lvinc.vlligcofinssaida := NULL;
        pv_lvinc.perccomissaosaida := NULL;
        pv_lvinc.vlcomissaosaida := NULL;
        pv_lvinc.vltotcomissaosaida := NULL;
        pv_lvinc.vlligcomissaosaida := NULL;
        pv_lvinc.percfretesaida := NULL;
        pv_lvinc.vlfretesaida := NULL;
        pv_lvinc.vltotfretesaida := NULL;
        pv_lvinc.vlligfretesaida := NULL;
        pv_lvinc.percarmazenagemsaida := NULL;
        pv_lvinc.vlarmazenagemsaida := NULL;
        pv_lvinc.vltotarmazenagemsaida := NULL;
        pv_lvinc.vlligarmazenagemsaida := NULL;
        pv_lvinc.perccustosfixossaida := NULL;
        pv_lvinc.vlcustosfixossaida := NULL;
        pv_lvinc.vltotcustosfixossaida := NULL;
        pv_lvinc.vlligcustosfixossaida := NULL;
    EXCEPTION
        WHEN OTHERS THEN
            strtemp1 := sqlerrm
                        || ' unit: '
                        || $$plsql_unit
                        || ' linha: '
                        || $$plsql_line
                        || ' '
                        || dbms_utility.format_error_backtrace;


            numtemp1 := sqlcode;
            datetemp1 := sysdate;
            dbms_output.put_line('erro: '
                                    || crlf
                                    || 'dtocorrencia: '
                                    || to_char(datetemp1, 'dd/mm/yyyy hh24:mi:ss')
                                    || crlf
                                    || 'tipoobjeto: '
                                    || 'package'
                                    || crlf
                                    || 'tipoobjeto: '
                                    || 'package'
                                    || crlf
                                    || 'nomeobjeto: '
                                    || $$plsql_unit
                                    || crlf
                                    || 'linha: '
                                    || $$plsql_line
                                    || crlf
                                    || 'coderro: '
                                    || numtemp1
                                    || crlf
                                    || 'msg: '
                                    || strtemp1
                                    || crlf
                                    || 'dados: '
                                    || NULL
                                    || crlf);


    END;


    PROCEDURE entrada_nula (
        pv_lvinc IN OUT __FNV_GET_NOMESCHEMA__.vinc_ent_saida%rowtype
    ) AS
    BEGIN
        pv_lvinc.numtransent := NULL;
        pv_lvinc.numtransantcancent := NULL;
        pv_lvinc.numtransvigenteent := NULL;
        pv_lvinc.numnotaent := NULL;
        pv_lvinc.numtransitement := NULL;
        pv_lvinc.chavenfeent := NULL;
        pv_lvinc.descprodent := NULL;
        pv_lvinc.cnpjfornecedor := NULL;
        pv_lvinc.uffornecedor := NULL;
        pv_lvinc.codoperent := NULL;
        pv_lvinc.dtent := NULL;
        pv_lvinc.dtcancelnfent := NULL;
        pv_lvinc.dtcancelmovent := NULL;
        pv_lvinc.horalancent := NULL;
        pv_lvinc.minutolancent := NULL;
        pv_lvinc.qtent := NULL;
        pv_lvinc.qtdevolent := NULL;
        pv_lvinc.qtsaidadestalignfent := NULL;
        pv_lvinc.qtrestasairnfent := NULL;
        pv_lvinc.qtestgerantent := NULL;
        pv_lvinc.vltabent := NULL;
        pv_lvinc.vltottabent := NULL;
        pv_lvinc.vlligtabent := NULL;
        pv_lvinc.percdescent := NULL;
        pv_lvinc.vlent := NULL;
        pv_lvinc.vltotent := NULL;
        pv_lvinc.vlligent := NULL;
        pv_lvinc.vldescent := NULL;
        pv_lvinc.vltotdescent := NULL;
        pv_lvinc.vlligdescent := NULL;
        pv_lvinc.ncmmovent := NULL;
        pv_lvinc.cfopent := NULL;
        pv_lvinc.codsittribent := NULL;
        pv_lvinc.codfigtribent := NULL;
        pv_lvinc.aliqicmsent := NULL;
        pv_lvinc.percredbaseicmsent := NULL;
        pv_lvinc.baseicmsent := NULL;
        pv_lvinc.vlicmsent := NULL;
        pv_lvinc.vltoticmsent := NULL;
        pv_lvinc.vlligicmsent := NULL;
        pv_lvinc.percivaent := NULL;
        pv_lvinc.aliqintent := NULL;
        pv_lvinc.aliqextent := NULL;
        pv_lvinc.percstent := NULL;
        pv_lvinc.percredstent := NULL;
        pv_lvinc.basestent := NULL;
        pv_lvinc.vlstent := NULL;
        pv_lvinc.vltotstent := NULL;
        pv_lvinc.vlligstent := NULL;
        pv_lvinc.percpisent := NULL;
        pv_lvinc.vlpisent := NULL;
        pv_lvinc.vltotpisent := NULL;
        pv_lvinc.vlligpisent := NULL;
        pv_lvinc.perccofinsent := NULL;
        pv_lvinc.vlcofinsent := NULL;
        pv_lvinc.vltotcofinsent := NULL;
        pv_lvinc.vlligcofinsent := NULL;
        pv_lvinc.perccomissaoent := NULL;
        pv_lvinc.vlcomissaoent := NULL;
        pv_lvinc.vltotcomissaoent := NULL;
        pv_lvinc.vlligcomissaoent := NULL;
        pv_lvinc.percfreteent := NULL;
        pv_lvinc.vlfreteent := NULL;
        pv_lvinc.vltotfreteent := NULL;
        pv_lvinc.vlligfreteent := NULL;
        pv_lvinc.percarmazenagement := NULL;
        pv_lvinc.vlarmazenagement := NULL;
        pv_lvinc.vltotarmazenagement := NULL;
        pv_lvinc.vlligarmazenagement := NULL;
        pv_lvinc.perccustosfixosent := NULL;
        pv_lvinc.vlcustosfixosent := NULL;
        pv_lvinc.vltotcustosfixosent := NULL;
        pv_lvinc.vlligcustosfixosent := NULL;
    EXCEPTION
        WHEN OTHERS THEN
            strtemp1 := sqlerrm
                        || ' unit: '
                        || $$plsql_unit
                        || ' linha: '
                        || $$plsql_line
                        || ' '
                        || dbms_utility.format_error_backtrace;


            numtemp1 := sqlcode;
            datetemp1 := sysdate;
            dbms_output.put_line('erro: '
                                    || crlf
                                    || 'dtocorrencia: '
                                    || to_char(datetemp1, 'dd/mm/yyyy hh24:mi:ss')
                                    || crlf
                                    || 'tipoobjeto: '
                                    || 'package'
                                    || crlf
                                    || 'tipoobjeto: '
                                    || 'package'
                                    || crlf
                                    || 'nomeobjeto: '
                                    || $$plsql_unit
                                    || crlf
                                    || 'linha: '
                                    || $$plsql_line
                                    || crlf
                                    || 'coderro: '
                                    || numtemp1
                                    || crlf
                                    || 'msg: '
                                    || strtemp1
                                    || crlf
                                    || 'dados: '
                                    || NULL
                                    || crlf);


    END;


    FUNCTION encontrar_numtransent_canc_ant (
        p_regent treg
    ) RETURN NUMBER AS
        retorno NUMBER default NULL;
    BEGIN
        retorno := 0;
        SELECT
            COUNT(1)
        INTO retorno
        FROM
            jumbo.pcnfent   e
            JOIN jumbo.pcmov     m ON ( m.numtransent = e.numtransent )
        WHERE
            e.chavenfe = p_regent.chavenfe
            AND m.codprod = p_regent.codprod
            AND e.dtcancel IS NOT NULL
            AND e.especie NOT IN (
                'CT'
            )
            AND m.numtransitem < p_regent.numtransitem
            AND ( nvl(m.dtmovlog, e.dtent) < p_regent.dt
                    OR ( nvl(m.dtmovlog, e.dtent) = p_regent.dt
                        AND ( to_number(nvl(to_char(m.dtmovlog, 'hh24'), e.horalanc)) < p_regent.horalanc
                                OR ( to_number(nvl(to_char(m.dtmovlog, 'hh24'), e.horalanc)) = p_regent.horalanc
                                    AND to_number(nvl(to_char(m.dtmovlog, 'mi'), e.minutolanc)) <= p_regent.minutolanc ) ) ) );


        IF retorno > 0 THEN
            SELECT
                MIN(e.numtransent)
            INTO retorno
            FROM
                jumbo.pcnfent   e
                JOIN jumbo.pcmov     m ON ( m.numtransent = e.numtransent )
            WHERE
                e.chavenfe = p_regent.chavenfe
                AND m.codprod = p_regent.codprod
                AND e.dtcancel IS NOT NULL
                AND e.especie NOT IN (
                    'CT'
                )
                AND m.numtransitem < p_regent.numtransitem
                AND ( nvl(m.dtmovlog, e.dtent) < p_regent.dt
                        OR ( nvl(m.dtmovlog, e.dtent) = p_regent.dt
                            AND ( to_number(nvl(to_char(m.dtmovlog, 'hh24'), e.horalanc)) < p_regent.horalanc
                                    OR ( to_number(nvl(to_char(m.dtmovlog, 'hh24'), e.horalanc)) = p_regent.horalanc
                                        AND to_number(nvl(to_char(m.dtmovlog, 'mi'), e.minutolanc)) <= p_regent.minutolanc ) ) ) );


        ELSE
            retorno := NULL;
        END IF;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            strtemp1 := 'chavenfeent: '
                        || p_regent.chavenfe
                        || ' codprod: '
                        || p_regent.codprod
                        || ' msg: '
                        || sqlerrm
                        || ' unit: '
                        || $$plsql_unit
                        || ' linha: '
                        || $$plsql_line
                        || ' '
                        || dbms_utility.format_error_backtrace;


            numtemp1 := sqlcode;
            datetemp1 := sysdate;
            dbms_output.put_line('erro: '
                                    || crlf
                                    || 'dtocorrencia: '
                                    || to_char(datetemp1, 'dd/mm/yyyy hh24:mi:ss')
                                    || crlf
                                    || 'tipoobjeto: '
                                    || 'package'
                                    || crlf
                                    || 'tipoobjeto: '
                                    || 'package'
                                    || crlf
                                    || 'nomeobjeto: '
                                    || $$plsql_unit
                                    || crlf
                                    || 'linha: '
                                    || $$plsql_line
                                    || crlf
                                    || 'coderro: '
                                    || numtemp1
                                    || crlf
                                    || 'msg: '
                                    || strtemp1
                                    || crlf
                                    || 'dados: '
                                    || NULL
                                    || crlf);


    END encontrar_numtransent_canc_ant;


    FUNCTION encontrar_numtransent_vigente (
        p_regent treg
    ) RETURN NUMBER AS
        retorno NUMBER default NULL;
    BEGIN
        retorno := 0;
        SELECT
            COUNT(1)
        INTO retorno
        FROM
            jumbo.pcnfent   e
            JOIN jumbo.pcmov     m ON ( m.numtransent = e.numtransent )
        WHERE
            e.chavenfe = p_regent.chavenfe
            AND m.codprod = p_regent.codprod
            AND e.dtcancel IS NULL
            AND m.dtcancel IS NULL
            AND e.especie NOT IN (
                'CT'
            )
            AND m.numtransitem > p_regent.numtransitem
            AND ( nvl(m.dtmovlog, e.dtent) > p_regent.dt
                    OR ( nvl(m.dtmovlog, e.dtent) = p_regent.dt
                        AND ( to_number(nvl(to_char(m.dtmovlog, 'hh24'), e.horalanc)) > p_regent.horalanc
                                OR ( to_number(nvl(to_char(m.dtmovlog, 'hh24'), e.horalanc)) = p_regent.horalanc
                                    AND to_number(nvl(to_char(m.dtmovlog, 'mi'), e.minutolanc)) >= p_regent.minutolanc ) ) ) );


        IF retorno > 0 THEN
            SELECT
                MAX(e.numtransent)
            INTO retorno
            FROM
                jumbo.pcnfent   e
                JOIN jumbo.pcmov     m ON ( m.numtransent = e.numtransent )
            WHERE
                e.chavenfe = p_regent.chavenfe
                AND m.codprod = p_regent.codprod
                AND e.dtcancel IS NULL
                AND m.dtcancel IS NULL
                AND e.especie NOT IN (
                    'CT'
                )
                AND m.numtransitem > p_regent.numtransitem
                AND ( nvl(m.dtmovlog, e.dtent) > p_regent.dt
                        OR ( nvl(m.dtmovlog, e.dtent) = p_regent.dt
                            AND ( to_number(nvl(to_char(m.dtmovlog, 'hh24'), e.horalanc)) > p_regent.horalanc
                                    OR ( to_number(nvl(to_char(m.dtmovlog, 'hh24'), e.horalanc)) = p_regent.horalanc
                                        AND to_number(nvl(to_char(m.dtmovlog, 'mi'), e.minutolanc)) >= p_regent.minutolanc ) ) ) );


        ELSE
            retorno := NULL;
        END IF;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            strtemp1 := 'chavenfeent: '
                        || p_regent.chavenfe
                        || ' codprod: '
                        || p_regent.codprod
                        || ' msg: '
                        || sqlerrm
                        || ' unit: '
                        || $$plsql_unit
                        || ' linha: '
                        || $$plsql_line
                        || ' '
                        || dbms_utility.format_error_backtrace;


            numtemp1 := sqlcode;
            datetemp1 := sysdate;
            dbms_output.put_line('erro: '
                                    || crlf
                                    || 'dtocorrencia: '
                                    || to_char(datetemp1, 'dd/mm/yyyy hh24:mi:ss')
                                    || crlf
                                    || 'tipoobjeto: '
                                    || 'package'
                                    || crlf
                                    || 'tipoobjeto: '
                                    || 'package'
                                    || crlf
                                    || 'nomeobjeto: '
                                    || $$plsql_unit
                                    || crlf
                                    || 'linha: '
                                    || $$plsql_line
                                    || crlf
                                    || 'coderro: '
                                    || numtemp1
                                    || crlf
                                    || 'msg: '
                                    || strtemp1
                                    || crlf
                                    || 'dados: '
                                    || NULL
                                    || crlf);


    END encontrar_numtransent_vigente;


    PROCEDURE carregar_dados_trans_vigente (
        pv_regent IN OUT treg
    ) AS
    BEGIN
        SELECT
            nvl(pcnfent.codfilial, m.codfilial) AS codfilial,
            m.codprod                 AS codprod,
            pv_regent.numtranssaida   AS numtranssaida,
            nvl(pcnfent.numtransent, m.numtransent) AS numtransent,
            nvl(pcnfent.numnota, m.numnota) AS numnota,
            pcnfent.chavenfe,
            m.descricao               AS descprod,
            pcnfent.cgc,
            pcnfent.uf,
            nvl(m.codoper, 'S') AS codoper,
            nvl(pcnfent.dtent, m.dtmov) AS dtent,
            pcnfent.dtcancel          AS dtcancelnf,
            m.dtcancel                AS dtcancelmov,
            nvl(pcnfent.horalanc, m.horalanc) AS horalanc,
            nvl(pcnfent.minutolanc, m.minutolanc) AS minutolanc,
            nvl(m.qt, m.qtcont) AS qtent,
            nvl(m.qtdevol, 0) AS qtdevol,
            0 AS qtsaidadestalignfent,
            nvl(nvl(m.qt, m.qtcont), 0) AS qtrestasairnfent,
            to_number(m.qtestgerant) AS qtestgerant,
            to_number(nvl(m.ptabela, nvl(m.punit, m.punitcont))) AS vltab,
            to_number(nvl(m.percdesc, 0)) AS perdesc,
            to_number(nvl(m.punit, m.punitcont)) AS vl,
            to_number(nvl(m.vldesconto, nvl(m.percdesc, 0) * nvl(m.ptabela, nvl(m.punit, m.punitcont)))) AS vldesc,
            nbm                       AS ncm,
            m.codfiscal               AS cfop,
            m.sittribut               AS codsittrib,
            m.codst                   AS codfigtrib,
            to_number(m.percicm) AS aliqicms,
            to_number(m.percicmred) AS percredbaseicms,
            to_number(m.baseicms) AS baseicms,
            to_number(nvl(mc.vlicms,(nvl(nvl(m.percicmred, m.percicm), 0) * nvl(m.baseicms, 0) / 100))) AS vlicms,
            to_number(m.perciva) AS perciva,
            to_number(m.aliqicms1) AS aliqinterna,
            to_number(m.aliqicms2) AS aliqexterna,
            to_number(m.percst) AS percst,
            to_number(m.percbaseredst) AS percredbasest,
            to_number(m.baseicst) AS basest,
            to_number(m.st) AS vlst,
            to_number(m.perpis) AS percpis,
            to_number(nvl(m.vlpis,(m.perpis * nvl(m.punit, m.punitcont) / 100))) AS vlpis,
            to_number(m.percofins) AS perccofins,
            to_number(nvl(m.vlcofins,(m.percofins * nvl(m.punit, m.punitcont) / 100))) AS vlcofins,
            to_number(nvl(m.percom, 0)) AS perccom,
            to_number((nvl(m.percom, 0)) *(nvl(m.punit, m.punitcont)) / 100) AS vlcomissao,
            to_number(nvl(m.percfrete, 0)) AS percfrete,
            to_number(nvl(m.vlfrete, nvl(m.percfrete, 0) * nvl(nvl(m.punit, m.punitcont), 0)) / 100) AS vlfrete,
            m.numtransitem            AS numtransitement,
            NULL AS numtransantcanc,
            pv_regent.numtransvig     AS numtransvig,
            NULL AS ordenacao_temp1,
            NULL AS ordenacao_temp2,
            NULL AS ordenacao_temp3,
            NULL AS ordenacao_temp4
        INTO pv_regent
        FROM
            jumbo.pcmov         m
            LEFT OUTER JOIN jumbo.pcnfent ON ( m.numtransent IS NOT NULL
                                                AND pcnfent.numtransent = m.numtransent
                                                AND pcnfent.especie NOT IN (
                'CT'
            ) )
            LEFT OUTER JOIN jumbo.pcmovcomple   mc ON ( m.numtransitem IS NOT NULL
                                                        AND mc.numtransitem = m.numtransitem )
        WHERE
            m.numtransent = pv_regent.numtransvig
            AND m.codprod = pv_regent.codprod;


    EXCEPTION
        WHEN OTHERS THEN
            strtemp1 := 'codprod: '
                        || pv_regent.codprod
                        || ' numtransvigente: '
                        || pv_regent.numtransvig
                        || ' msg: '
                        || sqlerrm
                        || ' unit: '
                        || $$plsql_unit
                        || ' linha: '
                        || $$plsql_line
                        || ' '
                        || dbms_utility.format_error_backtrace;


            numtemp1 := sqlcode;
            datetemp1 := sysdate;
            dbms_output.put_line('erro: '
                                    || crlf
                                    || 'dtocorrencia: '
                                    || to_char(datetemp1, 'dd/mm/yyyy hh24:mi:ss')
                                    || crlf
                                    || 'tipoobjeto: '
                                    || 'package'
                                    || crlf
                                    || 'tipoobjeto: '
                                    || 'package'
                                    || crlf
                                    || 'nomeobjeto: '
                                    || $$plsql_unit
                                    || crlf
                                    || 'linha: '
                                    || $$plsql_line
                                    || crlf
                                    || 'coderro: '
                                    || numtemp1
                                    || crlf
                                    || 'msg: '
                                    || strtemp1
                                    || crlf
                                    || 'dados: '
                                    || NULL
                                    || crlf);


    END;


    PROCEDURE atribuir_dados (
        pv_reg   IN OUT treg,
        p_lreg   treg
    ) AS
    BEGIN
        pv_reg := p_lreg;
    END;


    PROCEDURE atribuir_dados_saida_lvinc (
        pv_lvinc     IN OUT vinc_ent_saida%rowtype,
        p_regsaida   treg
    ) AS
    BEGIN
        pv_lvinc.codfilial := p_regsaida.codfilial;
        pv_lvinc.codprod := p_regsaida.codprod;
        pv_lvinc.numtranssaida := p_regsaida.numtranssaida;
        pv_lvinc.numtransent := p_regsaida.numtransent;
        pv_lvinc.numnotasaida := p_regsaida.numnota;
        pv_lvinc.chavenfesaida := p_regsaida.chavenfe;
        pv_lvinc.descprodsaida := p_regsaida.descprod;
        pv_lvinc.cnpjcliente := p_regsaida.cgc;
        pv_lvinc.ufcliente := p_regsaida.uf;
        pv_lvinc.codopersaida := p_regsaida.codoper;
        pv_lvinc.dtsaida := p_regsaida.dt;
        pv_lvinc.dtcancelnfsaida := p_regsaida.dtcancelnf;
        pv_lvinc.dtcancelmovsaida := p_regsaida.dtcancelmov;
        pv_lvinc.horalancsaida := p_regsaida.horalanc;
        pv_lvinc.minutolancsaida := p_regsaida.minutolanc;
        pv_lvinc.qtsaida := p_regsaida.qt;
        pv_lvinc.qtdevolsaida := p_regsaida.qtdevol;
        pv_lvinc.qtsaidadestalignfsaida := p_regsaida.qtsaidadestalignf;
        pv_lvinc.qtrestasairnfsaida := p_regsaida.qtrestasairnf;
        pv_lvinc.qtestgerantsaida := p_regsaida.qtestgerant;
        pv_lvinc.vltabsaida := p_regsaida.vltab;
        pv_lvinc.vltottabsaida := pv_lvinc.qtsaida * pv_lvinc.vltabsaida;
        pv_lvinc.percdescsaida := p_regsaida.percdesc;
        pv_lvinc.vlsaida := p_regsaida.vl;
        pv_lvinc.vltotsaida := pv_lvinc.qtsaida * pv_lvinc.vlsaida;
        pv_lvinc.vldescsaida := p_regsaida.vldesc;
        pv_lvinc.vltotdescsaida := pv_lvinc.qtsaida * pv_lvinc.vldescsaida;
        pv_lvinc.ncmmovsaida := p_regsaida.ncm;
        pv_lvinc.cfopsaida := p_regsaida.cfop;
        pv_lvinc.codsittribsaida := p_regsaida.codsittrib;
        pv_lvinc.codfigtribsaida := p_regsaida.codfigtrib;
        pv_lvinc.aliqicmssaida := p_regsaida.aliqicms;
        pv_lvinc.percredbaseicmssaida := p_regsaida.percredbaseicms;
        pv_lvinc.baseicmssaida := p_regsaida.baseicms;
        pv_lvinc.vlicmssaida := p_regsaida.vlicms;
        pv_lvinc.vltoticmssaida := pv_lvinc.qtsaida * pv_lvinc.vlicmssaida;
        pv_lvinc.percivasaida := p_regsaida.perciva;
        pv_lvinc.aliqintsaida := p_regsaida.aliqinterna;
        pv_lvinc.aliqextsaida := p_regsaida.aliqexterna;
        pv_lvinc.percstsaida := p_regsaida.percst;
        pv_lvinc.percredstsaida := p_regsaida.percredst;
        pv_lvinc.basestsaida := p_regsaida.basest;
        pv_lvinc.vlstsaida := p_regsaida.vlst;
        pv_lvinc.vltotstsaida := pv_lvinc.qtsaida * pv_lvinc.vlstsaida;
        pv_lvinc.percpissaida := p_regsaida.percpis;
        pv_lvinc.vlpissaida := p_regsaida.vlpis;
        pv_lvinc.vltotpissaida := pv_lvinc.qtsaida * pv_lvinc.vlpissaida;
        pv_lvinc.perccofinssaida := p_regsaida.perccofins;
        pv_lvinc.vlcofinssaida := p_regsaida.vlcofins;
        pv_lvinc.vltotcofinssaida := pv_lvinc.qtsaida * pv_lvinc.vlcofinssaida;
        pv_lvinc.perccomissaosaida := p_regsaida.perccom;
        pv_lvinc.vlcomissaosaida := p_regsaida.vlcomissao;
        pv_lvinc.vltotcomissaosaida := pv_lvinc.qtsaida * pv_lvinc.vlcomissaosaida;
        pv_lvinc.percfretesaida := p_regsaida.percfrete;
        pv_lvinc.vlfretesaida := p_regsaida.vlfrete;
        pv_lvinc.vltotfretesaida := pv_lvinc.qtsaida * pv_lvinc.vlfretesaida;
        pv_lvinc.percarmazenagemsaida := 5;
        pv_lvinc.vlarmazenagemsaida := pv_lvinc.vlsaida * pv_lvinc.percarmazenagemsaida / 100;
        pv_lvinc.vltotarmazenagemsaida := pv_lvinc.qtsaida * pv_lvinc.vlarmazenagemsaida;
        pv_lvinc.perccustosfixossaida := 5;
        pv_lvinc.vlcustosfixossaida := pv_lvinc.vlsaida * pv_lvinc.perccustosfixossaida / 100;
        pv_lvinc.vltotcustosfixossaida := pv_lvinc.qtsaida * pv_lvinc.vlcustosfixossaida;
        pv_lvinc.numtransitemsaida := p_regsaida.numtransitem;
        pv_lvinc.numtransantcancsaida := p_regsaida.numtransantcanc;
        pv_lvinc.numtransvigentesaida := p_regsaida.numtransvig;
    END;


    PROCEDURE atribuir_dados_ent_lvinc (
        pv_lvinc   IN OUT vinc_ent_saida%rowtype,
        p_regent   treg
    ) AS
    BEGIN
        pv_lvinc.codfilial := p_regent.codfilial;
        pv_lvinc.codprod := p_regent.codprod;
        pv_lvinc.numtranssaida := p_regent.numtranssaida;
        pv_lvinc.numtransent := p_regent.numtransent;
        pv_lvinc.numnotaent := p_regent.numnota;
        pv_lvinc.chavenfeent := p_regent.chavenfe;
        pv_lvinc.descprodent := p_regent.descprod;
        pv_lvinc.cnpjfornecedor := p_regent.cgc;
        pv_lvinc.uffornecedor := p_regent.uf;
        pv_lvinc.codoperent := p_regent.codoper;
        pv_lvinc.dtent := p_regent.dt;
        pv_lvinc.dtcancelnfent := p_regent.dtcancelnf;
        pv_lvinc.dtcancelmovent := p_regent.dtcancelmov;
        pv_lvinc.horalancent := p_regent.horalanc;
        pv_lvinc.minutolancent := p_regent.minutolanc;
        pv_lvinc.qtent := p_regent.qt;
        pv_lvinc.qtdevolent := p_regent.qtdevol;
        pv_lvinc.qtsaidadestalignfent := p_regent.qtsaidadestalignf;
        pv_lvinc.qtrestasairnfent := p_regent.qtrestasairnf;
        pv_lvinc.qtestgerantent := p_regent.qtestgerant;
        pv_lvinc.vltabent := p_regent.vltab;
        pv_lvinc.vltottabent := pv_lvinc.qtent * pv_lvinc.vltabent;
        pv_lvinc.percdescent := p_regent.percdesc;
        pv_lvinc.vlent := p_regent.vl;
        pv_lvinc.vltotent := pv_lvinc.qtent * pv_lvinc.vlent;
        pv_lvinc.vldescent := p_regent.vldesc;
        pv_lvinc.vltotdescent := pv_lvinc.qtent * pv_lvinc.vldescent;
        pv_lvinc.ncmmovent := p_regent.ncm;
        pv_lvinc.cfopent := p_regent.cfop;
        pv_lvinc.codsittribent := p_regent.codsittrib;
        pv_lvinc.codfigtribent := p_regent.codfigtrib;
        pv_lvinc.aliqicmsent := p_regent.aliqicms;
        pv_lvinc.percredbaseicmsent := p_regent.percredbaseicms;
        pv_lvinc.baseicmsent := p_regent.baseicms;
        pv_lvinc.vlicmsent := p_regent.vlicms;
        pv_lvinc.vltoticmsent := pv_lvinc.qtent * pv_lvinc.vlicmsent;
        pv_lvinc.percivaent := p_regent.perciva;
        pv_lvinc.aliqintent := p_regent.aliqinterna;
        pv_lvinc.aliqextent := p_regent.aliqexterna;
        pv_lvinc.percstent := p_regent.percst;
        pv_lvinc.percredstent := p_regent.percredst;
        pv_lvinc.basestent := p_regent.basest;
        pv_lvinc.vlstent := p_regent.vlst;
        pv_lvinc.vltotstent := pv_lvinc.qtent * pv_lvinc.vlstent;
        pv_lvinc.percpisent := p_regent.percpis;
        pv_lvinc.vlpisent := p_regent.vlpis;
        pv_lvinc.vltotpisent := pv_lvinc.qtent * pv_lvinc.vlpisent;
        pv_lvinc.perccofinsent := p_regent.perccofins;
        pv_lvinc.vlcofinsent := p_regent.vlcofins;
        pv_lvinc.vltotcofinsent := pv_lvinc.qtent * pv_lvinc.vlcofinsent;
        pv_lvinc.perccomissaoent := p_regent.perccom;
        pv_lvinc.vlcomissaoent := p_regent.vlcomissao;
        pv_lvinc.vltotcomissaoent := pv_lvinc.qtent * pv_lvinc.vlcomissaoent;
        pv_lvinc.percfreteent := p_regent.percfrete;
        pv_lvinc.vlfreteent := p_regent.vlfrete;
        pv_lvinc.vltotfreteent := pv_lvinc.qtent * pv_lvinc.vlfreteent;
        pv_lvinc.percarmazenagement := 0;
        pv_lvinc.vlarmazenagement := pv_lvinc.vlent * pv_lvinc.percarmazenagement / 100;
        pv_lvinc.vltotarmazenagement := pv_lvinc.qtent * pv_lvinc.vlarmazenagement;
        pv_lvinc.perccustosfixosent := 0;
        pv_lvinc.vlcustosfixosent := pv_lvinc.vlent * pv_lvinc.perccustosfixosent / 100;
        pv_lvinc.vltotcustosfixosent := pv_lvinc.qtent * pv_lvinc.vlcustosfixosent;
        pv_lvinc.numtransitement := p_regent.numtransitem;
        pv_lvinc.numtransantcancent := p_regent.numtransantcanc;
        pv_lvinc.numtransvigenteent := p_regent.numtransvig;
    END;


    PROCEDURE atribuir_vllig_lvinc (
        pv_lvinc IN OUT vinc_ent_saida%rowtype
    ) AS
    BEGIN
        pv_lvinc.vlligtabent := pv_lvinc.vltabent * pv_lvinc.qtsaidadestalignfent;
        pv_lvinc.vlligent := pv_lvinc.vlent * pv_lvinc.qtsaidadestalignfent;
        pv_lvinc.vlligicmsent := pv_lvinc.vlicmsent * pv_lvinc.qtsaidadestalignfent;
        pv_lvinc.vlligstent := pv_lvinc.vlstent * pv_lvinc.qtsaidadestalignfent;
        pv_lvinc.vlligpisent := pv_lvinc.vlpisent * pv_lvinc.qtsaidadestalignfent;
        pv_lvinc.vlligcofinsent := pv_lvinc.vlcofinsent * pv_lvinc.qtsaidadestalignfent;
        pv_lvinc.vlligcomissaoent := pv_lvinc.vlcomissaoent * pv_lvinc.qtsaidadestalignfent;
        pv_lvinc.vlligfreteent := pv_lvinc.vlfreteent * pv_lvinc.qtsaidadestalignfent;
        pv_lvinc.vlligarmazenagement := pv_lvinc.vlarmazenagement * pv_lvinc.qtsaidadestalignfent;
        pv_lvinc.vlligcustosfixosent := pv_lvinc.vlcustosfixosent * pv_lvinc.qtsaidadestalignfent;
        pv_lvinc.vlligtabsaida := pv_lvinc.vltabsaida * pv_lvinc.qtsaidadestalignfsaida;
        pv_lvinc.vlligsaida := pv_lvinc.vlsaida * pv_lvinc.qtsaidadestalignfsaida;
        pv_lvinc.vlligicmssaida := pv_lvinc.vlicmssaida * pv_lvinc.qtsaidadestalignfsaida;
        pv_lvinc.vlligstsaida := pv_lvinc.vlstsaida * pv_lvinc.qtsaidadestalignfsaida;
        pv_lvinc.vlligpissaida := pv_lvinc.vlpissaida * pv_lvinc.qtsaidadestalignfsaida;
        pv_lvinc.vlligcofinssaida := pv_lvinc.vlcofinssaida * pv_lvinc.qtsaidadestalignfsaida;
        pv_lvinc.vlligcomissaosaida := pv_lvinc.vlcomissaosaida * pv_lvinc.qtsaidadestalignfsaida;
        pv_lvinc.vlligfretesaida := pv_lvinc.vlfretesaida * pv_lvinc.qtsaidadestalignfsaida;
        pv_lvinc.vlligarmazenagemsaida := pv_lvinc.vlarmazenagemsaida * pv_lvinc.qtsaidadestalignfsaida;
        pv_lvinc.vlligcustosfixossaida := pv_lvinc.vlcustosfixossaida * pv_lvinc.qtsaidadestalignfsaida;
    END;


    PROCEDURE atribuir_resultados_lvinc (
        pv_lvinc IN OUT vinc_ent_saida%rowtype
    ) AS
    BEGIN
        pv_lvinc.resultimcs := pv_lvinc.vlicmssaida - pv_lvinc.vlicmsent;
        pv_lvinc.resultligimcs := pv_lvinc.vlligicmssaida - pv_lvinc.vlligicmsent;
        pv_lvinc.resultpis := pv_lvinc.vlpissaida - pv_lvinc.vlpisent;
        pv_lvinc.resultligpis := pv_lvinc.vlligpissaida - pv_lvinc.vlligpisent;
        pv_lvinc.resultcofins := pv_lvinc.vlcofinssaida - pv_lvinc.vlcofinsent;
        pv_lvinc.resultligcofins := pv_lvinc.vlligcofinssaida - pv_lvinc.vlligcofinsent;
        pv_lvinc.resultimpostos := pv_lvinc.resultimcs + pv_lvinc.resultpis + pv_lvinc.resultcofins;
        pv_lvinc.resultligimpostos := pv_lvinc.resultligimcs + pv_lvinc.resultligpis + pv_lvinc.resultligcofins;
        pv_lvinc.montantedebsaida := pv_lvinc.resultimpostos + pv_lvinc.vlcomissaosaida + pv_lvinc.vlfretesaida + pv_lvinc.vlarmazenagemsaida
        + pv_lvinc.vlcustosfixossaida;


        pv_lvinc.montanteligdebsaida := pv_lvinc.resultligimpostos + pv_lvinc.vlligcomissaosaida + pv_lvinc.vlligfretesaida + pv_lvinc
        .vlligarmazenagemsaida + pv_lvinc.vlligcustosfixossaida;


        pv_lvinc.vlliqsaida := pv_lvinc.vlsaida - pv_lvinc.montantedebsaida;
        pv_lvinc.vlligliqsaida := pv_lvinc.vlligsaida - pv_lvinc.montanteligdebsaida;
        pv_lvinc.resultoperacao := pv_lvinc.vlliqsaida - pv_lvinc.vlent;
        pv_lvinc.resultligoperacao := pv_lvinc.vlligliqsaida - pv_lvinc.vlligent;
    END;


    PROCEDURE vincular_ent_saida (
        p_codfilial_ini   NUMBER,
        p_codfilial_fim   NUMBER,
        p_codprod_ini     NUMBER,
        p_codprod_fim     NUMBER,
        p_dtini           DATE,
        p_dtfim           DATE,
        p_limitador       NUMBER DEFAULT 1000
    ) AS


        existe                  NUMBER;
        lpriment                __FNV_GET_NOMESCHEMA__.vinc_ent_saida%rowtype;
        lvinc                   __FNV_GET_NOMESCHEMA__.vinc_ent_saida%rowtype;
        v_codreg                NUMBER;
        v_saldopos              NUMBER;
        v_resta_enc_estent      NUMBER;
        v_existe_temp           NUMBER;
        v_regent                treg;
        v_regsaida              treg;
        v_primeira_trans        BOOLEAN DEFAULT true;
        v_codreg_temp           NUMBER default NULL;
        v_acabou_saida          BOOLEAN DEFAULT false;
        v_prim_loop_ent_saida   BOOLEAN DEFAULT true;
    BEGIN
        v_codreg := 0;
        existe := 0;
        v_limitador := p_limitador;
        SELECT
            COUNT(1)
        INTO existe
        FROM
            __FNV_GET_NOMESCHEMA__.vinc_ent_saida;


        IF existe > 0 THEN
            SELECT
                MAX(codreg)
            INTO v_codreg
            FROM
                __FNV_GET_NOMESCHEMA__.vinc_ent_saida;


            v_codreg := v_codreg + 1;
        END IF;


        FOR lf IN (
            SELECT
                pcfilial.codigo
            FROM
                jumbo.pcfilial
            WHERE
                pcfilial.codigo BETWEEN p_codfilial_ini AND p_codfilial_fim
            ORDER BY
                pcfilial.codigo
        ) LOOP FOR lp IN (
            SELECT
                pcprodut.codprod,
                pcprodut.descricao,
                nvl(pcprodut.codncmex, pcprodut.nbm) AS ncm
            FROM
                jumbo.pcprodut
            WHERE
                pcprodut.codprod BETWEEN p_codprod_ini AND p_codprod_fim
            ORDER BY
                pcprodut.codprod
        ) LOOP
            lvinc := NULL;
            lvinc.codfilial := lf.codigo;
            lvinc.codprod := lp.codprod;
            lvinc.descricao := lp.descricao;
            lvinc.ncmtabprod := lp.ncm;
            lvinc.estant := NULL;
            lvinc.estatual := NULL;
            existe := 0;
            SELECT
                COUNT(1)
            INTO existe
            FROM
                jumbo.pcmov
                LEFT OUTER JOIN jumbo.pcnfsaid ON ( pcnfsaid.numtransvenda = pcmov.numtransvenda )
            WHERE
                pcmov.codfilial = lf.codigo
                AND pcmov.codprod = lp.codprod
                AND trunc(pcmov.dtmov) BETWEEN p_dtini AND p_dtfim
                AND pcmov.codoper LIKE 'S%'
            ORDER BY
                nvl(pcnfsaid.dtsaida, pcmov.dtmov) DESC,
                nvl(pcnfsaid.horalanc, pcmov.horalanc) DESC,
                nvl(pcnfsaid.minutolanc, pcmov.minutolanc) DESC,
                pcmov.numtransvenda DESC;


            v_primeira_trans := true;
            IF existe > 0 THEN
                FOR ls IN (
                    SELECT
                        to_number(nvl(nvl(pcnfsaid.codfilialnf, pcnfent.codfilial), m.codfilial)) AS codfilial,
                        to_number(m.codprod) AS codprod,
                        to_number(nvl(pcnfsaid.numtransvenda, m.numtransvenda)) AS numtranssaida,
                        to_number(nvl(pcnfent.numtransent, m.numtransent)) AS numtransent,
                        to_number(nvl(pcnfsaid.numnota, m.numnota)) AS numnota,
                        nvl(pcnfsaid.chavenfe, pcnfent.chavenfe) AS chavenfe,
                        m.descricao   AS descprod,
                        nvl(pcnfsaid.cgc, pcnfent.cgc) AS cgc,
                        nvl(pcnfsaid.uf, pcnfent.uf) AS uf,
                        nvl(m.codoper, 'S') AS codoper,
                        nvl(m.dtmovlog, nvl(nvl(pcnfsaid.dtsaida, pcnfent.dtent), m.dtmov)) AS dt,
                        nvl(pcnfsaid.dtcancel, pcnfent.dtcancel) AS dtcancelnf,
                        m.dtcancel    AS dtcancelmov,
                        to_number(nvl(to_char(m.dtmovlog, 'hh24'), nvl(nvl(pcnfsaid.horalanc, pcnfent.horalanc), m.horalanc))) AS
                        horalanc,
                        to_number(nvl(to_char(m.dtmovlog, 'mi'), nvl(nvl(pcnfsaid.minutolanc, pcnfent.minutolanc), m.minutolanc))
                        ) AS minutolanc,
                        to_number(nvl(m.qt, m.qtcont)) AS qt,
                        to_number(nvl(m.qtdevol, 0)) AS qtdevol,
                        0 AS qtsaidadestalignf,
                        to_number(nvl(nvl(m.qt, m.qtcont), 0)) AS qtrestasairnf,
                        to_number(m.qtestgerant) AS qtestgerant,
                        to_number(nvl(m.ptabela, nvl(m.punit, m.punitcont))) AS vltab,
                        to_number(nvl(m.percdesc, 0)) AS perdesc,
                        to_number(nvl(m.punit, m.punitcont)) AS vl,
                        to_number(nvl(m.vldesconto, nvl(m.percdesc, 0) * nvl(m.ptabela, nvl(m.punit, m.punitcont)))) AS vldesc,
                        nbm           AS ncm,
                        m.codfiscal   AS cfop,
                        to_number(m.sittribut) AS codsittrib,
                        to_number(m.codst) AS codfigtrib,
                        to_number(m.percicm) AS aliqicms,
                        to_number(m.percicmred) AS percredbaseicms,
                        to_number(m.baseicms) AS baseicms,
                        to_number(nvl(mc.vlicms,(nvl(nvl(m.percicmred, m.percicm), 0) * nvl(m.baseicms, 0) / 100))) AS vlicms,
                        to_number(m.perciva) AS perciva,
                        to_number(m.aliqicms1) AS aliqinterna,
                        to_number(m.aliqicms2) AS aliqexterna,
                        to_number(m.percst) AS percst,
                        to_number(m.percbaseredst) AS percredbasest,
                        to_number(m.baseicst) AS basest,
                        to_number(m.st) AS vlst,
                        to_number(m.perpis) AS percpis,
                        to_number(nvl(m.vlpis,(m.perpis * nvl(m.punit, m.punitcont) / 100))) AS vlpis,
                        to_number(m.percofins) AS perccofins,
                        to_number(nvl(m.vlcofins,(m.percofins * nvl(m.punit, m.punitcont) / 100))) AS vlcofins,
                        to_number(nvl(m.percom, 0)) AS perccom,
                        to_number((nvl(m.percom, 0)) *(nvl(m.punit, m.punitcont)) / 100) AS vlcomissao,
                        to_number(nvl(m.percfrete,
                                        CASE
                                            WHEN m.codoper LIKE 'S' THEN
                                                4
                                            ELSE
                                                0
                                        END
                        )) AS percfrete,
                        to_number(nvl(m.vlfrete, nvl(m.percfrete,
                                                        CASE
                                                            WHEN m.codoper LIKE 'S' THEN
                                                                4
                                                            ELSE
                                                                0
                                                        END
                        ) * nvl(nvl(m.punit, m.punitcont), 0)) / 100) AS vlfrete,
                        to_number(m.numtransitem) AS numtransitem,
                        to_number(NULL) AS numtransantcanc,
                        to_number(NULL) AS numtransvigente,
                        CASE
                            WHEN m.codoper LIKE 'S%' THEN
                                'S'
                            ELSE
                                'E'
                        END AS ordenacao_temp1,
                        to_number(nvl(m.numtransent, 999999999999)) AS ordenacao_temp2,
                        to_number(nvl(m.numtransvenda, 999999999999)) AS ordenacao_temp3,
                        to_number(nvl(m.numtransitem, 999999999999)) AS ordenacao_temp4
                    FROM
                        jumbo.pcmov         m
                        LEFT OUTER JOIN jumbo.pcnfsaid ON ( m.numtransvenda IS NOT NULL
                                                            AND pcnfsaid.numtransvenda = m.numtransvenda )
                        LEFT OUTER JOIN jumbo.pcnfent ON ( m.numtransent IS NOT NULL
                                                            AND pcnfent.numtransent = m.numtransent
                                                            AND pcnfent.especie NOT IN (
                            'CT'
                        ) )
                        LEFT OUTER JOIN jumbo.pcmovcomple   mc ON ( m.numtransitem IS NOT NULL
                                                                    AND mc.numtransitem = m.numtransitem )
                    WHERE
                        m.codfilial = lf.codigo
                        AND m.codprod = lp.codprod
                        AND trunc(m.dtmov) BETWEEN p_dtini AND p_dtfim
                        AND nvl(nvl(m.qt, m.qtcont), 0) <> 0
                    ORDER BY
                        nvl(m.dtmovlog, nvl(nvl(pcnfsaid.dtsaida, pcnfent.dtent), m.dtmov)) DESC,
                        to_number(nvl(to_char(m.dtmovlog, 'hh24'), nvl(nvl(pcnfsaid.horalanc, pcnfent.horalanc), m.horalanc))) DESC
                        ,
                        to_number(nvl(to_char(m.dtmovlog, 'mi'), nvl(nvl(pcnfsaid.minutolanc, pcnfent.minutolanc), m.minutolanc))
                        ) DESC,
                        to_number(m.numtransitem) DESC,
                        CASE
                                WHEN m.codoper LIKE 'S%' THEN
                                    'S'
                                ELSE
                                    'E'
                            END
                        DESC,
                        to_number(nvl(m.numtransent, 999999999999)) DESC,
                        to_number(nvl(m.numtransvenda, 999999999999)) DESC,
                        to_number(nvl(m.numtransitem, 999999999999)) DESC
                ) LOOP
                    IF ( v_codreg > v_limitador ) THEN
                        return;
                    END IF;
                    atribuir_dados(v_regsaida, ls);
                    lvinc.estatual := lvinc.estant;
                    IF ls.codoper LIKE 'S%' THEN
                        /*DADOS DA SAIDA*/
                        v_acabou_saida := false;
                        atribuir_dados_saida_lvinc(lvinc, v_regsaida);
                        IF v_primeira_trans = true THEN
                            lvinc.estant := ls.qtestgerant;
                            dbms_output.put_line('estant1: ' || lvinc.estant);
                            IF lvinc.estant IS NULL THEN
                                BEGIN
                                    SELECT
                                        e.qtest
                                    INTO lvinc.estant
                                    FROM
                                        jumbo.pchistest e
                                    WHERE
                                        e.data = p_dtfim
                                        AND e.codfilial = lf.codigo
                                        AND e.codprod = lp.codprod;


                                    dbms_output.put_line('estant2: ' || lvinc.estant);
                                    lvinc.estant := lvinc.estant + ls.qt;
                                    dbms_output.put_line('estant2a: ' || lvinc.estant);
                                EXCEPTION
                                    WHEN no_data_found THEN
                                        corrigir_estgerant(lf.codigo, lf.codigo, lp.codprod, lp.codprod, p_dtini,
                                                            p_dtfim, true, false);


                                        COMMIT;
                                        SELECT
                                            qtestgerant
                                        INTO lvinc.estant
                                        FROM
                                            jumbo.pcmov m
                                        WHERE
                                            m.codfilial = lf.codigo
                                            AND m.codprod = lp.codprod
                                            AND m.numtransent = ls.numtransent
                                            AND m.numtransvenda = ls.numtransent
                                            AND m.numtransitem = ls.numtransitem;


                                        dbms_output.put_line('estant3: ' || lvinc.estant);
                                        IF lvinc.estant IS NULL THEN
                                            raise_application_error(-20001, 'nao foi possivel obter o saldo anterior: '
                                                                            || lf.codigo
                                                                            || ' '
                                                                            || lp.codprod);
                                        END IF;


                                END;
                            END IF;


                            v_primeira_trans := false;
                        ELSE
                            lvinc.estant := lvinc.estatual + ls.qt;
                        END IF;


                        lvinc.estatual := nvl(lvinc.estatual,(nvl(lvinc.estant, 0) - ls.qt));


                        v_resta_enc_estent := lvinc.estant;
                        lvinc.tipooper := 'S';
                        lvinc.qtsaidadestalignfsaida := 0;
                        lvinc.qtrestasairnfsaida := 0;
                        IF lvinc.qtsaida < 0 THEN 
                                /*saida negativa geralmente eh saida cancelada, tem efeito de entrada no estoque, nao vincula-se a entrada*/
                            entrada_nula(lvinc);
                            lvinc.codreg := v_codreg;
                            lvinc.qtsaidadestalignfsaida := lvinc.qtsaida;
                            lvinc.estsaida := lvinc.qtsaidadestalignfsaida;
                            lvinc.estant := lvinc.estatual + lvinc.estsaida;
                            lvinc.lgrav := $$plsql_line;
                            INSERT INTO __FNV_GET_NOMESCHEMA__.vinc_ent_saida VALUES lvinc;


                            COMMIT;
                            v_codreg := v_codreg + 1;
                            CONTINUE;
                        END IF;


                        IF lvinc.estatual < 0 THEN
                            IF lvinc.estant < 0 THEN
                                v_resta_enc_estent := lvinc.estant * -1;
                            END IF;                                 
                                    /*if lvinc.qtsaida > (lvinc.estatual * -1) then
                                    lvinc.qtrestasairnfsaida := lvinc.estatual * -1;
                                    end if;*/


                            FOR le IN (
                                SELECT
                                    to_number(nvl(pcnfent.codfilial, m.codfilial)) AS codfilial,
                                    to_number(m.codprod) AS codprod,
                                    to_number(v_regsaida.numtranssaida) AS numtranssaida,
                                    to_number(nvl(pcnfent.numtransent, m.numtransent)) AS numtransent,
                                    to_number(nvl(pcnfent.numnota, m.numnota)) AS numnota,
                                    pcnfent.chavenfe,
                                    m.descricao        AS descprod,
                                    pcnfent.cgc,
                                    pcnfent.uf,
                                    nvl(m.codoper, 'S') AS codoper,
                                    nvl(m.dtmovlog, nvl(pcnfent.dtent, m.dtmov)) AS dtent,
                                    pcnfent.dtcancel   AS dtcancelnf,
                                    m.dtcancel         AS dtcancelmov,
                                    to_number(nvl(to_char(m.dtmovlog, 'hh24'), nvl(pcnfent.horalanc, m.horalanc))) AS horalanc,
                                    to_number(nvl(to_char(m.dtmovlog, 'mi'), nvl(pcnfent.minutolanc, m.minutolanc))) AS minutolanc
                                    ,
                                    to_number(nvl(nvl(m.qt, m.qtcont), 0)) AS qtent,
                                    to_number(nvl(m.qtdevol, 0)) AS qtdevol,
                                    0 AS qtsaidadestalignf,
                                    to_number(nvl(nvl(m.qt, m.qtcont), 0) + lvinc.estatual) AS qtrestasairnfent,
                                    to_number(lvinc.estant) AS qtestgerant,
                                    to_number(nvl(m.ptabela, nvl(m.punit, m.punitcont))) AS vltab,
                                    to_number(nvl(m.percdesc, 0)) AS perdesc,
                                    to_number(nvl(m.punit, m.punitcont)) AS vl,
                                    to_number(nvl(m.vldesconto, nvl(m.percdesc, 0) * nvl(m.ptabela, nvl(m.punit, m.punitcont)))) AS
                                    vldesc,
                                    nbm                AS ncm,
                                    m.codfiscal        AS cfop,
                                    to_number(m.sittribut) AS codsittrib,
                                    to_number(m.codst) AS codfigtrib,
                                    to_number(m.percicm) AS aliqicms,
                                    to_number(m.percicmred) AS percredbaseicms,
                                    to_number(m.baseicms) AS baseicms,
                                    to_number(nvl(mc.vlicms,(nvl(nvl(m.percicmred, m.percicm), 0) * nvl(m.baseicms, 0) / 100))) AS
                                    vlicms,
                                    to_number(m.perciva) AS perciva,
                                    to_number(m.aliqicms1) AS aliqinterna,
                                    to_number(m.aliqicms2) AS aliqexterna,
                                    to_number(m.percst) AS percst,
                                    to_number(m.percbaseredst) AS percredbasest,
                                    to_number(m.baseicst) AS basest,
                                    to_number(m.st) AS vlst,
                                    to_number(m.perpis) AS percpis,
                                    to_number(nvl(m.vlpis,(m.perpis * nvl(m.punit, m.punitcont) / 100))) AS vlpis,
                                    to_number(m.percofins) AS perccofins,
                                    to_number(nvl(m.vlcofins,(m.percofins * nvl(m.punit, m.punitcont) / 100))) AS vlcofins,
                                    to_number(nvl(m.percom, 0)) AS perccom,
                                    to_number((nvl(m.percom, 0)) *(nvl(m.punit, m.punitcont)) / 100) AS vlcomissao,
                                    to_number(nvl(m.percfrete,
                                                    CASE
                                                        WHEN m.codoper LIKE 'S' THEN
                                                            4
                                                        ELSE
                                                            0
                                                    END
                                    )) AS percfrete,
                                    to_number(nvl(m.vlfrete, nvl(m.percfrete,
                                                                    CASE
                                                                        WHEN m.codoper LIKE 'S' THEN
                                                                            4
                                                                        ELSE
                                                                            0
                                                                    END
                                    ) * nvl(nvl(m.punit, m.punitcont), 0)) / 100) AS vlfrete,
                                    to_number(m.numtransitem) AS numtransitement,
                                    to_number(NULL) AS numtransantcanc,
                                    to_number(NULL) AS numtransvigente,
                                    CASE
                                        WHEN m.codoper LIKE 'S%' THEN
                                            'S'
                                        ELSE
                                            'E'
                                    END AS ordenacao_temp1,
                                    to_number(nvl(m.numtransent, 999999999999)) AS ordenacao_temp2,
                                    to_number(nvl(m.numtransvenda, 999999999999)) AS ordenacao_temp3,
                                    to_number(nvl(m.numtransitem, 999999999999)) AS ordenacao_temp4
                                FROM
                                    jumbo.pcmov         m
                                    LEFT OUTER JOIN jumbo.pcnfent ON ( m.numtransent IS NOT NULL
                                                                        AND pcnfent.numtransent = m.numtransent
                                                                        AND pcnfent.especie NOT IN (
                                        'CT'
                                    ) )
                                    LEFT OUTER JOIN jumbo.pcmovcomple   mc ON ( m.numtransitem IS NOT NULL
                                                                                AND mc.numtransitem = m.numtransitem )
                                WHERE
                                    m.codfilial = lf.codigo
                                    AND m.codprod = lp.codprod
                                    AND ( nvl(m.dtmovlog, nvl(pcnfent.dtent, m.dtmov)) > ls.dt
                                            OR ( nvl(m.dtmovlog, nvl(pcnfent.dtent, m.dtmov)) = ls.dt
                                                AND ( to_number(nvl(to_char(m.dtmovlog, 'hh24'), nvl(pcnfent.horalanc, m.horalanc)
                                                )) > ls.horalanc
                                                        OR ( to_number(nvl(to_char(m.dtmovlog, 'hh24'), nvl(pcnfent.horalanc, m.horalanc
                                                        ))) = ls.horalanc
                                                            AND to_number(nvl(to_char(m.dtmovlog, 'mi'), nvl(pcnfent.minutolanc, m.
                                                            minutolanc))) >= ls.minutolanc ) ) ) )
                                    AND m.codoper LIKE 'E%'
                                ORDER BY
                                    nvl(m.dtmovlog, nvl(pcnfent.dtent, m.dtmov)) ASC,
                                    to_number(nvl(to_char(m.dtmovlog, 'hh24'), nvl(pcnfent.horalanc, m.horalanc))) ASC,
                                    to_number(nvl(to_char(m.dtmovlog, 'mi'), nvl(pcnfent.minutolanc, m.minutolanc))) ASC,
                                    to_number(m.numtransitem) ASC,
                                    CASE
                                            WHEN m.codoper LIKE 'S%' THEN
                                                'S'
                                            ELSE
                                                'E'
                                        END
                                    ASC,
                                    to_number(nvl(m.numtransent, 999999999999)) ASC,
                                    to_number(nvl(m.numtransvenda, 999999999999)) ASC,
                                    to_number(nvl(m.numtransitem, 999999999999)) ASC
                            ) LOOP
                                atribuir_dados(v_regent, le);
                                IF ( v_regent.qtrestasairnf <= 0 ) OR ( v_regent.codoper IN (
                                    'ED'
                                ) ) THEN
                                    CONTINUE;
                                END IF;


                                IF ( v_regent.dtcancelnf IS NOT NULL ) OR ( v_regent.dtcancelmov IS NOT NULL ) THEN
                                    v_regent.numtransantcanc := NULL;
                                    v_regent.numtransantcanc := encontrar_numtransent_canc_ant(v_regent);
                                    IF v_regent.numtransantcanc IS NULL THEN
                                        v_regent.numtransvig := NULL;
                                        v_regent.numtransvig := encontrar_numtransent_vigente(v_regent);
                                        IF v_regent.numtransvig IS NOT NULL THEN
                                            carregar_dados_trans_vigente(v_regent);
                                            v_regent.qtrestasairnf := v_regent.qtrestasairnf + lvinc.estatual;
                                        ELSE
                                                /*nao existe transacao vigente para essa trasacao cancelada*/
                                            CONTINUE;
                                        END IF;


                                    ELSE 
                                            /*existe transacao cancelada anterior a essa cancelada*/
                                        CONTINUE;
                                    END IF;


                                END IF;                                    
                                    /*DADOS PADRAO DA ENTRADA PARA TODAS AS ALTERNATIVAS*/


                                atribuir_dados_ent_lvinc(lvinc, v_regent);                                    
                                    /*ENTRADA VALIDA*/
                                IF ( v_resta_enc_estent - ( v_regent.qtrestasairnf + ( lvinc.qtsaida - lvinc.qtrestasairnfsaida )
                                ) ) >= 0 THEN
                                    v_resta_enc_estent := v_resta_enc_estent - v_regent.qtrestasairnf;
                                    CONTINUE;
                                ELSE
                                    IF ( v_regent.qtrestasairnf < 0 ) THEN
                                        v_regent.qtrestasairnf := 0;
                                    END IF;


                                    lvinc.qtrestasairnfent := v_regent.qtrestasairnf;
                                    IF ( lvinc.qtsaida - lvinc.qtrestasairnfsaida ) <= ( v_regent.qt - v_regent.qtrestasairnf ) THEN
                                            /*SAIDA CABE NA ENTRADA*/
                                        lvinc.codreg := v_codreg;
                                        lvinc.qtsaidadestalignfsaida := lvinc.qtsaida - lvinc.qtrestasairnfsaida;
                                        lvinc.qtsaidadestalignfent := lvinc.qtsaidadestalignfsaida;
                                        lvinc.estant := lvinc.estatual + lvinc.qtsaidadestalignfent;
                                        lvinc.estent := 0;
                                        lvinc.estsaida := lvinc.qtsaidadestalignfsaida;
                                        atribuir_vllig_lvinc(lvinc);
                                        atribuir_resultados_lvinc(lvinc);
                                        lvinc.lgrav := $$plsql_line;
                                        INSERT INTO __FNV_GET_NOMESCHEMA__.vinc_ent_saida VALUES lvinc;


                                        COMMIT;
                                        v_codreg := v_codreg + 1;
                                        IF lvinc.qtsaida = ( lvinc.qtsaidadestalignfsaida + lvinc.qtrestasairnfsaida ) THEN
                                            v_acabou_saida := true;
                                        END IF;


                                        EXIT;
                                    ELSE
                                            /*SAIDA NAO CABE NA ENTRADA*/
                                        lvinc.codreg := v_codreg;
                                        lvinc.qtsaidadestalignfsaida := v_regent.qt - v_regent.qtrestasairnf;
                                        lvinc.qtsaidadestalignfent := lvinc.qtsaidadestalignfsaida;
                                        lvinc.estant := lvinc.estatual + lvinc.qtsaidadestalignfent;
                                        v_resta_enc_estent := 0;
                                        lvinc.estent := 0;
                                        lvinc.estsaida := lvinc.qtsaidadestalignfsaida;
                                        atribuir_vllig_lvinc(lvinc);
                                        atribuir_resultados_lvinc(lvinc);
                                        lvinc.lgrav := $$plsql_line;
                                        INSERT INTO __FNV_GET_NOMESCHEMA__.vinc_ent_saida VALUES lvinc;


                                        COMMIT;
                                        lvinc.qtrestasairnfsaida := lvinc.qtrestasairnfsaida + lvinc.qtsaidadestalignfsaida;
                                        lvinc.estatual := lvinc.estant;
                                        lvinc.estant := lvinc.estatual + lvinc.qtrestasairnfsaida;
                                        v_codreg := v_codreg + 1;
                                        IF lvinc.qtrestasairnfent > 0 THEN
                                            EXIT;
                                        ELSE
                                            CONTINUE;
                                        END IF;
                                    END IF;


                                END IF;


                            END LOOP;


                        END IF;


                        IF v_acabou_saida = false THEN
                            FOR le IN (
                                SELECT
                                    to_number(nvl(pcnfent.codfilial, m.codfilial)) AS codfilial,
                                    to_number(m.codprod) AS codprod,
                                    to_number(v_regsaida.numtranssaida) AS numtranssaida,
                                    to_number(nvl(pcnfent.numtransent, m.numtransent)) AS numtransent,
                                    to_number(nvl(pcnfent.numnota, m.numnota)) AS numnota,
                                    pcnfent.chavenfe,
                                    m.descricao        AS descprod,
                                    pcnfent.cgc,
                                    pcnfent.uf,
                                    nvl(m.codoper, 'S') AS codoper,
                                    nvl(m.dtmovlog, nvl(pcnfent.dtent, m.dtmov)) AS dtent,
                                    pcnfent.dtcancel   AS dtcancelnf,
                                    m.dtcancel         AS dtcancelmov,
                                    to_number(nvl(to_char(m.dtmovlog, 'hh24'), nvl(pcnfent.horalanc, m.horalanc))) AS horalanc,
                                    to_number(nvl(to_char(m.dtmovlog, 'mi'), nvl(pcnfent.minutolanc, m.minutolanc))) AS minutolanc
                                    ,
                                    to_number(nvl(nvl(m.qt, m.qtcont), 0)) AS qtent,
                                    to_number(nvl(m.qtdevol, 0)) AS qtdevol,
                                    to_number(0) AS qtsaidadestalignf,
                                    to_number(nvl(nvl(m.qt, m.qtcont), 0)) AS qtrestasairnfent,
                                    to_number(lvinc.estant) AS qtestgerant,
                                    to_number(nvl(m.ptabela, nvl(m.punit, m.punitcont))) AS vltab,
                                    to_number(nvl(m.percdesc, 0)) AS perdesc,
                                    to_number(nvl(m.punit, m.punitcont)) AS vl,
                                    to_number(nvl(m.vldesconto, nvl(m.percdesc, 0) * nvl(m.ptabela, nvl(m.punit, m.punitcont)))) AS
                                    vldesc,
                                    nbm                AS ncm,
                                    m.codfiscal        AS cfop,
                                    to_number(m.sittribut) AS codsittrib,
                                    to_number(m.codst) AS codfigtrib,
                                    to_number(m.percicm) AS aliqicms,
                                    to_number(m.percicmred) AS percredbaseicms,
                                    to_number(m.baseicms) AS baseicms,
                                    to_number(nvl(mc.vlicms,(nvl(nvl(m.percicmred, m.percicm), 0) * nvl(m.baseicms, 0) / 100))) AS
                                    vlicms,
                                    to_number(m.perciva) AS perciva,
                                    to_number(m.aliqicms1) AS aliqinterna,
                                    to_number(m.aliqicms2) AS aliqexterna,
                                    to_number(m.percst) AS percst,
                                    to_number(m.percbaseredst) AS percredbasest,
                                    to_number(m.baseicst) AS basest,
                                    to_number(m.st) AS vlst,
                                    to_number(m.perpis) AS percpis,
                                    to_number(nvl(m.vlpis,(m.perpis * nvl(m.punit, m.punitcont) / 100))) AS vlpis,
                                    to_number(m.percofins) AS perccofins,
                                    to_number(nvl(m.vlcofins,(m.percofins * nvl(m.punit, m.punitcont) / 100))) AS vlcofins,
                                    to_number(nvl(m.percom, 0)) AS perccom,
                                    to_number((nvl(m.percom, 0)) *(nvl(m.punit, m.punitcont)) / 100) AS vlcomissao,
                                    to_number(nvl(m.percfrete,
                                                    CASE
                                                        WHEN m.codoper LIKE 'S' THEN
                                                            4
                                                        ELSE
                                                            0
                                                    END
                                    )) AS percfrete,
                                    to_number(nvl(m.vlfrete, nvl(m.percfrete,
                                                                    CASE
                                                                        WHEN m.codoper LIKE 'S' THEN
                                                                            4
                                                                        ELSE
                                                                            0
                                                                    END
                                    ) * nvl(nvl(m.punit, m.punitcont), 0)) / 100) AS vlfrete,
                                    to_number(m.numtransitem) AS numtransitement,
                                    to_number(NULL) AS numtransantcanc,
                                    to_number(NULL) AS numtransvigente,
                                    CASE
                                        WHEN m.codoper LIKE 'S%' THEN
                                            'S'
                                        ELSE
                                            'E'
                                    END AS ordenacao_temp1,
                                    to_number(nvl(m.numtransent, 999999999999)) AS ordenacao_temp2,
                                    to_number(nvl(m.numtransvenda, 999999999999)) AS ordenacao_temp3,
                                    to_number(nvl(m.numtransitem, 999999999999)) AS ordenacao_temp4
                                FROM
                                    jumbo.pcmov         m
                                    LEFT OUTER JOIN jumbo.pcnfent ON ( m.numtransent IS NOT NULL
                                                                        AND pcnfent.numtransent = m.numtransent
                                                                        AND pcnfent.especie NOT IN (
                                        'CT'
                                    ) )
                                    LEFT OUTER JOIN jumbo.pcmovcomple   mc ON ( m.numtransitem IS NOT NULL
                                                                                AND mc.numtransitem = m.numtransitem )
                                WHERE
                                    m.codfilial = lf.codigo
                                    AND m.codprod = lp.codprod
                                    AND ( nvl(m.dtmovlog, nvl(pcnfent.dtent, m.dtmov)) < ls.dt
                                            OR ( nvl(m.dtmovlog, nvl(pcnfent.dtent, m.dtmov)) = ls.dt
                                                AND ( to_number(nvl(to_char(m.dtmovlog, 'hh24'), nvl(pcnfent.horalanc, m.horalanc)
                                                )) < ls.horalanc
                                                        OR ( to_number(nvl(to_char(m.dtmovlog, 'mi'), nvl(pcnfent.horalanc, m.horalanc
                                                        ))) = ls.horalanc
                                                            AND to_number(nvl(to_char(m.dtmovlog, 'mi'), nvl(pcnfent.minutolanc, m.
                                                            minutolanc))) <= ls.minutolanc ) ) ) )
                                    AND m.codoper LIKE 'E%'
                                ORDER BY
                                    nvl(m.dtmovlog, nvl(pcnfent.dtent, m.dtmov)) DESC,
                                    to_number(nvl(to_char(m.dtmovlog, 'hh24'), nvl(pcnfent.horalanc, m.horalanc))) DESC,
                                    to_number(nvl(to_char(m.dtmovlog, 'mi'), nvl(pcnfent.minutolanc, m.minutolanc))) DESC,
                                    to_number(m.numtransitem) DESC,
                                    CASE
                                            WHEN m.codoper LIKE 'S%' THEN
                                                'S'
                                            ELSE
                                                'E'
                                        END
                                    DESC,
                                    to_number(nvl(m.numtransent, 999999999999)) DESC,
                                    to_number(nvl(m.numtransvenda, 999999999999)) DESC,
                                    to_number(nvl(m.numtransitem, 999999999999)) DESC
                            ) LOOP
                                atribuir_dados(v_regent, le);
                                IF ( v_regent.qtrestasairnf <= 0 ) OR ( v_regent.codoper IN (
                                    'ED'
                                ) ) THEN
                                    CONTINUE;
                                END IF;


                                IF ( v_regent.dtcancelnf IS NOT NULL ) OR ( v_regent.dtcancelmov IS NOT NULL ) THEN
                                    v_regent.numtransantcanc := NULL;
                                    v_regent.numtransantcanc := encontrar_numtransent_canc_ant(v_regent);
                                    IF v_regent.numtransantcanc IS NULL THEN
                                        v_regent.numtransvig := NULL;
                                        v_regent.numtransvig := encontrar_numtransent_vigente(v_regent);
                                        IF v_regent.numtransvig IS NOT NULL THEN
                                            carregar_dados_trans_vigente(v_regent);
                                        ELSE
                                                /*nao existe transacao vigente para essa trasacao cancelada*/
                                            CONTINUE;
                                        END IF;


                                    ELSE 
                                            /*existe transacao cancelada anterior a essa cancelada*/
                                        CONTINUE;
                                    END IF;


                                END IF;                                    
                                    /*DADOS PADRAO DA ENTRADA PARA TODAS AS ALTERNATIVAS*/


                                atribuir_dados_ent_lvinc(lvinc, v_regent);                                    
                                    /*ENTRADA VALIDA*/
                                IF ( v_resta_enc_estent - ( v_regent.qtrestasairnf + ( lvinc.qtsaida - lvinc.qtrestasairnfsaida )
                                ) ) >= 0 THEN
                                    v_resta_enc_estent := v_resta_enc_estent - v_regent.qtrestasairnf;
                                    CONTINUE;
                                ELSE
                                    v_regent.qtrestasairnf := v_regent.qtrestasairnf + ( v_resta_enc_estent - ( v_regent.qtrestasairnf
                                    + ( lvinc.qtsaida - lvinc.qtrestasairnfsaida ) ) );


                                    IF ( v_regent.qtrestasairnf < 0 ) THEN
                                        v_regent.qtrestasairnf := 0;
                                    END IF;


                                    lvinc.qtrestasairnfent := v_regent.qtrestasairnf;
                                    IF ( lvinc.qtsaida - lvinc.qtrestasairnfsaida ) <= ( v_regent.qt - v_regent.qtrestasairnf ) THEN
                                            /*SAIDA CABE NA ENTRADA*/
                                        lvinc.codreg := v_codreg;
                                        lvinc.qtsaidadestalignfsaida := lvinc.qtsaida - lvinc.qtrestasairnfsaida;
                                        lvinc.qtsaidadestalignfent := lvinc.qtsaidadestalignfsaida;
                                        IF lvinc.qtrestasairnfsaida > 0 THEN
                                            lvinc.qtrestasairnfent := 0;
                                        END IF;
                                        lvinc.estant := lvinc.estatual + lvinc.qtsaidadestalignfent;
                                        lvinc.estent := 0;
                                        lvinc.estsaida := lvinc.qtsaidadestalignfsaida;
                                        atribuir_vllig_lvinc(lvinc);
                                        atribuir_resultados_lvinc(lvinc);
                                        lvinc.lgrav := $$plsql_line;
                                        INSERT INTO __FNV_GET_NOMESCHEMA__.vinc_ent_saida VALUES lvinc;


                                        COMMIT;
                                        v_codreg := v_codreg + 1;
                                        v_acabou_saida := true;
                                        EXIT;
                                    ELSE
                                            /*SAIDA NAO CABE NA ENTRADA*/
                                        lvinc.codreg := v_codreg;
                                        lvinc.qtsaidadestalignfsaida := v_regent.qt - v_regent.qtrestasairnf;
                                        lvinc.qtsaidadestalignfent := lvinc.qtsaidadestalignfsaida;
                                        lvinc.estant := lvinc.estatual + lvinc.qtsaidadestalignfent;
                                        v_resta_enc_estent := 0;
                                        lvinc.estent := 0;
                                        lvinc.estsaida := lvinc.qtsaidadestalignfsaida;
                                        atribuir_vllig_lvinc(lvinc);
                                        atribuir_resultados_lvinc(lvinc);
                                        lvinc.lgrav := $$plsql_line;
                                        INSERT INTO __FNV_GET_NOMESCHEMA__.vinc_ent_saida VALUES lvinc;


                                        COMMIT;
                                        lvinc.qtrestasairnfsaida := lvinc.qtrestasairnfsaida + lvinc.qtsaidadestalignfsaida;
                                        lvinc.estatual := lvinc.estant;
                                        lvinc.estant := lvinc.estatual + lvinc.qtrestasairnfsaida;
                                        v_codreg := v_codreg + 1;
                                        CONTINUE;
                                    END IF;


                                END IF;


                            END LOOP;
                        END IF;


                        IF v_acabou_saida = false THEN
                                /*saida sem entrada encontrada, geralmente no inicio do banco de dados*/
                            entrada_nula(lvinc);
                            lvinc.codreg := v_codreg;
                            lvinc.qtsaidadestalignfsaida := lvinc.qtsaida - lvinc.qtrestasairnfsaida;
                            lvinc.estsaida := lvinc.qtsaidadestalignfsaida;
                            lvinc.estant := lvinc.estatual + lvinc.estsaida;
                            lvinc.lgrav := $$plsql_line;
                            INSERT INTO __FNV_GET_NOMESCHEMA__.vinc_ent_saida VALUES lvinc;


                            COMMIT;
                            v_codreg := v_codreg + 1;
                        END IF;


                    ELSE
                        atribuir_dados(v_regent, ls);
                        atribuir_dados_ent_lvinc(lvinc, v_regent);
                        saida_nula(lvinc);
                        IF v_primeira_trans = true THEN
                            lvinc.estant := ls.qtestgerant;
                            IF lvinc.estant IS NULL THEN
                                BEGIN
                                    SELECT
                                        e.qtest
                                    INTO lvinc.estant
                                    FROM
                                        jumbo.pchistest e
                                    WHERE
                                        e.data = p_dtfim
                                        AND e.codfilial = lf.codigo
                                        AND e.codprod = lp.codprod;


                                    lvinc.estant := lvinc.estant - ls.qt;
                                EXCEPTION
                                    WHEN no_data_found THEN
                                        corrigir_estgerant(lf.codigo, lf.codigo, lp.codprod, lp.codprod, p_dtini,
                                                            p_dtfim, true, false);


                                        COMMIT;
                                        SELECT
                                            qtestgerant
                                        INTO lvinc.estant
                                        FROM
                                            jumbo.pcmov m
                                        WHERE
                                            m.codfilial = lf.codigo
                                            AND m.codprod = lp.codprod
                                            AND m.numtransent = ls.numtransent
                                            AND m.numtransvenda = ls.numtransent
                                            AND m.numtransitem = ls.numtransitem;


                                        IF lvinc.estant IS NULL THEN
                                            raise_application_error(-20001, 'nao foi possivel obter o saldo anterior: '
                                                                            || lf.codigo
                                                                            || ' '
                                                                            || lp.codprod);
                                        END IF;


                                END;


                            END IF;


                            v_primeira_trans := false;
                            dbms_output.put_line('primeira trans: '
                                                    || lvinc.estant
                                                    || ' '
                                                    || v_codreg);
                        ELSE
                            lvinc.estant := lvinc.estatual - ls.qt;
                        END IF;


                        lvinc.estatual := nvl(lvinc.estatual,(nvl(lvinc.estant, 0) + ls.qt));


                        lvinc.codreg := v_codreg;
                        lvinc.tipooper := 'E';
                        lvinc.estent := lvinc.qtrestasairnfent;
                        lvinc.estsaida := 0;
                        lvinc.estant := lvinc.estatual - lvinc.estent;
                        atribuir_vllig_lvinc(lvinc);
                        atribuir_resultados_lvinc(lvinc);
                        lvinc.lgrav := $$plsql_line;
                        INSERT INTO __FNV_GET_NOMESCHEMA__.vinc_ent_saida VALUES lvinc;


                        COMMIT;
                        v_codreg := v_codreg + 1;
                    END IF;


                END LOOP;
            END IF;


        END LOOP;
        END LOOP;


    EXCEPTION
        WHEN OTHERS THEN
            strtemp1 := sqlerrm
                        || ' unit: '
                        || $$plsql_unit
                        || ' linha: '
                        || $$plsql_line
                        || ' '
                        || dbms_utility.format_error_backtrace;


            numtemp1 := sqlcode;
            datetemp1 := sysdate;
            dbms_output.put_line('erro: '
                                    || crlf
                                    || 'dtocorrencia: '
                                    || to_char(datetemp1, 'dd/mm/yyyy hh24:mi:ss')
                                    || crlf
                                    || 'tipoobjeto: '
                                    || 'package'
                                    || crlf
                                    || 'tipoobjeto: '
                                    || 'package'
                                    || crlf
                                    || 'nomeobjeto: '
                                    || $$plsql_unit
                                    || crlf
                                    || 'linha: '
                                    || $$plsql_line
                                    || crlf
                                    || 'coderro: '
                                    || numtemp1
                                    || crlf
                                    || 'msg: '
                                    || strtemp1
                                    || crlf
                                    || 'dados: '
                                    || NULL
                                    || crlf);


    END vincular_ent_saida;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_analise;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_aurora":{
		"nomepackagesqldb":"__CHAVE__",
		"nomepackagesqlsistema":"__CHAVE__",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_aurora AS
    PROCEDURE enviar_estoque_email;


    PROCEDURE enviar_arquivos_txt (
        p_codfilial   NUMBER DEFAULT NULL,
        p_dtini       DATE DEFAULT NULL,
        p_dtfim       DATE DEFAULT NULL
    );


    PROCEDURE enviar_email_necessidade;


    PROCEDURE enviar_email_necess_seco;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_aurora;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_aurora AS


    PROCEDURE enviar_estoque_email AS


        v_email_para          VARCHAR2(4000) DEFAULT 'marcelo-matsuoca@auroraalimentos.com.br';
        v_email_copias_para   VARCHAR2(4000) DEFAULT 'jumbo.ti@jumboalimentos.com.br;milena-luz@auroraalimentos.com.br;marlon-alan@auroraalimentos.com.br';
        v_titulo_email        VARCHAR2(4000) DEFAULT 'JUMBO CASCAVEL - ESTOQUE';
        v_corpo_email         VARCHAR2(4000) DEFAULT 'Segue em anexo';
        v_nome_anexo          VARCHAR2(4000) DEFAULT 'estoque.csv';
        v_comando_sql         VARCHAR2(32000);
    BEGIN
        v_comando_sql := '
        WITH estoque_jumbo AS (
            SELECT
                e.codfilial,
                e.codprod,
                p.descricao,
                p.unidade,
                e.qtestger AS \"QTDE ESTOQUE JUMBO\"
            FROM
                jumbo.pcest      e
                JOIN jumbo.pcprodut   p ON ( p.codprod = e.codprod )
                JOIN jumbo.pcfornec   f ON ( f.codfornec = p.codfornec )
            WHERE
                p.dtexclusao IS NULL
                AND p.obs2 <> ''FL''
                AND p.codepto <> 52 
                AND f.fornecedor LIKE ''%AURORA%''
                and e.codfilial = 1
            ORDER BY
                e.codfilial,
                e.codprod
        ), estoque_aurora AS (
            SELECT
                nvl(e.codfilial_erp,e.codfilialorigem) as codfilial,
                nvl(e.codprod_erp,e.codprodorigem) as codprod,
                p.descricao,
                p.unidade,
                e.qtfisicodisponivel AS \"QTDE ESTOQUE AURORA\"
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem   e
                LEFT OUTER JOIN jumbo.pcprodut   p ON ( p.codprod = nvl(e.codprod_erp,e.codprodorigem) )
            WHERE
                p.dtexclusao IS NULL
                AND p.obs2 <> ''FL''
                AND p.codepto <> 52 
                and nvl(e.codfilial_erp,e.codfilialorigem) = 1
            ORDER BY
                nvl(e.codfilial_erp,e.codfilialorigem),
                nvl(e.codprod_erp,e.codprodorigem)
        ), estoques AS (
            SELECT
                estoque_jumbo.*,
                nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) AS \"QTDE ESTOQUE AURORA\",
                nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0) AS \"QTDE TOTAL\"
            FROM
                estoque_jumbo
                LEFT OUTER JOIN estoque_aurora ON ( estoque_jumbo.codfilial = estoque_aurora.codfilial
                                                    AND estoque_jumbo.codprod = estoque_aurora.codprod )
            WHERE
                estoque_jumbo.\"QTDE ESTOQUE JUMBO\" > 0
                OR nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) > 0
            UNION ALL
            SELECT
                nvl(estoque_jumbo.codfilial, estoque_aurora.codfilial) AS codfilial,
                nvl(estoque_jumbo.codprod, estoque_aurora.codprod) AS codprod,
                nvl(estoque_jumbo.descricao, p.descricao) AS descricao,
                nvl(estoque_jumbo.unidade, p.unidade) AS unidade,
                nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0) AS \"QTDE ESTOQUE JUMBO\",
                nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) AS \"QTDE ESTOQUE AURORA\",
                nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0) AS \"QTDE TOTAL\"
            FROM
                estoque_aurora
                LEFT OUTER JOIN estoque_jumbo ON ( estoque_jumbo.codfilial = estoque_aurora.codfilial
                                                    AND estoque_jumbo.codprod = estoque_aurora.codprod )
                LEFT OUTER JOIN jumbo.pcprodut p ON ( p.codprod = estoque_aurora.codprod )
            WHERE
                NOT EXISTS (
                    SELECT
                        1
                    FROM
                        estoque_jumbo ej
                    WHERE
                        ej.codfilial = estoque_aurora.codfilial
                        AND ej.codprod = estoque_aurora.codprod
                )
                    AND ( nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0) > 0
                            OR nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) > 0 )
        )
        SELECT
            estoques.codfilial,
            estoques.codprod,
            estoques.descricao,
            estoques.unidade,
            estoques.\"QTDE ESTOQUE JUMBO\",
            estoques.\"QTDE ESTOQUE AURORA\",
            estoques.\"QTDE TOTAL\"
        FROM
            estoques
        order by
            estoques.codfilial,
            estoques.codprod
    ';
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            --dbms_output.put_line(v_comando_sql); return;
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                pr_email_para => v_email_para, 
                pr_email_copias_para => v_email_copias_para, 
                pr_titulo_email => v_titulo_email, 
                pr_corpo_email => v_corpo_email, 
                pr_nome_anexo => v_nome_anexo,
                pr_comando_sql_anexo => v_comando_sql
            );


        END IF;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END enviar_estoque_email;


    PROCEDURE enviar_arquivos_txt (
        p_codfilial   NUMBER DEFAULT NULL,
        p_dtini       DATE DEFAULT NULL,
        p_dtfim       DATE DEFAULT NULL
    ) AS


        v_email_para              VARCHAR2(4000) DEFAULT 'rodrigo-ramos@auroraalimentos.com.br';
        v_email_copias_para       VARCHAR2(4000) DEFAULT 'bianca-silva@auroraalimentos.com.br;jumbo.ti@jumboalimentos.com.br';
        v_titulo_email            VARCHAR2(4000) DEFAULT 'Arquivos TXT ';
        v_corpo_email             VARCHAR2(4000) DEFAULT 'Segue em anexo';
        v_nome_anexo              VARCHAR2(4000) DEFAULT 'estoque.csv';
        v_comando_sql_original    VARCHAR2(32767);
        v_comando_sql             VARCHAR2(32767);
        v_nome_arquivo            VARCHAR2(255) DEFAULT 'clientes.txt';
        v_dtini                   DATE;
        v_dtfim                   DATE;
        v_comandos_sql            tcnjstrlong;
        v_comandos_sql_original   tcnjstrlong;
        v_nomes_arquivos          tcnjstr;
        inttemp                   INTEGER;
    BEGIN
        v_comandos_sql_original := tcnjstrlong();
        v_comandos_sql := tcnjstrlong();
        v_nomes_arquivos := tcnjstr();
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_dtini := nvl(p_dtini, add_months(trunc(sysdate) -(to_number(to_char(sysdate, 'dd')) - 1), -1));


            v_dtfim := nvl(p_dtfim, last_day(add_months(trunc(sysdate) -(to_number(to_char(sysdate, 'dd')) - 1), -1)));


            v_comando_sql_original := '
            WITH cli_jumbo AS (
                SELECT DISTINCT
                    rpad(nvl(TRIM(c.cliente),'' ''),60,'' '') as razao_social,
                    rpad(nvl(TRIM(c.fantasia),'' ''),60,'' '') as fantasia,
                    rpad(nvl(TRIM(c.endercom),'' ''),45,'' '') as endereco,
                    rpad(nvl(TRIM(c.bairrocom),'' ''),30,'' '') as bairro,
                    rpad(nvl(TRIM(c.cepcom),0),10,'' '') as cep,
                    rpad(nvl(TRIM(ci.nomecidade),'' ''),50,'' '') as cidade,
                    rpad(nvl(TRIM(c.estcom),'' ''),3,'' '') as estado,
                    rpad(DECODE(nvl(TRIM(c.paisent),0),1058,''Brasil'','' ''),50,'' '') as pais,
                    CASE /*raiz*/
                            WHEN instr(nvl(TRIM(c.cgcent),0),''/'') > 0 THEN 
                                substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),0),''[^0-9]*''),''00000000000000''),2,8)
                            ELSE 
                                CASE
                                    WHEN instr(nvl(TRIM(c.cgcent),0),''-'') > 0 THEN 
                                        substr(''00000000000000'',2,8)
                                    ELSE 
                                        CASE
                                            WHEN length(regexp_replace(nvl(TRIM(c.cgcent),0),''[^0-9]*'') ) > 11 THEN 
                                                substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),0),''[^0-9]*''),''00000000000000''),2,8)
                                            ELSE 
                                                substr(''00000000000000'',2,8)
                                        END
                                END
                        END
                    AS raiz,
                    CASE /*filial*/
                            WHEN instr(nvl(TRIM(c.cgcent),0),''/'') > 0 THEN 
                                substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),0),''[^0-9]*''),''00000000000000''),10,4)
                            ELSE 
                                CASE
                                    WHEN instr(nvl(TRIM(c.cgcent),0),''-'') > 0 THEN 
                                        substr(''00000000000000'',10,4)
                                    ELSE 
                                        CASE
                                            WHEN length(regexp_replace(nvl(TRIM(c.cgcent),0),''[^0-9]*'') ) > 11 THEN 
                                                substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),0),''[^0-9]*''),''00000000000000''),10,4)
                                            ELSE 
                                                substr(''00000000000000'',10,4)
                                        END
                                END
                        END
                    AS filial,
                    CASE /*digito cnjp*/
                            WHEN instr(nvl(TRIM(c.cgcent),0),''/'') > 0 THEN 
                                substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),0),''[^0-9]*''),''00000000000000''),14,2)
                            ELSE 
                                CASE
                                    WHEN instr(nvl(TRIM(c.cgcent),0),''-'') > 0 THEN 
                                        substr(''00000000000000'',14,2)
                                    ELSE 
                                        CASE
                                            WHEN length(regexp_replace(nvl(TRIM(c.cgcent),0),''[^0-9]*'') ) > 11 THEN 
                                                substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),0),''[^0-9]*''),''00000000000000''),14,2)
                                            ELSE 
                                                substr(''00000000000000'',14,2)
                                        END
                                END
                        END
                    AS digito,
                    CASE /*cpf*/
                            WHEN instr(nvl(TRIM(c.cgcent),0),''/'') > 0 THEN 
                                TRIM(substr(TO_CHAR(regexp_replace(nvl(TRIM(''000000000000''),0),''[^0-9]*''),''000000000000''),3,13) )
                            ELSE 
                                CASE
                                    WHEN instr(nvl(TRIM(c.cgcent),0),''-'') > 0 THEN 
                                        TRIM(substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),0),''[^0-9]*''),''000000000000''),3,13) )
                                    ELSE 
                                        CASE
                                            WHEN length(regexp_replace(nvl(TRIM(c.cgcent),0),''[^0-9]*'') ) > 11 THEN 
                                                TRIM(substr(TO_CHAR(regexp_replace(nvl(TRIM(''000000000000''),0),''[^0-9]*''),''000000000000''),3,13) )
                                            ELSE 
                                                TRIM(substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),0),''[^0-9]*''),''000000000000''),3,13) )
                                        END
                                END
                        END
                    AS cpf,
                    substr(replace(TO_CHAR(nvl(TRIM(0),0),''0000000000''),'',''),2,8) as col1,
                    rpad(nvl(TRIM(c.complementocom),'' ''),20,'' '') as complemento,
                    rpad(nvl(TRIM(c.telcom),'' ''),60,'' '') as telefone,
                    rpad(nvl(TRIM(c.numerocom),'' ''),7,'' '') as numero,
                    rpad(nvl(TRIM(c.ieent),'' ''),15,'' '') as ie,
                    rpad(nvl(TRIM(c.iment),'' ''),15,'' '') as im
                FROM
                    jumbo.pcmov m
                    join jumbo.pcnfsaid n on (n.numtransvenda = m.numtransvenda)
                    join jumbo.pcclient c on (c.codcli = m.codcli)
                    left outer join jumbo.pccidade ci on (ci.codcidade = c.codcidade)
                WHERE
                    n.dtsaida BETWEEN ''' || v_dtini || ''' AND ''' || v_dtfim || '''
                    AND n.codfilial = __CODFILIAL__
                    AND N.DTCANCEL IS NULL
                    and n.especie = ''NF''
                    AND m.codoper = ''S''
                    AND m.codfornec in (select codfornec from jumbo.pcfornec where fornecedor like ''%AUROR%'')
            ),cli_aurora AS (
                SELECT DISTINCT
                    rpad(nvl(TRIM(c.cliente),nvl(nvl(TRIM(ca.nomerazao),TRIM(a.nome_destino) ),'' '') ),60,'' '') as razao_social,
                    rpad(nvl(TRIM(c.fantasia),nvl(nvl(TRIM(ca.fantasia),TRIM(a.nome_destino) ),'' '') ),60,'' '') as fantasia,
                    rpad(nvl(TRIM(c.endercom),nvl(TRIM(end.endereco),'' '') ),45,'' '') as endereco,
                    rpad(nvl(TRIM(c.bairrocom),nvl(TRIM(end.bairro),'' '') ),30,'' '') as bairro,
                    rpad(nvl(TRIM(c.cepcom),nvl(TRIM(end.cep),0) ),10,'' '') as cep,
                    rpad(nvl(TRIM(ci.nomecidade),nvl(nvl(TRIM(end.cidade),TRIM(a.cidade_destino) ),'' '') ),50,'' '') as cidade,
                    rpad(nvl(TRIM(c.estcom),nvl(nvl(TRIM(end.uf),TRIM(a.estado_destino) ),'' '') ),3,'' '') as estado,
                    rpad(nvl(TRIM(''Brasil''),'' ''),50,'' '') as pais,
                    CASE /*raiz*/
                            WHEN instr(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''/'') > 0 THEN
                                substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''[^0-9]*''),''00000000000000''),2,8)
                            ELSE 
                                CASE
                                    WHEN instr(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''-'') > 0 THEN 
                                        substr(''00000000000000'',2,8)
                                    ELSE 
                                        CASE
                                            WHEN length(regexp_replace(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''[^0-9]*'') ) > 11 THEN 
                                                substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''[^0-9]*''),''00000000000000''),2,8)
                                            ELSE 
                                                substr(''00000000000000'',2,8)
                                        END
                                END
                        END
                    AS raiz,
                    CASE /*filial*/
                            WHEN instr(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''/'') > 0 THEN
                                substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''[^0-9]*''),''00000000000000''),10,4)
                            ELSE 
                                CASE
                                    WHEN instr(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''-'') > 0 THEN 
                                        substr(''00000000000000'',10,4)
                                    ELSE 
                                        CASE
                                            WHEN length(regexp_replace(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''[^0-9]*'') ) > 11 THEN 
                                                substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''[^0-9]*''),''00000000000000''),10,4)
                                            ELSE 
                                                substr(''00000000000000'',10,4)
                                        END
                                END
                        END
                    AS filial,
                    CASE /*digito cnjp*/
                            WHEN instr(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''/'') > 0 THEN 
                                substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''[^0-9]*''),''00000000000000''),14,2)
                            ELSE 
                                CASE
                                    WHEN instr(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''-'') > 0 THEN 
                                        substr(''00000000000000'',14,2)
                                    ELSE 
                                        CASE
                                            WHEN length(regexp_replace(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''[^0-9]*'') ) > 11 THEN 
                                                substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''[^0-9]*''),''00000000000000''),14,2)
                                            ELSE 
                                                substr(''00000000000000'',14,2)
                                        END
                                END
                        END
                    AS digito,
                    CASE /*cpf*/
                            WHEN instr(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''/'') > 0 THEN 
                                TRIM(substr(TO_CHAR(regexp_replace(nvl(TRIM(''000000000000''),0),''[^0-9]*''),''000000000000''),3,13) )
                            ELSE 
                                CASE
                                    WHEN instr(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''-'') > 0 THEN 
                                        TRIM(substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''[^0-9]*''),''000000000000''),3,13) )
                                    ELSE 
                                        CASE
                                            WHEN length(regexp_replace(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''[^0-9]*'') ) > 11 THEN 
                                                TRIM(substr(TO_CHAR(regexp_replace(nvl(TRIM(''000000000000''),0),''[^0-9]*''),''000000000000''),3,13) )
                                            ELSE 
                                                TRIM(substr(TO_CHAR(regexp_replace(nvl(TRIM(c.cgcent),nvl(nvl(TRIM(ca.numcnpjcpf),TRIM(a.cgc_destino) ),0) ),''[^0-9]*''),''000000000000''),3,13) )
                                        END
                                END
                        END
                    AS cpf,
                    substr(replace(TO_CHAR(nvl(TRIM(0),0),''0000000000''),'',''),2,8) as col1,
                    rpad(nvl(TRIM(c.complementocom),nvl(TRIM(end.compl_end),'' '') ),20,'' '') as complemento,
                    rpad(nvl(TRIM(c.telcom),nvl(TRIM(end.fone),'' '') ),60,'' '') as telefone,
                    rpad(nvl(TRIM(c.numerocom),nvl(TRIM(end.nro_end),'' '') ),7,'' '') as numero,
                    rpad(nvl(TRIM(c.ieent),nvl(TRIM(ca.insc_est),'' '') ),15,'' '') as ie,
                    rpad(nvl(TRIM(c.iment),nvl(TRIM(ca.insc_mun),'' '') ),15,'' '') as im
                FROM
                    __FNV_GET_NOMESCHEMA__.dados_vendas_origem a
                    left outer join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pessoa_origem ca on (
                        to_number(regexp_replace(ca.numcnpjcpf,''[^0-9]*'')) = to_number(regexp_replace(a.cgc_destino,''[^0-9]*''))
                        and ca.codorigemdado = a.codorigemdado
                    )
                    left outer join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__enderecos_pessoa end on (end.codpessoaorigem = ca.codpessoa)
                    left outer join jumbo.pcclient c on (to_number(regexp_replace(c.cgcent,''[^0-9]*'')) = to_number(regexp_replace(a.cgc_destino,''[^0-9]*'')))
                    left outer join jumbo.pccidade ci on (ci.codcidade = c.codcidade)
                WHERE
                    a.dt_emissao_nfsa BETWEEN ''' || v_dtini || ''' AND ''' || v_dtfim || '''
                    AND DECODE(a.cod_unid,63,1,64,2,a.cod_unid) = __CODFILIAL__
                    AND a.cd_item < 900000
                    AND a.vendedor > 100
                    AND a.vendedor < 334
                    AND a.vendedor <> 200
            ) SELECT
                razao_social 
                || fantasia
                || endereco
                || bairro
                || cep
                || cidade
                || estado
                || pais
                || raiz
                || filial
                || digito
                || cpf
                || col1
                || complemento
                || telefone
                || numero
                || ie
                || im
                FROM
                cli_jumbo
            UNION ALL
            SELECT
                razao_social 
                || fantasia
                || endereco
                || bairro
                || cep
                || cidade
                || estado
                || pais
                || raiz
                || filial
                || digito
                || cpf
                || col1
                || complemento
                || telefone
                || numero
                || ie
                || im            
            FROM
                cli_aurora
            WHERE
                NOT EXISTS (
                    SELECT
                        1
                    FROM
                        cli_jumbo
                    WHERE
                        cli_jumbo.raiz = cli_aurora.raiz
                        AND cli_jumbo.filial = cli_aurora.filial
                        AND cli_jumbo.digito = cli_aurora.digito
                        AND cli_jumbo.cpf = cli_aurora.cpf
                )
            ORDER BY
                1';


            v_nomes_arquivos.extend;
            v_nomes_arquivos(v_nomes_arquivos.count) := 'clientes.txt';
            v_comandos_sql_original.extend;
            v_comandos_sql_original(v_comandos_sql_original.count) := v_comando_sql_original;
            v_comando_sql_original := '
            SELECT DISTINCT Rpad(Nvl(trim(p.codprod),0), 20, '' '') 
                            || Rpad(Nvl(trim(p.descricao),0), 60, '' '')
                            || Rpad(Nvl(trim(p.unidade),0), 5, '' '')
                            || substr(To_char(Nvl(trim(p.codprod),0),''0000000''),3,7)
                            || Rpad(Nvl(trim(5102),0), 10, '' '')
                            || Substr(To_char(regexp_replace(Nvl(trim(f.cgc),0),''[^0-9]*''), ''00000000000000''), 2, 8)
                            || Substr(To_char(regexp_replace(Nvl(trim(f.cgc),0),''[^0-9]*''), ''00000000000000''), 10, 4)
                            || Substr(To_char(regexp_replace(Nvl(trim(f.cgc),0),''[^0-9]*''), ''00000000000000''), 14, 2) as linha
            FROM   jumbo.pcmov m
                    join jumbo.pcnfsaid s on (s.numtransvenda = m.numtransvenda)
                    join jumbo.pcprodut p on (p.codprod = m.codprod)
                    join jumbo.pcfilial f on (m.codfilial = f.codigo)
            WHERE  s.dtsaida BETWEEN ''' || v_dtini || ''' AND ''' || v_dtfim || '''
                    AND s.codfilial = __CODFILIAL__
                    and s.especie = ''NF''
                    AND m.codoper = ''S''
                    AND s.dtcancel is null
                    AND m.codfornec in (select codfornec from jumbo.pcfornec where fornecedor like ''%AUROR%'')       
            UNION
            SELECT DISTINCT Rpad(Nvl(trim(p.codprod),0), 20, '' '')
                            || Rpad(Nvl(trim(p.descricao),0), 60, '' '')
                            || Rpad(Nvl(trim(p.unidade),0), 5, '' '')
                            || substr(To_char(Nvl(trim(p.codprod),0),''0000000''),3,7)
                            || Rpad(Nvl(trim(5102),0), 10, '' '')
                            || Substr(To_char(regexp_replace(Nvl(trim(f.cgc),0),''[^0-9]*''), ''00000000000000''), 2, 8)
                            || Substr(To_char(regexp_replace(Nvl(trim(f.cgc),0),''[^0-9]*''), ''00000000000000''), 10, 4)
                            || Substr(To_char(regexp_replace(Nvl(trim(f.cgc),0),''[^0-9]*''), ''00000000000000''), 14, 2) as linha
            FROM   __FNV_GET_NOMESCHEMA__.dados_vendas_origem a
                    left outer join jumbo.pcprodut p on (p.codprod = a.cd_item)
                    left outer join jumbo.pcfilial f on (decode(a.cod_unid,63,1,64,2,a.cod_unid)=f.codigo)
            WHERE  a.dt_emissao_nfsa BETWEEN '''|| v_dtini|| ''' AND '''|| v_dtfim|| '''
                    AND decode(a.cod_unid,63,1,64,2,a.cod_unid)= __CODFILIAL__
                    AND a.cd_item < 900000
                    AND a.vendedor > 100
                    AND a.vendedor < 334
                    AND a.vendedor <> 200
        ';


            v_nomes_arquivos.extend;
            v_nomes_arquivos(v_nomes_arquivos.count) := 'itens_distribuidor_aurora.txt';
            v_comandos_sql_original.extend;
            v_comandos_sql_original(v_comandos_sql_original.count) := v_comando_sql_original;
            v_comando_sql_original := '
                    SELECT DISTINCT substr(To_char(Nvl(trim(m.numnota),0), ''0000000000000''),3,14)
                            || Rpad(Nvl(trim(n.serie),0), 3, '' '')
                            || Concat(Concat(Nvl(trim(Substr(n.dtsaida, 1, 2)), ''01''), Nvl(trim(Substr(n.dtsaida, 4, 2)), ''01'')), Concat(''20'', Nvl(trim(Substr(n.dtsaida, 7, 4)), ''01'')))
                            || substr(To_char(Nvl(trim(n.codfiscal),0), ''00000''),3,6)
                            || substr(replace(To_char(N.VLTOTAL, ''000000000000D9999''),'',''),2,18)
                            || Substr(To_char(regexp_replace(Nvl(trim(n.cgcfilial),0),''[^0-9]*''), ''00000000000000''), 2, 8)
                            || Substr(To_char(regexp_replace(Nvl(trim(n.cgcfilial),0),''[^0-9]*''), ''00000000000000''), 10, 4)
                            || Substr(To_char(regexp_replace(Nvl(trim(n.cgcfilial),0),''[^0-9]*''), ''00000000000000''), 14, 2)
                            || CASE /*raiz*/
                                WHEN Instr(Nvl(trim(n.cgc), 0), ''/'') > 0 THEN 
                                Substr(To_char(regexp_replace(Nvl(trim(n.cgc), 0),''[^0-9]*''), ''00000000000000''), 2, 8)
                                ELSE 
                                CASE
                                    WHEN Instr(Nvl(trim(n.cgc), 0), ''-'') > 0 THEN 
                                    Substr(''00000000000000'', 2, 8)
                                    ELSE 
                                    CASE
                                        WHEN Length(regexp_replace(Nvl(trim(n.cgc), 0),''[^0-9]*'')) > 11 THEN 
                                        Substr(To_char(regexp_replace(Nvl(trim(n.cgc), 0),''[^0-9]*''), ''00000000000000''), 2, 8)
                                        ELSE 
                                        Substr(''00000000000000'', 2, 8)
                                    END
                                END
                            END
                            || CASE /*filial*/
                                WHEN Instr(Nvl(trim(n.cgc), 0), ''/'') > 0 THEN 
                                Substr(To_char(regexp_replace(Nvl(trim(n.cgc), 0),''[^0-9]*''), ''00000000000000''), 10, 4)
                                ELSE 
                                CASE
                                    WHEN Instr(Nvl(trim(n.cgc), 0), ''-'') > 0 THEN 
                                    Substr(''00000000000000'', 10, 4)                          
                                    ELSE 
                                    CASE
                                        WHEN Length(regexp_replace(Nvl(trim(n.cgc), 0),''[^0-9]*'')) > 11 THEN 
                                        Substr(To_char(regexp_replace(Nvl(trim(n.cgc), 0),''[^0-9]*''), ''00000000000000''), 10, 4)
                                        ELSE 
                                        Substr(''00000000000000'', 10, 4)                          
                                    END
                                END
                            END
                            || CASE /*digito cnjp*/
                                WHEN Instr(Nvl(trim(n.cgc), 0), ''/'') > 0 THEN 
                                Substr(To_char(regexp_replace(Nvl(trim(n.cgc), 0),''[^0-9]*''), ''00000000000000''), 14, 2)
                                ELSE 
                                CASE
                                    WHEN Instr(Nvl(trim(n.cgc), 0), ''-'') > 0 THEN 
                                    Substr(''00000000000000'', 14, 2)                          
                                    ELSE 
                                    CASE
                                        WHEN Length(regexp_replace(Nvl(trim(n.cgc), 0),''[^0-9]*'')) > 11 THEN 
                                        Substr(To_char(regexp_replace(Nvl(trim(n.cgc), 0),''[^0-9]*''), ''00000000000000''), 14, 2)
                                        ELSE 
                                        Substr(''00000000000000'', 14, 2)                          
                                    END
                                END
                            END
                            || CASE /*cpf*/
                                WHEN Instr(Nvl(trim(n.cgc), 0), ''/'') > 0 THEN 
                                trim(substr(''000000000000'',3,13))
                                ELSE 
                                CASE
                                    WHEN Instr(Nvl(trim(n.cgc), 0), ''-'') > 0 THEN 
                                    trim(substr(To_char(regexp_replace(Nvl(trim(n.cgc), 0),''[^0-9]*''), ''000000000000''),3,13))
                                    ELSE 
                                    CASE
                                        WHEN Length(regexp_replace(Nvl(trim(n.cgc), 0),''[^0-9]*'')) > 11 THEN 
                                        trim(substr(''000000000000'',3,13))
                                        ELSE 
                                        trim(substr(To_char(regexp_replace(Nvl(trim(n.cgc), 0),''[^0-9]*''), ''000000000000''),3,13))
                                    END
                                END
                            END
                            || substr(To_char(Nvl(trim(n.codusur),0), ''0000000''),3,8) as linha
            FROM   jumbo.pcmov m 
                    join jumbo.pcnfsaid n on (n.numtransvenda = m.numtransvenda)
            WHERE  n.dtsaida BETWEEN '''|| v_dtini|| ''' AND '''|| v_dtfim|| '''
                    AND n.codfilial = __CODFILIAL__
                    AND n.dtcancel is null
                    and n.especie = ''NF''
                    AND m.codoper = ''S''               
                    AND m.codfornec in (select codfornec from jumbo.pcfornec where fornecedor like ''%AUROR%'')
            UNION
            SELECT DISTINCT substr(To_char(Nvl(trim(a.nro_nfsa),0), ''0000000000000''),3,14)
                            || Rpad(Nvl(trim(1),0), 3, '' '')
                            || Concat(Concat(Nvl(trim(Substr(a.dt_emissao_nfsa, 1, 2)), ''01''), Nvl(trim(Substr(a.dt_emissao_nfsa, 4, 2)), ''01'')), Concat(''20'', Nvl(trim(Substr(a.dt_emissao_nfsa, 7, 4)), ''01'')))
                            || substr(To_char(Nvl(trim(5102),0), ''00000''),3,6)
                            || substr(replace(To_char(a.vlr_total_nfsa, ''000000000000D9999''),'',''),2,18)
                            || Decode(a.cod_unid,63,''85522043'',64,''85522043'',''00000000'')
                            || Decode(a.cod_unid,63,''0001'',64,''0002'',''0000'')
                            || Decode(a.cod_unid,63,''90'',64,''70'',''00'')
                            || CASE /*raiz*/
                                WHEN Instr(Nvl(trim(a.cgc_destino),0), ''/'') > 0 THEN 
                                Substr(To_char(regexp_replace(Nvl(trim(a.cgc_destino),0),''[^0-9]*''), ''00000000000000''), 2, 8)
                                ELSE 
                                CASE
                                    WHEN Instr(Nvl(trim(a.cgc_destino),0), ''-'') > 0 THEN 
                                    Substr(''00000000000000'', 2, 8)
                                    ELSE 
                                    CASE
                                        WHEN Length(regexp_replace(Nvl(trim(a.cgc_destino),0),''[^0-9]*'')) > 11 THEN 
                                        Substr(To_char(regexp_replace(Nvl(trim(a.cgc_destino),0),''[^0-9]*''), ''00000000000000''), 2, 8)
                                        ELSE 
                                        Substr(''00000000000000'', 2, 8)
                                    END
                                END
                            END
                            || CASE /*filial*/
                                WHEN Instr(Nvl(trim(a.cgc_destino),0), ''/'') > 0 THEN 
                                Substr(To_char(regexp_replace(Nvl(trim(a.cgc_destino),0),''[^0-9]*''), ''00000000000000''), 10, 4)
                                ELSE 
                                CASE
                                    WHEN Instr(Nvl(trim(a.cgc_destino),0), ''-'') > 0 THEN 
                                    Substr(''00000000000000'', 10, 4)                          
                                    ELSE 
                                    CASE
                                        WHEN Length(regexp_replace(Nvl(trim(a.cgc_destino),0),''[^0-9]*'')) > 11 THEN 
                                        Substr(To_char(regexp_replace(Nvl(trim(a.cgc_destino),0),''[^0-9]*''), ''00000000000000''), 10, 4)
                                        ELSE 
                                        Substr(''00000000000000'', 10, 4)                          
                                    END
                                END
                            END
                            || CASE /*digito cnjp*/
                                WHEN Instr(Nvl(trim(a.cgc_destino),0), ''/'') > 0 THEN 
                                Substr(To_char(regexp_replace(Nvl(trim(a.cgc_destino),0),''[^0-9]*''), ''00000000000000''), 14, 2)
                                ELSE 
                                CASE
                                    WHEN Instr(Nvl(trim(a.cgc_destino),0), ''-'') > 0 THEN 
                                    Substr(''00000000000000'', 14, 2)                          
                                    ELSE 
                                    CASE
                                        WHEN Length(regexp_replace(Nvl(trim(a.cgc_destino),0),''[^0-9]*'')) > 11 THEN 
                                        Substr(To_char(regexp_replace(Nvl(trim(a.cgc_destino),0),''[^0-9]*''), ''00000000000000''), 14, 2)
                                        ELSE 
                                        Substr(''00000000000000'', 14, 2)                          
                                    END
                                END
                            END
                            || CASE /*cpf*/
                                WHEN Instr(Nvl(trim(a.cgc_destino),0), ''/'') > 0 THEN 
                                trim(substr(''000000000000'',3,13))
                                ELSE 
                                CASE
                                    WHEN Instr(Nvl(trim(a.cgc_destino),0), ''-'') > 0 THEN 
                                    trim(substr(To_char(regexp_replace(Nvl(trim(a.cgc_destino),0),''[^0-9]*''), ''000000000000''),3,13))
                                    ELSE 
                                    CASE
                                        WHEN Length(regexp_replace(Nvl(trim(a.cgc_destino),0),''[^0-9]*'')) > 11 THEN 
                                        trim(substr(''000000000000'',3,13))
                                        ELSE 
                                        trim(substr(To_char(regexp_replace(Nvl(trim(a.cgc_destino),0),''[^0-9]*''), ''000000000000''),3,13))
                                    END
                                END
                            END
                            || substr(To_char(Nvl(trim(a.vendedor),0), ''0000000''),3,8) as linha                
            FROM   __FNV_GET_NOMESCHEMA__.dados_vendas_origem a
            WHERE  a.dt_emissao_nfsa BETWEEN '''
                                        || v_dtini
                                        || ''' AND '''
                                        || v_dtfim
                                        || '''
                    AND decode(a.cod_unid,63,1,64,2,a.cod_unid)= __CODFILIAL__
                    AND a.cd_item < 900000
                    AND a.vendedor > 100
                    AND a.vendedor < 334
                    AND a.vendedor <> 200
    
        ';


            v_nomes_arquivos.extend;
            v_nomes_arquivos(v_nomes_arquivos.count) := 'notas_fiscais.txt';
            v_comandos_sql_original.extend;
            v_comandos_sql_original(v_comandos_sql_original.count) := v_comando_sql_original;
            v_comando_sql_original := '        
            SELECT DISTINCT substr(To_char(Nvl(trim(m.numnota),0), ''0000000000000''),3,14)
                            || Rpad(Nvl(trim(n.serie),0), 3, '' '')
                            || Substr(To_char(regexp_replace(Nvl(trim(n.cgcfilial),0),''[^0-9]*''), ''00000000000000''), 2, 8)
                            || Substr(To_char(regexp_replace(Nvl(trim(n.cgcfilial),0),''[^0-9]*''), ''00000000000000''), 10, 4)
                            || Substr(To_char(regexp_replace(Nvl(trim(n.cgcfilial),0),''[^0-9]*''), ''00000000000000''), 14, 2)
                            || Rpad(Nvl(trim(m.codprod),0), 20, '' '')
                            || Rpad(Nvl(trim(m.unidade),0), 15, '' '')
                            || substr(replace(To_char(Nvl(trim(m.qt),0), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(Nvl(trim(m.punit),0), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(( ( ( Nvl(trim(m.qt), 0) - Nvl(trim(m.qtdevol), 0) ) * Nvl(trim(m.punit), 0) ) - Nvl(trim(m.vldesconto), 0) ), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(( Nvl(trim(m.qt), 0) * Nvl(trim(m.punit), 0) ), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(( ( Nvl(trim(m.qt), 0) - Nvl(trim(m.qtdevol), 0) ) * Nvl(trim(m.pesoliq), 0) ), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(( ( Nvl(trim(m.qt), 0) - Nvl(trim(m.qtdevol), 0) ) * Nvl(trim(m.pesobruto), 0) ), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(Nvl(trim(m.vldesconto),0), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(Nvl(trim(m.vlfrete),0), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(Nvl(trim(m.vlseguro),0), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(Nvl(trim(m.vlfrete), 0) + Nvl(trim(m.vlseguro),0), ''000000000000D9999''),'',''),2,18) as linha
            FROM   jumbo.pcmov m
                    join jumbo.pcnfsaid n on (n.numtransvenda = m.numtransvenda)
            WHERE  n.dtsaida BETWEEN '''
                                        || v_dtini
                                        || ''' AND '''
                                        || v_dtfim
                                        || '''
                    AND n.codfilial = __CODFILIAL__
                    AND m.codoper = ''S''
                    and n.especie = ''NF''
                    and n.dtcancel is null
                    AND m.codfornec in (select codfornec from jumbo.pcfornec where fornecedor like ''%AUROR%'')
            UNION ALL
            SELECT DISTINCT substr(To_char(Nvl(trim(a.nro_nfsa),0), ''0000000000000''),3,14)
                            || Rpad(Nvl(trim(To_char(1)),0), 3, '' '')
                            || Decode(a.cod_unid,63,''85522043'',64,''85522043'',''00000000'')
                            || Decode(a.cod_unid,63,''0001'',64,''0002'',''0000'')
                            || Decode(a.cod_unid,63,''90'',64,''70'',''00'')
                            || Rpad(Nvl(trim(a.cd_item),0), 20, '' '')
                            || Rpad(Nvl(trim(p.unidade),0), 15, '' '')
                            || substr(replace(To_char(Nvl(trim(a.qtde_liquida_item),0), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(Nvl(trim(a.valor_liquido_item), 0) / Nvl(trim(a.qtde_liquida_item), 1), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(Nvl(trim(a.valor_liquido_item),0), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(Nvl(trim(a.valor_liquido_item),0), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(Nvl(trim(a.peso_liquido_item),0), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(Nvl(trim(a.peso_liquido_item),0), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(Nvl(trim(0),0), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(Nvl(trim(0),0), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(Nvl(trim(0),0), ''000000000000D9999''),'',''),2,18)
                            || substr(replace(To_char(Nvl(trim(0),0), ''000000000000D9999''),'',''),2,18) as linha
            FROM   __FNV_GET_NOMESCHEMA__.dados_vendas_origem a
                    left outer join jumbo.pcprodut p on (a.cd_item = p.codprod)
            WHERE  a.dt_emissao_nfsa BETWEEN '''
                                        || v_dtini
                                        || ''' AND '''
                                        || v_dtfim
                                        || '''
                    AND decode(a.cod_unid,63,1,64,2,a.cod_unid)=__CODFILIAL__
                    AND a.cd_item < 900000
                    AND a.vendedor > 100
                    AND a.vendedor < 334
                    AND a.vendedor <> 200               
        
        ';


            v_nomes_arquivos.extend;
            v_nomes_arquivos(v_nomes_arquivos.count) := 'itens_nota_fiscal.txt';
            v_comandos_sql_original.extend;
            v_comandos_sql_original(v_comandos_sql_original.count) := v_comando_sql_original;
            v_comando_sql_original := '
            SELECT DISTINCT Rpad(nvl(trim(m.codprod), '' ''), 20, '' '')
                            || Rpad(nvl(trim(p.unidade), ''KG''), 5, '' '')
                            || Concat(Concat(Nvl(trim(Substr(e.dtultinvent, 1, 2)), ''01''), Nvl(trim(Substr(e.dtultinvent, 4, 2)), ''01'')), Concat(''20'', Nvl(trim(Substr(e.dtultinvent, 7, 4)), ''01'')))
                            || substr(replace(To_char(Nvl(trim(e.qtest),0), ''000000000000D9999''),'',''),2,18)
                            || Substr(To_char(regexp_replace(trim(f.cgc),''[^0-9]*''), ''00000000000000''), 2, 8)
                            || Substr(To_char(regexp_replace(trim(f.cgc),''[^0-9]*''), ''00000000000000''), 10, 4)
                            || Substr(To_char(regexp_replace(trim(f.cgc),''[^0-9]*''), ''00000000000000''), 14, 2) as linha
            FROM   jumbo.pcmov m
                    join jumbo.pcnfsaid n on (n.numtransvenda = m.numtransvenda)
                    join jumbo.pcprodut p on (p.codprod = m.codprod)
                    left outer join jumbo.pcest e on (e.codprod = m.codprod and e.codfilial = m.codfilial)
                    left outer join jumbo.pcfilial f on (f.codigo = m.codfilial)
            WHERE  n.dtsaida BETWEEN '''
                                        || v_dtini
                                        || ''' AND '''
                                        || v_dtfim
                                        || '''
                    AND n.codfilial = __CODFILIAL__
                    and n.dtcancel is null
                    and n.especie = ''NF''
                    AND m.codoper = ''S''
                    AND m.codfornec in (select codfornec from jumbo.pcfornec where fornecedor like ''%AUROR%'')
            UNION
            SELECT DISTINCT Rpad(nvl(trim(a.cd_item), '' ''), 20, '' '')
                            || Rpad(nvl(trim(p.unidade), ''KG''), 5, '' '')
                            || Concat(Concat(Nvl(trim(Substr(e.dtultent, 1, 2)), ''01''), Nvl(trim(Substr(e.dtultent, 4, 2)), ''01'')), Concat(''20'', Nvl(trim(Substr(e.dtultent, 7, 4)), ''01'')))
                            || substr(replace(To_char(Nvl(trim(e.qtfisicodisponivel),0), ''000000000000D9999''),'',''),2,18)
                            || Substr(To_char(regexp_replace(trim(f.cgc),''[^0-9]*''), ''00000000000000''), 2, 8)
                            || Substr(To_char(regexp_replace(trim(f.cgc),''[^0-9]*''), ''00000000000000''), 10, 4)
                            || Substr(To_char(regexp_replace(trim(f.cgc),''[^0-9]*''), ''00000000000000''), 14, 2) as linha
            FROM   __FNV_GET_NOMESCHEMA__.dados_vendas_origem a
                    left outer join jumbo.pcprodut p on (p.codprod = a.cd_item)
                    left outer join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem e on (e.codprodorigem = a.cd_item and e.codfilialorigem = decode(a.cod_unid,63,1,64,2,a.cod_unid))
                    left outer join jumbo.pcfilial f on (f.codigo = decode(a.cod_unid,63,1,64,2, a.cod_unid))
            WHERE  a.dt_emissao_nfsa BETWEEN '''
                                        || v_dtini
                                        || ''' AND '''
                                        || v_dtfim
                                        || '''
                    AND decode(a.cod_unid,63,1,64,2,a.cod_unid)= __CODFILIAL__
                    AND a.cd_item < 900000
                    AND a.vendedor > 100
                    AND a.vendedor < 334
                    AND a.vendedor <> 200
        ';


            v_nomes_arquivos.extend;
            v_nomes_arquivos(v_nomes_arquivos.count) := 'estoque.txt';
            v_comandos_sql_original.extend;
            v_comandos_sql_original(v_comandos_sql_original.count) := v_comando_sql_original;
            v_comando_sql_original := '
            SELECT DISTINCT substr(To_char(nvl(trim(m.codusur),0), ''0000000''),3,8)
                            || Rpad(nvl(trim(u.nome),'' ''), 60, '' '')
                            || Substr(To_char(regexp_replace(Nvl(trim(f.cgc),0),''[^0-9]*''), ''00000000000000''), 2, 8)
                            || Substr(To_char(regexp_replace(Nvl(trim(f.cgc),0),''[^0-9]*''), ''00000000000000''), 10, 4)
                            || Substr(To_char(regexp_replace(Nvl(trim(f.cgc),0),''[^0-9]*''), ''00000000000000''), 14, 2) as linha
            FROM   jumbo.pcmov m
                    join jumbo.pcnfsaid n on (n.numtransvenda = m.numtransvenda)
                    join jumbo.pcusuari u on (u.codusur = m.codusur)
                    left outer join jumbo.pcfilial f on (f.codigo = n.codfilial)
            WHERE  n.dtsaida BETWEEN '''
                                        || v_dtini
                                        || ''' AND '''
                                        || v_dtfim
                                        || '''
                    AND n.codfilial = __CODFILIAL__
                    and n.especie = ''NF''
                    and n.dtcancel is null
                    AND m.codoper = ''S''
                    AND m.codfornec in (select codfornec from jumbo.pcfornec where fornecedor like ''%AUROR%'')
            UNION
            SELECT DISTINCT substr(To_char(Nvl(trim(a.vendedor),0), ''0000000''),3,8)
                            || Rpad(nvl(trim(u.nome),'' ''), 60, '' '')
                            || Substr(To_char(regexp_replace(Nvl(trim(f.cgc),0),''[^0-9]*''), ''00000000000000''), 2, 8)
                            || Substr(To_char(regexp_replace(Nvl(trim(f.cgc),0),''[^0-9]*''), ''00000000000000''), 10, 4)
                            || Substr(To_char(regexp_replace(Nvl(trim(f.cgc),0),''[^0-9]*''), ''00000000000000''), 14, 2) as linha
            FROM   __FNV_GET_NOMESCHEMA__.dados_vendas_origem a
                    left outer join jumbo.pcusuari u on (u.codusur = a.vendedor)
                    left outer join jumbo.pcfilial f on (f.codigo = decode(a.cod_unid,63,1,64,2,a.cod_unid))
            WHERE  a.dt_emissao_nfsa BETWEEN '''
                                        || v_dtini
                                        || ''' AND '''
                                        || v_dtfim
                                        || '''
                    AND decode(a.cod_unid,63,1,64,2,a.cod_unid)=__CODFILIAL__
                    AND a.cd_item < 900000
                    AND a.vendedor > 100
                    AND a.vendedor < 334
                    AND a.vendedor <> 200  
        ';


            v_nomes_arquivos.extend;
            v_nomes_arquivos(v_nomes_arquivos.count) := 'vendedores.txt';
            v_comandos_sql_original.extend;
            v_comandos_sql_original(v_comandos_sql_original.count) := v_comando_sql_original;
            FOR lf IN (
                SELECT
                    f.codigo,
                    f.cidade
                FROM
                    jumbo.pcfilial f
                WHERE
                    ( ( ( p_codfilial IS NOT NULL
                            AND p_codfilial <> 0 )
                        AND f.codigo = p_codfilial )
                        OR ( ( p_codfilial IS NULL
                                OR p_codfilial = 0 )
                            AND 1 = 1 ) )
                    AND f.codigo <> 99
                ORDER BY
                    1
            ) LOOP
                inttemp := v_comandos_sql_original.count;
                v_comandos_sql := tcnjstrlong();
                FOR c IN 1..inttemp LOOP
                    v_comandos_sql.extend;
                    v_comandos_sql(c) := replace(v_comandos_sql_original(c), '__CODFILIAL__', lf.codigo);
                    dbms_output.put_line(v_comandos_sql(c));
                END LOOP;
                --return;


                v_titulo_email := 'Arquivos TXT JUMBO Filial '
                                    || lf.codigo
                                    || ' de '
                                    || v_dtini
                                    || ' a '
                                    || v_dtfim;


                v_corpo_email := 'Segue em anexo arquivos TXT da Empresa JUMBO da Filial '
                                    || lf.codigo
                                    || ' de '
                                    || v_dtini
                                    || ' a '
                                    || v_dtfim;


                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_varios_anexos(
                    pr_email_para => v_email_para, 
                    pr_email_copias_para => v_email_copias_para, 
                    pr_titulo_email => v_titulo_email, 
                    pr_corpo_email => v_corpo_email, 
                    pr_nomes_anexos => v_nomes_arquivos,
                    pr_comandos_sql_anexos => v_comandos_sql, 
                    pr_gravar_cabecalho => false, 
                    pr_eliminar_espacos => false
                );


            END LOOP;


        END IF;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END enviar_arquivos_txt;


    PROCEDURE enviar_email_necess_seco AS


        v_email_para                VARCHAR2(4000) DEFAULT 'felipe@jumboalimentos.com.br';
        v_email_copias_para         VARCHAR2(4000) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        v_titulo_email              VARCHAR2(4000) DEFAULT 'JUMBO CASCAVEL - NECESSIDADE AURORA SECO';
        v_corpo_email               VARCHAR2(4000) DEFAULT 'Segue em anexo';
        v_nome_anexo                VARCHAR2(4000) DEFAULT 'necessidade.csv';
        v_nomes_anexos              tcnjstr;
        v_comandos_anexos           tcnjstrlong;
        v_comando_sql               CLOB DEFAULT '';
        v_comando_sql2              CLOB DEFAULT '';
        v_comando_sql2a             VARCHAR2(32767) DEFAULT '';
        v_comando_sql2b             VARCHAR2(32767) DEFAULT '';
        v_cursor_id                 NUMBER default NULL;
        v_falta_total               NUMBER DEFAULT 0;
        v_acrescimo_mult            NUMBER DEFAULT 0;
        v_periodicidade_acrescimo   NUMBER DEFAULT 10;
        v_primeiro_loop             BOOLEAN DEFAULT true;
        v_codfilial                 NUMBER default NULL;
        v_contador_loop             NUMBER DEFAULT 0;
        v_limitador_loop            NUMBER DEFAULT 1000;
        v_numtransnec               NUMBER DEFAULT 0;
        v_existe                    NUMBER DEFAULT 0;
    BEGIN
        v_codfilial := 1;
        v_falta_total := 0;
        v_acrescimo_mult := 0;
        v_primeiro_loop := true;
        v_contador_loop := 0;
        v_numtransnec := __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_valor_maximo('__FNV_GET_PREFIXOBJECTSDB__necessidadefornec', 'numtransnec');       
    END enviar_email_necess_seco;


    PROCEDURE enviar_email_necessidade AS


        v_email_para                VARCHAR2(4000) DEFAULT 'felipe@jumboalimentos.com.br';
        v_email_copias_para         VARCHAR2(4000) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        v_titulo_email              VARCHAR2(4000) DEFAULT 'JUMBO CASCAVEL - NECESSIDADE AURORA';
        v_corpo_email               VARCHAR2(4000) DEFAULT 'Segue em anexo';
        v_nome_anexo                VARCHAR2(4000) DEFAULT 'necessidade.csv';
        v_existe                    NUMBER DEFAULT 0;
        v_nomes_anexos              tcnjstr;
        v_comandos_anexos           tcnjstrlong;
        v_comando_sql               CLOB DEFAULT '';
        v_comando_sql2              CLOB DEFAULT '';
        v_comando_sql2a             VARCHAR2(32767) DEFAULT '';
        v_comando_sql2b             VARCHAR2(32767) DEFAULT '';
        v_comando_sql3              CLOB DEFAULT '';
        v_cursor_id                 NUMBER default NULL;
        v_falta_total               NUMBER DEFAULT 0;
        v_acrescimo_mult            NUMBER DEFAULT 0;
        v_periodicidade_acrescimo   NUMBER DEFAULT 50;
        v_primeiro_loop             BOOLEAN DEFAULT true;
        v_segundo_loop              BOOLEAN DEFAULT false;
        v_codfilial                 NUMBER default NULL;
        v_contador_loop             NUMBER DEFAULT 0;
        v_limitador_loop            NUMBER DEFAULT 100;
        v_divisor_multiplicador     NUMBER DEFAULT 0;
        v_numtransnec               NUMBER DEFAULT 0;
    BEGIN
        v_codfilial := 1;
        v_falta_total := 0;
        v_acrescimo_mult := 0;
        v_primeiro_loop := true;
        v_segundo_loop := false;
        v_numtransnec := nvl(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_valor_maximo('__FNV_GET_PREFIXOBJECTSDB__necessidadefornec', 'numtransnec'), 0) + 1;
        
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END enviar_email_necessidade;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_aurora;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_gelosia":{
		"nomepackagesqldb":"__CHAVE__",
		"nomepackagesqlsistema":"__CHAVE__",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_gelosia AS
    PROCEDURE enviar_movent_email (
        p_codfilial   NUMBER,
        p_dtini       DATE,
        p_dtfim       DATE
    );


    PROCEDURE enviar_movsaida_email (
        p_codfilial   NUMBER,
        p_dtini       DATE,
        p_dtfim       DATE
    );


    PROCEDURE enviar_estoque_email (
        p_codfilial   NUMBER DEFAULT 1,
        p_data        DATE DEFAULT NULL
    );


    PROCEDURE enviar_estoque_email_aut;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_gelosia;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_gelosia AS


    tempcam1             NUMBER DEFAULT -21;
    tempcam2             NUMBER DEFAULT 5;
    tempamb              NUMBER DEFAULT 25;
    dest_padrao          VARCHAR2(4000) DEFAULT 'larissa.almeida@superfrio.com.br;bruna.backes@superfrio.com.br;caio.espindola@superfrio.com.br;daniela.lopes@superfrio.com.br;jumbo.ti@jumboalimentos.com.br';
    --dest_padrao          VARCHAR2(4000) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
    dest_copias_padrao   VARCHAR2(4000) DEFAULT 'felipe@jumboalimentos.com.br;jumbo.ti@jumboalimentos.com.br;dba2@jumboalimentos.com.br';
    --dest_copias_padrao   VARCHAR2(4000) DEFAULT 'jumbo.ti@jumboalimentos.com.br';


    PROCEDURE enviar_movent_email (
        p_codfilial   NUMBER,
        p_dtini       DATE,
        p_dtfim       DATE
    ) AS


        sep_campo             VARCHAR2(1) DEFAULT ';';
        v_email_para          VARCHAR2(4000) DEFAULT dest_padrao;
        v_email_copias_para   VARCHAR2(4000) DEFAULT dest_copias_padrao;
        v_titulo_email        VARCHAR2(4000) DEFAULT 'JUMBO CASCAVEL - MOVIMENTACAO ENTRADA';
        v_corpo_email         VARCHAR2(4000) DEFAULT 'Segue em anexo';
        v_nome_anexo          VARCHAR2(4000) DEFAULT 'movent.csv';
        v_comando_sql         VARCHAR2(32000) DEFAULT NULL;
    BEGIN        
        v_comando_sql := '
        WITH entradas_jumbo AS (
            SELECT
                trunc(m.dtmov) as dtent,
                to_char(m.codfilial) as codfilial,
                e.numnota,
                to_char(m.codprod) as codprod, 
                p.descricao,
                p.unidade,
                CASE
                    WHEN ( instr(p.descricao, ''MASS'') > 0 )
                            OR ( instr(p.descricao, ''CHACARA'') > 0 ) THEN
                        ''ESTIVADA''
                    ELSE
                        ''PALETIZADA''
                END AS \"tipo de movimentacao\",
                CASE
                    WHEN ( instr(p.descricao, ''CREME DE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''CREME LEITE'') > 0 )
                            OR ( instr(p.descricao, ''DOCE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''DOCE DE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''LEITE COND'') > 0 )
                            OR ( instr(p.descricao, ''OLEO'') > 0 )
                            OR ( instr(p.descricao, ''GORDURA'') > 0 )
                            OR ( instr(p.descricao, ''LEITE EM P'') > 0 )
                            OR ( instr(p.descricao, ''PALMITO'') > 0 )
                            OR ( instr(p.descricao, ''ACHOCOLAT'') > 0 ) THEN
                            ''AMBIENTE''
                        ELSE
                            case
                                when nvl(p.rua,1) = 1 then
                                    ''CONGELADO''
                                when nvl(p.rua,1) = 2 then
                                    ''RESFRIADO''
                                else
                                    ''INDEFINIDO''
                            end
                END as armazenagem,
                SUM(nvl(m.qt, m.qtcont)) AS quantidade,
                sum(nvl(m.qt, m.qtcont) * nvl(p.pesoliq,1)) as pesoliq,
                sum(nvl(m.qt, m.qtcont) * nvl(p.pesobruto,1)) as pesobruto
            FROM
                jumbo.pcmov      m
                JOIN jumbo.pcnfent    e ON ( e.numtransent = m.numtransent )
                JOIN jumbo.pcprodut   p ON ( p.codprod = m.codprod )
                join jumbo.pcfornec f on (f.codfornec = m.codfornec)
            WHERE
                e.dtent BETWEEN to_date('''
                            || to_char(p_dtini,'dd/mm/yyyy')
                            || ''',''dd/mm/yyyy'') AND to_date('''
                            || to_char(p_dtfim,'dd/mm/yyyy')
                            || ''',''dd/mm/yyyy'')
                AND e.codfilial = '
                            || p_codfilial
                            || '
                AND e.dtcancel IS NULL
                AND p.codepto <> 52
                AND p.codprod < 80000
                and f.fornecedor not like ''%AUROR%''
                and m.codoper in (''E'',''EB'')
            GROUP BY
                trunc(m.dtmov),
                m.codfilial,
                e.numnota,
                m.codprod,
                p.descricao,
                p.unidade,
                CASE
                    WHEN ( instr(p.descricao, ''MASS'') > 0 )
                            OR ( instr(p.descricao, ''CHACARA'') > 0 ) THEN
                        ''ESTIVADA''
                    ELSE
                        ''PALETIZADA''
                END,
                CASE
                    WHEN ( instr(p.descricao, ''CREME DE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''CREME LEITE'') > 0 )
                            OR ( instr(p.descricao, ''DOCE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''DOCE DE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''LEITE COND'') > 0 )
                            OR ( instr(p.descricao, ''OLEO'') > 0 )
                            OR ( instr(p.descricao, ''GORDURA'') > 0 )
                            OR ( instr(p.descricao, ''LEITE EM P'') > 0 )
                            OR ( instr(p.descricao, ''PALMITO'') > 0 )
                            OR ( instr(p.descricao, ''ACHOCOLAT'') > 0 ) THEN
                            ''AMBIENTE''
                        ELSE
                            case
                                when nvl(p.rua,1) = 1 then
                                    ''CONGELADO''
                                when nvl(p.rua,1) = 2 then
                                    ''RESFRIADO''
                                else
                                    ''INDEFINIDO''
                            end
                END
            HAVING
                SUM(nvl(m.qt, m.qtcont)) > 0
            ORDER BY
                trunc(m.dtmov),
                m.codfilial,
                e.numnota,
                m.codprod
        ),
        
        entradas_aurora AS (
            SELECT  
                trunc(m.dtregistro) as dtent,
                to_char(m.codfilial),
                NULL AS NUMNOTA,
                to_char(m.codprod),
                p.descricao,
                p.unidade,
                CASE
                    WHEN ( instr(p.descricao, ''MASS'') > 0 )
                            OR ( instr(p.descricao, ''CHACARA'') > 0 ) THEN
                        ''ESTIVADA''
                    ELSE
                        ''PALETIZADA''
                END AS \"tipo de movimentacao\",
                CASE
                    WHEN ( instr(p.descricao, ''CREME DE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''CREME LEITE'') > 0 )
                            OR ( instr(p.descricao, ''DOCE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''DOCE DE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''LEITE COND'') > 0 )
                            OR ( instr(p.descricao, ''OLEO'') > 0 )
                            OR ( instr(p.descricao, ''GORDURA'') > 0 )
                            OR ( instr(p.descricao, ''LEITE EM P'') > 0 )
                            OR ( instr(p.descricao, ''PALMITO'') > 0 )
                            OR ( instr(p.descricao, ''ACHOCOLAT'') > 0 ) THEN
                            ''AMBIENTE''
                        ELSE
                            case
                                when nvl(p.rua,1) = 1 then
                                    ''CONGELADO''
                                when nvl(p.rua,1) = 2 then
                                    ''RESFRIADO''
                                else
                                    ''INDEFINIDO''
                            end
                END as armazenagem,
                SUM(nvl(m.qt,0)) AS quantidade,
                sum(nvl(m.qt, 0) * nvl(p.pesoliq,1)) as pesoliq,
                sum(nvl(m.qt,0) * nvl(p.pesobruto,1)) as pesobruto
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__movorigem m
                LEFT OUTER JOIN jumbo.pcprodut   p ON ( p.codprod = m.codprod )
            WHERE
                m.dtregistro BETWEEN to_date('''
                            || to_char(p_dtini,'dd/mm/yyyy')
                            || ''',''dd/mm/yyyy'') AND to_date('''
                            || to_char(p_dtfim,'dd/mm/yyyy')
                            || ''',''dd/mm/yyyy'')
                AND m.codfilial = '
                            || p_codfilial
                            || '
                AND m.codoper = ''E''
                AND p.codepto <> 52
                AND p.codprod < 80000
            GROUP BY
                trunc(m.dtregistro),
                to_char(m.codfilial),
                NULL,
                to_char(m.codprod),   
                p.descricao,
                p.unidade,
                CASE
                    WHEN ( instr(p.descricao, ''MASS'') > 0 )
                            OR ( instr(p.descricao, ''CHACARA'') > 0 ) THEN
                        ''ESTIVADA''
                    ELSE
                        ''PALETIZADA''
                END,
                CASE
                    WHEN ( instr(p.descricao, ''CREME DE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''CREME LEITE'') > 0 )
                            OR ( instr(p.descricao, ''DOCE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''DOCE DE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''LEITE COND'') > 0 )
                            OR ( instr(p.descricao, ''OLEO'') > 0 )
                            OR ( instr(p.descricao, ''GORDURA'') > 0 )
                            OR ( instr(p.descricao, ''LEITE EM P'') > 0 )
                            OR ( instr(p.descricao, ''PALMITO'') > 0 )
                            OR ( instr(p.descricao, ''ACHOCOLAT'') > 0 ) THEN
                            ''AMBIENTE''
                        ELSE
                            case
                                when nvl(p.rua,1) = 1 then
                                    ''CONGELADO''
                                when nvl(p.rua,1) = 2 then
                                    ''RESFRIADO''
                                else
                                    ''INDEFINIDO''
                            end
                END
            HAVING
                SUM(nvl(m.qt, 0)) > 0
            ORDER BY
                trunc(m.dtregistro),
                to_char(m.codfilial),
                NULL,
                to_char(m.codprod)
        ),
        entradas_juntas as (
            SELECT
                ''JUMBO'' as \"Origem\",
                e.*
            FROM
                entradas_jumbo e
            union all
            SELECT
                ''AURORA'' as \"Origem\",
                a.*
            FROM
                entradas_aurora a
        )
        select
            * 
        from
            entradas_juntas
        order by
            1,
            2,
            3,
            4';


        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_titulo_email := v_titulo_email
                                || ' Filial '
                                || p_codfilial
                                || ' '
                                || p_dtini
                                || ' a '
                                || p_dtfim;


            v_corpo_email := '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
                                || v_corpo_email
                                || ' movientacao de entrada da Filial '
                                || p_codfilial
                                || ' referente ao periodo de '
                                || p_dtini
                                || ' a '
                                || p_dtfim
                                || '. <br /><br /><br /> Obrigado.';

            --dbms_output.put_line(v_comando_sql);return;

            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                pr_email_para => v_email_para, 
                pr_email_copias_para => v_email_copias_para, 
                pr_titulo_email => v_titulo_email, 
                pr_corpo_email => v_corpo_email, 
                pr_nome_anexo => v_nome_anexo,
                pr_comando_sql_anexo => v_comando_sql
            );


        END IF;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END enviar_movent_email;


    PROCEDURE enviar_movsaida_email (
        p_codfilial   NUMBER,
        p_dtini       DATE,
        p_dtfim       DATE
    ) AS


        v_email_para          VARCHAR2(4000) DEFAULT dest_padrao;
        v_email_copias_para   VARCHAR2(4000) DEFAULT dest_copias_padrao;
        v_titulo_email        VARCHAR2(4000) DEFAULT 'JUMBO CASCAVEL - MOVIMENTACAO SAIDA';
        v_corpo_email         VARCHAR2(4000) DEFAULT 'Segue em anexo';
        v_nome_anexo          VARCHAR2(4000) DEFAULT 'movsaida.csv';
        v_comando_sql         Clob default empty_clob;/*VARCHAR2(32000);*/
    BEGIN
        v_comando_sql := '';
        v_comando_sql := '
        WITH saidas_jumbo AS (
            SELECT
                trunc(s.dtsaida) as dtsaida,
                TO_CHAR(m.codfilial) AS codfilial,
                m.codprod AS codprod,
                TO_CHAR(p.descricao) AS descricao,
                TO_CHAR(p.unidade) AS unidade,
                CASE
                    WHEN ( instr(p.descricao, ''MASS'') > 0 )
                            OR ( instr(p.descricao, ''CHACARA'') > 0 ) THEN
                        ''ESTIVADA''
                    ELSE
                        ''PALETIZADA''
                END AS \"tipo de movimentacao\",
                CASE
                    WHEN ( instr(p.descricao, ''CREME DE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''CREME LEITE'') > 0 )
                            OR ( instr(p.descricao, ''DOCE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''DOCE DE LEITE'') > 0 )
                            OR ( instr(p.descricao, ''LEITE COND'') > 0 )
                            OR ( instr(p.descricao, ''OLEO'') > 0 )
                            OR ( instr(p.descricao, ''GORDURA'') > 0 )
                            OR ( instr(p.descricao, ''LEITE EM P'') > 0 )
                            OR ( instr(p.descricao, ''PALMITO'') > 0 )
                            OR ( instr(p.descricao, ''ACHOCOLAT'') > 0 ) THEN
                            '
                            || tempamb
                            || '
                            ELSE
                                case
                                    when nvl(p.rua,1) = 1 then
                                        '
                            || tempcam1
                            || '
                                    when nvl(p.rua,1) = 2 then
                                        '
                            || tempcam2
                            || '
                                    else
                                        99
                                end
                END AS \"temperatura saida\",
                SUM(nvl(m.qt, m.qtcont)) AS quantidade,
                SUM(nvl(m.qt, m.qtcont) * nvl(p.pesoliq, m.pesoliq)) AS \"peso liquido total\",
                SUM(nvl(m.qt, m.qtcont) * nvl(p.pesobruto, m.pesobruto)) AS \"peso bruto total\",
                SUM(nvl(m.qt, m.qtcont) * nvl(m.punit, m.punitcont)) AS \"valor total\"
            FROM
                jumbo.pcmov      m
                JOIN jumbo.pcnfsaid   s ON ( s.numtransvenda = m.numtransvenda )
                JOIN jumbo.pcprodut   p ON ( p.codprod = m.codprod )
            WHERE
                s.dtsaida BETWEEN to_date('''
                            || to_char(p_dtini,'dd/mm/yyyy')
                            || ''',''dd/mm/yyyy'') AND to_date('''
                            || to_char(p_dtfim,'dd/mm/yyyy')
                            || ''',''dd/mm/yyyy'')
                AND s.codfilial = '
                            || p_codfilial
                            || '
                AND s.dtcancel IS NULL
                AND p.codepto <> 52
                AND p.codprod < 80000
            GROUP BY
                trunc(s.dtsaida),
                TO_CHAR(m.codfilial),
                m.codprod,
                TO_CHAR(p.descricao),
                TO_CHAR(p.unidade),
                CASE
                        WHEN ( instr(p.descricao, ''MASS'') > 0 )
                                OR ( instr(p.descricao, ''CHACARA'') > 0 ) THEN
                            ''ESTIVADA''
                        ELSE
                            ''PALETIZADA''
                    END,
                CASE
                        WHEN ( instr(p.descricao, ''CREME DE LEITE'') > 0 )
                                OR ( instr(p.descricao, ''CREME LEITE'') > 0 )
                                OR ( instr(p.descricao, ''DOCE LEITE'') > 0 )
                                OR ( instr(p.descricao, ''DOCE DE LEITE'') > 0 )
                                OR ( instr(p.descricao, ''LEITE COND'') > 0 )
                                OR ( instr(p.descricao, ''OLEO'') > 0 )
                                OR ( instr(p.descricao, ''GORDURA'') > 0 )
                                OR ( instr(p.descricao, ''LEITE EM P'') > 0 )
                                OR ( instr(p.descricao, ''PALMITO'') > 0 )
                                OR ( instr(p.descricao, ''ACHOCOLAT'') > 0 ) THEN
                                '
                            || tempamb
                            || '
                            ELSE
                                case
                                    when nvl(p.rua,1) = 1 then
                                        '
                            || tempcam1
                            || '
                                    when nvl(p.rua,1) = 2 then
                                        '
                            || tempcam2
                            || '
                                    else
                                        99
                                end
                    END
            HAVING
                SUM(nvl(m.qt, m.qtcont)) > 0
        ), saidas_aurora AS (
            SELECT
                trunc(a.dt_emissao_nfsa) as dtsaida,
                TO_CHAR(a.cod_unid),
                a.cd_item,
                TO_CHAR(nvl(p.descricao, pa.descricao)),
                TO_CHAR(nvl(nvl(p.unidade, uo.unidade), ''KG'')),
                CASE
                    WHEN ( instr(nvl(p.descricao, pa.descricao), ''MASS'') > 0 )
                            OR ( instr(nvl(p.descricao, pa.descricao), ''CHACARA'') > 0 ) THEN
                        ''ESTIVADA''
                    ELSE
                        ''PALETIZADA''
                END AS \"tipo de movimentacao\",
                CASE
                    WHEN ( instr(nvl(p.descricao, pa.descricao), ''CREME DE LEITE'') > 0 )
                            OR ( instr(nvl(p.descricao, pa.descricao), ''CREME LEITE'') > 0 )
                            OR ( instr(nvl(p.descricao, pa.descricao), ''DOCE LEITE'') > 0 )
                            OR ( instr(nvl(p.descricao, pa.descricao), ''DOCE DE LEITE'') > 0 )
                            OR ( instr(nvl(p.descricao, pa.descricao), ''LEITE COND'') > 0 )
                            OR ( instr(nvl(p.descricao, pa.descricao), ''OLEO'') > 0 )
                            OR ( instr(nvl(p.descricao, pa.descricao), ''GORDURA'') > 0 )
                            OR ( instr(nvl(p.descricao, pa.descricao), ''LEITE EM P'') > 0 )
                            OR ( instr(nvl(p.descricao, pa.descricao), ''PALMITO'') > 0 )
                            OR ( instr(nvl(p.descricao, pa.descricao), ''ACHOCOLAT'') > 0 ) THEN
                            '
                            || tempamb
                            || '
                        ELSE
                            case
                                when nvl(p.rua,1) = 1 then
                                    '
                            || tempcam1
                            || '
                                when nvl(p.rua,1) = 2 then
                                    '
                            || tempcam2
                            || '
                                else
                                    99
                            end
                END AS \"temperatura saida\",
                SUM(nvl(a.qtde_liquida_item, 0)) AS quantidade,
                SUM(nvl(a.qtde_liquida_item, 0) * nvl(p.pesoliq, 1)) AS \"peso liquido total\",
                SUM(nvl(a.qtde_liquida_item, 0) * nvl(p.pesobruto, 1)) AS \"peso bruto total\",
                SUM(nvl(a.valor_liquido_item, 0)) AS \"valor total\"
            FROM
                __FNV_GET_NOMESCHEMA__.dados_vendas_origem         a
                LEFT OUTER JOIN jumbo.pcprodut                p ON ( p.codprod = a.cd_item )
                LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__produto_origem   pa ON ( pa.codprod = a.cd_item )
                LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__unidades_origem     uo on (uo.codunidade = pa.codunidadeorigem and nvl(uo.codorigemdado,pa.codorigemdado) = pa.codorigemdado)
            WHERE
                a.dt_emissao_nfsa BETWEEN to_date('''
                            || to_char(p_dtini,'dd/mm/yyyy')
                            || ''',''dd/mm/yyyy'') AND to_date('''
                            || to_char(p_dtfim,'dd/mm/yyyy')
                            || ''',''dd/mm/yyyy'')
                AND nvl(a.cod_unid, 0) = '
                            || p_codfilial
                            || '
                AND nvl(a.qtde_liquida_item, 0) > 0
            GROUP BY
                trunc(a.dt_emissao_nfsa),
                TO_CHAR(a.cod_unid),
                a.cd_item,
                TO_CHAR(nvl(p.descricao, pa.descricao)),
                TO_CHAR(nvl(nvl(p.unidade, uo.unidade), ''KG'')),
                CASE
                        WHEN ( instr(nvl(p.descricao, pa.descricao), ''MASS'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''CHACARA'') > 0 ) THEN
                            ''ESTIVADA''
                        ELSE
                            ''PALETIZADA''
                    END,
                CASE
                        WHEN ( instr(nvl(p.descricao, pa.descricao), ''CREME DE LEITE'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''CREME LEITE'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''DOCE LEITE'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''DOCE DE LEITE'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''LEITE COND'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''OLEO'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''GORDURA'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''LEITE EM P'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''PALMITO'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''ACHOCOLAT'') > 0 ) THEN
                            '
                            || tempamb
                            || '
                        ELSE
                            case
                                when nvl(p.rua,1) = 1 then
                                    '
                            || tempcam1
                            || '
                                when nvl(p.rua,1) = 2 then
                                    '
                            || tempcam2
                            || '
                                else
                                    99
                            end
                    END
            HAVING
                SUM(nvl(a.qtde_liquida_item, 0)) > 0
        ), saidas AS (
            SELECT
                *
            FROM
                saidas_jumbo
            UNION ALL
            SELECT
                *
            FROM
                saidas_aurora
        ), resultante AS (
            SELECT
                dtsaida,
                codfilial,
                codprod,
                descricao,
                unidade,
                \"tipo de movimentacao\",
                \"temperatura saida\",
                SUM(quantidade) AS quantidade,
                SUM(\"peso liquido total\") AS \"peso liquido total\",
                SUM(\"peso bruto total\") AS \"peso bruto total\",
                SUM(\"valor total\") AS \"valor total\"
                
            FROM
                saidas
            GROUP BY
                dtsaida,
                codfilial,
                codprod,
                descricao,
                unidade,
                \"tipo de movimentacao\",
                \"temperatura saida\"
        )
        SELECT
            r.dtsaida,
            r.codfilial,
            r.codprod,
            r.descricao,
            r.unidade,
            r.\"tipo de movimentacao\",
            r.\"temperatura saida\",
            r.quantidade,
            r.\"peso liquido total\",
            r.\"peso bruto total\",
            r.\"valor total\"                
        FROM
            resultante r
        ORDER BY
            1,
            2,
            3
    ';
        --dbms_output.put_line(v_comando_sql);return;
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_titulo_email := v_titulo_email
                                || ' Filial '
                                || p_codfilial
                                || ' '
                                || p_dtini
                                || ' a '
                                || p_dtfim;


            v_corpo_email := '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
                                || v_corpo_email
                                || ' movientacao de saida da Filial '
                                || p_codfilial
                                || ' referente ao periodo de '
                                || p_dtini
                                || ' a '
                                || p_dtfim
                                || '. <br /><br /><br /> Obrigado.';


            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                pr_email_para => v_email_para, 
                pr_email_copias_para => v_email_copias_para, 
                pr_titulo_email => v_titulo_email, 
                pr_corpo_email => v_corpo_email, 
                pr_nome_anexo => v_nome_anexo,
                pr_comando_sql_anexo => v_comando_sql
            );


        END IF;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END enviar_movsaida_email;


    PROCEDURE enviar_estoque_email (
        p_codfilial   NUMBER DEFAULT 1,
        p_data        DATE DEFAULT NULL
    ) AS


        v_email_de            VARCHAR2(4000) DEFAULT 'dba2@jumboalimentos.com.br';
        v_email_para          VARCHAR2(4000) DEFAULT dest_padrao;
        v_email_copias_para   VARCHAR2(4000) DEFAULT dest_copias_padrao;
        --v_email_para          VARCHAR2(4000) DEFAULT 'jumbo.ti@jumboalimentos.com.br';
        --v_email_copias_para   VARCHAR2(4000) DEFAULT '';
        v_titulo_email        VARCHAR2(4000) DEFAULT 'JUMBO - ESTOQUE - FILIAL ';
        v_corpo_email         VARCHAR2(4000) DEFAULT 'Segue em anexo';
        v_nome_anexo          VARCHAR2(4000) DEFAULT 'estoque.csv';
        v_comando_sql         VARCHAR2(32767);
    BEGIN
        v_titulo_email := v_titulo_email || p_codfilial;
        IF ( p_data IS NOT NULL ) THEN
            v_comando_sql := '
            WITH estoque_jumbo AS (
                SELECT
                    e.codfilial,
                    e.codprod,
                    p.descricao,
                    p.unidade,
                    CASE
                        WHEN ( instr(p.descricao, ''MASSA P'') > 0 )
                                OR ( instr(p.descricao, ''CHACARA'') > 0 ) THEN
                            ''ESTIVADA''
                        ELSE
                            ''PALETIZADA''
                    END AS \"tipo de movimentacao\",
                    CASE
                        WHEN ( instr(p.descricao, ''CREME DE LEITE'') > 0 )
                                OR ( instr(p.descricao, ''CREME LEITE'') > 0 )
                                OR ( instr(p.descricao, ''DOCE LEITE'') > 0 )
                                OR ( instr(p.descricao, ''DOCE DE LEITE'') > 0 )
                                OR ( instr(p.descricao, ''LEITE COND'') > 0 )
                                OR ( instr(p.descricao, ''OLEO'') > 0 )
                                OR ( instr(p.descricao, ''GORDURA'') > 0 )
                                OR ( instr(p.descricao, ''LEITE EM P'') > 0 )
                                OR ( instr(p.descricao, ''PALMITO'') > 0 )
                                OR ( instr(p.descricao, ''ACHOCOLAT'') > 0 ) THEN
                            '
                                || tempamb
                                || '
                        ELSE
                            case
                                when nvl(p.rua,1) = 1 then
                                    '
                                || tempcam1
                                || '
                                when nvl(p.rua,1) = 2 then
                                    '
                                || tempcam2
                                || '
                                else
                                    99
                            end
                    END AS \"temperatura padrao\",
                    nvl(h.qtestger,e.qtestger) AS \"QTDE ESTOQUE JUMBO\"
                FROM
                    jumbo.pcest      e
                    JOIN jumbo.pcprodut   p ON ( p.codprod = e.codprod )
                    JOIN jumbo.pcfornec   f ON ( f.codfornec = p.codfornec )
                    left outer join jumbo.pchistest h on (h.codfilial = e.codfilial and h.codprod = e.codprod and trunc(data) = to_date('''
                                || to_char(p_data,'dd/mm/yyyy')
                                || ''',''dd/mm/yyyy'') - 1)
                WHERE
                    p.dtexclusao IS NULL
                    AND p.obs2 <> ''FL''
                    AND p.codepto <> 52 
                    and e.codfilial = '
                                || p_codfilial
                                || '
                ORDER BY
                    e.codfilial,
                    e.codprod
            ), estoque_aurora AS (
                SELECT
                    nvl(e.codfilial_erp,e.codfilialorigem) as codfilial,
                    nvl(e.codprod_erp,e.codprodorigem) as codprod,
                    nvl(p.descricao,pa.descricao) as descricao,
                    nvl(p.unidade,uo.unidade) as unidade,
                    CASE
                        WHEN ( instr(nvl(p.descricao,pa.descricao), ''MASSA P'') > 0 )
                                OR ( instr(nvl(p.descricao,pa.descricao), ''CHACARA'') > 0 ) THEN
                            ''ESTIVADA''
                        ELSE
                            ''PALETIZADA''
                    END AS \"tipo de movimentacao\",
                    CASE
                        WHEN ( instr(nvl(p.descricao, pa.descricao), ''CREME DE LEITE'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''CREME LEITE'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''DOCE LEITE'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''DOCE DE LEITE'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''LEITE COND'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''OLEO'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''GORDURA'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''LEITE EM P'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''PALMITO'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''ACHOCOLAT'') > 0 ) THEN
                            '
                                || tempamb
                                || '
                        ELSE
                            case
                                when nvl(p.rua,1) = 1 then
                                    '
                                || tempcam1
                                || '
                                when nvl(p.rua,1) = 2 then
                                    '
                                || tempcam2
                                || '
                                else
                                    99
                            end                                    
                    END AS \"temperatura padrao\",
                    nvl(h.qt,e.qtfisicodisponivel) AS \"QTDE ESTOQUE AURORA\"
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem   e
                    left outer join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__produto_origem pa on (pa.codprod_na_origem = e.codprodorigem and nvl(pa.codorigemdado,e.codorigemdado) = e.codorigemdado)
                    LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__unidades_origem     uo on (uo.codunidade = pa.codunidadeorigem and nvl(uo.codorigemdado,pa.codorigemdado) = pa.codorigemdado)
                    left outer join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__histest_diario_origem h on (
                        (
                            h.coditemestorigem = e.coditemest
                            or h.codprod = nvl(e.codprodorigem,e.codprod_erp)
                        )
                        and nvl(h.codorigemdado,e.codorigemdado) = e.codorigemdado
                        and h.codfilial = nvl(e.codfilialorigem,e.codfilial_erp)
                        and trunc(h.data) = to_date('''|| to_char(p_data,'dd/mm/yyyy')|| ''',''dd/mm/yyyy'') - 1
                    )
                    LEFT OUTER JOIN jumbo.pcprodut   p ON ( p.codprod = pa.codprod_erp )
                    
                WHERE
                    p.dtexclusao IS NULL
                    AND p.obs2 <> ''FL''
                    AND p.codepto <> 52 
                    and nvl(e.codfilial_erp,e.codfilialorigem) = '|| p_codfilial|| '
                ORDER BY
                    nvl(e.codfilial_erp,e.codfilialorigem),
                    nvl(e.codprod_erp,e.codprodorigem)
            ), estoques AS (
                SELECT
                    estoque_jumbo.*,
                    nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) AS \"QTDE ESTOQUE AURORA\",
                    nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0) AS \"QTDE TOTAL\",
                    (nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0)) * nvl(p.pesoliq,1) as \"PESO LIQUIDO TOTAL\",
                    (nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0)) * nvl(p.pesobruto,1) as \"PESO BRUTO TOTAL\",
                    (nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0)) * nvl(greatest(nvl(e.vlultpcompra, 0), nvl(e.custorep, 0), nvl(e.valorultent, 0), nvl(e.custoultent, 0), nvl(e.custoreal, 0)), 0) as \"VALOR TOTAL\"
                FROM
                    estoque_jumbo
                    LEFT OUTER JOIN estoque_aurora ON ( estoque_jumbo.codfilial = estoque_aurora.codfilial
                                                        AND estoque_jumbo.codprod = estoque_aurora.codprod )
                    LEFT OUTER JOIN jumbo.pcprodut p on (p.codprod = estoque_jumbo.codprod)
                    LEFT OUTER JOIN jumbo.pcest e on (e.codfilial = estoque_jumbo.codfilial and e.codprod = estoque_jumbo.codprod)
                WHERE
                    estoque_jumbo.\"QTDE ESTOQUE JUMBO\" > 0
                    OR nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) > 0
                UNION ALL
                SELECT
                    nvl(estoque_jumbo.codfilial, estoque_aurora.codfilial) AS codfilial,
                    nvl(estoque_jumbo.codprod, estoque_aurora.codprod) AS codprod,
                    nvl(estoque_jumbo.descricao, p.descricao) AS descricao,
                    nvl(estoque_jumbo.unidade, p.unidade) AS unidade,
                    nvl(estoque_jumbo.\"tipo de movimentacao\", estoque_aurora.\"tipo de movimentacao\") AS \"tipo de movimentacao\",
                    nvl(estoque_jumbo.\"temperatura padrao\", estoque_aurora.\"temperatura padrao\") AS \"temperatura padrao\",
                    nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0) AS \"QTDE ESTOQUE JUMBO\",
                    nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) AS \"QTDE ESTOQUE AURORA\",
                    nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0) AS \"QTDE TOTAL\",
                    (nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0)) * nvl(p.pesoliq,1) as \"PESO LIQUIDO TOTAL\",
                    (nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0)) * nvl(p.pesobruto,1) as \"PESO BRUTO TOTAL\",
                    (nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0)) * nvl(greatest(nvl(e.vlultpcompra, 0), nvl(e.custorep, 0), nvl(e.valorultent, 0), nvl(e.custoultent, 0), nvl(e.custoreal, 0)), 0) as \"VALOR TOTAL\"
                FROM
                    estoque_aurora
                    LEFT OUTER JOIN estoque_jumbo ON ( estoque_jumbo.codfilial = estoque_aurora.codfilial
                                                        AND estoque_jumbo.codprod = estoque_aurora.codprod )
                    LEFT OUTER JOIN jumbo.pcprodut p ON ( p.codprod = estoque_aurora.codprod )
                    LEFT OUTER JOIN jumbo.pcest e ON (e.codfilial = estoque_aurora.codfilial and e.codprod = estoque_aurora.codprod )
                WHERE
                    NOT EXISTS (
                        SELECT
                            1
                        FROM
                            estoque_jumbo ej
                        WHERE
                            ej.codfilial = estoque_aurora.codfilial
                            AND ej.codprod = estoque_aurora.codprod
                    )
                        AND ( nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0) > 0
                                OR nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) > 0 )
            )
            SELECT
                estoques.codfilial,
                estoques.codprod,
                '''
                                || to_char(p_data,'dd/mm/yyyy')
                                || ''' as data,
                estoques.descricao,
                estoques.unidade,
                estoques.\"tipo de movimentacao\",
                estoques.\"temperatura padrao\",
                estoques.\"QTDE ESTOQUE JUMBO\",
                estoques.\"QTDE ESTOQUE AURORA\",
                estoques.\"QTDE TOTAL\",
                estoques.\"PESO LIQUIDO TOTAL\",
                estoques.\"PESO BRUTO TOTAL\",
                estoques.\"VALOR TOTAL\"
            FROM
                estoques
            order by
                estoques.codfilial,
                estoques.codprod
        ';


            v_titulo_email := v_titulo_email
                                || '-'
                                || to_char(p_data,'dd/mm/yyyy');
        ELSE
            v_comando_sql := '
            WITH estoque_jumbo AS (
                SELECT
                    e.codfilial,
                    e.codprod,
                    p.descricao,
                    p.unidade,
                    CASE
                        WHEN ( instr(p.descricao, ''MASSA P'') > 0 )
                                OR ( instr(p.descricao, ''CHACARA'') > 0 ) THEN
                            ''ESTIVADA''
                        ELSE
                            ''PALETIZADA''
                    END AS \"tipo de movimentacao\",
                    CASE
                        WHEN ( instr(p.descricao, ''CREME DE LEITE'') > 0 )
                                OR ( instr(p.descricao, ''CREME LEITE'') > 0 )
                                OR ( instr(p.descricao, ''DOCE LEITE'') > 0 )
                                OR ( instr(p.descricao, ''DOCE DE LEITE'') > 0 )
                                OR ( instr(p.descricao, ''LEITE COND'') > 0 )
                                OR ( instr(p.descricao, ''OLEO'') > 0 )
                                OR ( instr(p.descricao, ''GORDURA'') > 0 )
                                OR ( instr(p.descricao, ''LEITE EM P'') > 0 )
                                OR ( instr(p.descricao, ''PALMITO'') > 0 )
                                OR ( instr(p.descricao, ''ACHOCOLAT'') > 0 ) THEN
                            '
                                || tempamb
                                || '
                        ELSE
                            case
                                when nvl(p.rua,1) = 1 then
                                    '
                                || tempcam1
                                || '
                                when nvl(p.rua,1) = 2 then
                                    '
                                || tempcam2
                                || '
                                else
                                    99
                            end
                    END AS \"temperatura padrao\",
                    e.qtestger AS \"QTDE ESTOQUE JUMBO\"
                FROM
                    jumbo.pcest      e
                    JOIN jumbo.pcprodut   p ON ( p.codprod = e.codprod )
                    JOIN jumbo.pcfornec   f ON ( f.codfornec = p.codfornec )
                WHERE
                    p.dtexclusao IS NULL
                    AND p.obs2 <> ''FL''
                    AND p.codepto <> 52 
                    and e.codfilial = '
                                || p_codfilial
                                || '
                ORDER BY
                    e.codfilial,
                    e.codprod
            ), estoque_aurora AS (
                SELECT
                    nvl(e.codfilial_erp,e.codfilialorigem) as codfilial,
                    nvl(e.codprod_erp,e.codprodorigem) as codprod,
                    nvl(p.descricao,pa.descricao) as descricao,
                    nvl(p.unidade,uo.unidade) as unidade,
                    CASE
                        WHEN ( instr(nvl(p.descricao,pa.descricao), ''MASSA P'') > 0 )
                                OR ( instr(nvl(p.descricao,pa.descricao), ''CHACARA'') > 0 ) THEN
                            ''ESTIVADA''
                        ELSE
                            ''PALETIZADA''
                    END AS \"tipo de movimentacao\",
                    CASE
                        WHEN ( instr(nvl(p.descricao, pa.descricao), ''CREME DE LEITE'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''CREME LEITE'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''DOCE LEITE'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''DOCE DE LEITE'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''LEITE COND'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''OLEO'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''GORDURA'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''LEITE EM P'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''PALMITO'') > 0 )
                                OR ( instr(nvl(p.descricao, pa.descricao), ''ACHOCOLAT'') > 0 ) THEN
                            '
                                || tempamb
                                || '
                        ELSE
                            case
                                when nvl(p.rua,1) = 1 then
                                    '
                                || tempcam1
                                || '
                                when nvl(p.rua,1) = 2 then
                                    '
                                || tempcam2
                                || '
                                else
                                    99
                            end                                    
                    END AS \"temperatura padrao\",
                    e.qtfisicodisponivel AS \"QTDE ESTOQUE AURORA\"
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__estoque_origem   e
                    left outer join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__produto_origem pa on (pa.codprod_na_origem = e.codprodorigem and nvl(pa.codorigemdado,e.codorigemdado) = e.codorigemdado)
                    LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__unidades_origem     uo on (uo.codunidade = pa.codunidadeorigem and nvl(uo.codorigemdado,pa.codorigemdado) = pa.codorigemdado)
                    LEFT OUTER JOIN jumbo.pcprodut   p ON ( p.codprod = nvl(e.codprod_erp,pa.codprod_erp ))
                    
                WHERE
                    p.dtexclusao IS NULL
                    AND p.obs2 <> ''FL''
                    AND p.codepto <> 52 
                    and nvl(e.codfilial_erp,e.codfilialorigem) = '|| p_codfilial|| '
                ORDER BY
                    nvl(e.codfilial_erp,e.codfilialorigem),
                    nvl(e.codprod_erp,e.codprodorigem)
            ), estoques AS (
                SELECT
                    estoque_jumbo.*,
                    nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) AS \"QTDE ESTOQUE AURORA\",
                    nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0) AS \"QTDE TOTAL\",
                    (nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0)) * nvl(p.pesoliq,1) as \"PESO LIQUIDO TOTAL\",
                    (nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0)) * nvl(p.pesobruto,1) as \"PESO BRUTO TOTAL\",
                    (nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0)) * nvl(greatest(nvl(e.vlultpcompra, 0), nvl(e.custorep, 0), nvl(e.valorultent, 0), nvl(e.custoultent, 0), nvl(e.custoreal, 0)), 0) as \"VALOR TOTAL\"
                FROM
                    estoque_jumbo
                    LEFT OUTER JOIN estoque_aurora ON ( estoque_jumbo.codfilial = estoque_aurora.codfilial
                                                        AND estoque_jumbo.codprod = estoque_aurora.codprod )
                    LEFT OUTER JOIN jumbo.pcprodut p on (p.codprod = estoque_jumbo.codprod)
                    LEFT OUTER JOIN jumbo.pcest e on (e.codfilial = estoque_jumbo.codfilial and e.codprod = estoque_jumbo.codprod)
                WHERE
                    estoque_jumbo.\"QTDE ESTOQUE JUMBO\" > 0
                    OR nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) > 0
                UNION ALL
                SELECT
                    nvl(estoque_jumbo.codfilial, estoque_aurora.codfilial) AS codfilial,
                    nvl(estoque_jumbo.codprod, estoque_aurora.codprod) AS codprod,
                    nvl(estoque_jumbo.descricao, p.descricao) AS descricao,
                    nvl(estoque_jumbo.unidade, p.unidade) AS unidade,
                    nvl(estoque_jumbo.\"tipo de movimentacao\", estoque_aurora.\"tipo de movimentacao\") AS \"tipo de movimentacao\",
                    nvl(estoque_jumbo.\"temperatura padrao\", estoque_aurora.\"temperatura padrao\") AS \"temperatura padrao\",
                    nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0) AS \"QTDE ESTOQUE JUMBO\",
                    nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) AS \"QTDE ESTOQUE AURORA\",
                    nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0) AS \"QTDE TOTAL\",
                    (nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0)) * nvl(p.pesoliq,1) as \"PESO LIQUIDO TOTAL\",
                    (nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0)) * nvl(p.pesobruto,1) as \"PESO BRUTO TOTAL\",
                    (nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) + nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0)) * nvl(greatest(nvl(e.vlultpcompra, 0), nvl(e.custorep, 0), nvl(e.valorultent, 0), nvl(e.custoultent, 0), nvl(e.custoreal, 0)), 0) as \"VALOR TOTAL\"
                FROM
                    estoque_aurora
                    LEFT OUTER JOIN estoque_jumbo ON ( estoque_jumbo.codfilial = estoque_aurora.codfilial
                                                        AND estoque_jumbo.codprod = estoque_aurora.codprod )
                    LEFT OUTER JOIN jumbo.pcprodut p ON ( p.codprod = estoque_aurora.codprod )
                    LEFT OUTER JOIN jumbo.pcest e ON (e.codfilial = estoque_aurora.codfilial and e.codprod = estoque_aurora.codprod )
                WHERE
                    NOT EXISTS (
                        SELECT
                            1
                        FROM
                            estoque_jumbo ej
                        WHERE
                            ej.codfilial = estoque_aurora.codfilial
                            AND ej.codprod = estoque_aurora.codprod
                    )
                        AND ( nvl(estoque_jumbo.\"QTDE ESTOQUE JUMBO\", 0) > 0
                                OR nvl(estoque_aurora.\"QTDE ESTOQUE AURORA\", 0) > 0 )
            )
            SELECT
                estoques.codfilial,
                estoques.codprod,
                trunc(sysdate) as data,
                estoques.descricao,
                estoques.unidade,
                estoques.\"tipo de movimentacao\",
                estoques.\"temperatura padrao\",
                estoques.\"QTDE ESTOQUE JUMBO\",
                estoques.\"QTDE ESTOQUE AURORA\",
                estoques.\"QTDE TOTAL\",
                estoques.\"PESO LIQUIDO TOTAL\",
                estoques.\"PESO BRUTO TOTAL\",
                estoques.\"VALOR TOTAL\"
            FROM
                estoques
            order by
                estoques.codfilial,
                estoques.codprod
        ';
        END IF;
        

        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            --dbms_output.put_line(v_comando_sql);return;
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                pr_email_para => v_email_para, 
                pr_email_copias_para => v_email_copias_para,
                pr_titulo_email => v_titulo_email,
                pr_corpo_email => v_corpo_email, 
                pr_nome_anexo => v_nome_anexo,
                pr_comando_sql_anexo => v_comando_sql
            );
        END IF;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END enviar_estoque_email;


    PROCEDURE enviar_estoque_email_aut AS
    BEGIN
        enviar_estoque_email(1, NULL);
    END;


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_gelosia;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkgexpalg":{
		"nomepackagesqldb":"__CHAVE__",
		"nomepackagesqlsistema":"__CHAVE__",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkgexpalg AS
    FUNCTION resolver_expressao_algebrica (
        vp_expressao   VARCHAR2,
        vp_variaveis   VARCHAR2
    ) RETURN VARCHAR2;


END __FNV_GET_PREFIXOBJECTSDB__pkgexpalg;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkgexpalg AS


    TYPE texp IS RECORD (
        expressao                      VARCHAR2(4000) DEFAULT NULL,
        nome                           VARCHAR2(4000) DEFAULT NULL,
        nomeexp                        VARCHAR2(4000) DEFAULT NULL,
        nomeref                        VARCHAR2(4000) DEFAULT NULL,
        tipo                           VARCHAR2(100) DEFAULT NULL,
        valor                          VARCHAR2(4000) DEFAULT NULL,
        valornum                       NUMBER default NULL,
        sinal                          VARCHAR2(1) DEFAULT '+',
        multiplicador                  NUMBER default NULL,
        analisada                      BOOLEAN DEFAULT false,
        tem_variavel_nao_resolvida     BOOLEAN DEFAULT false,
        tem_expressao_nao_resolvida    BOOLEAN DEFAULT false,
        tem_variavel_nao_localizada    BOOLEAN DEFAULT false,
        tem_expressao_nao_localizada   BOOLEAN DEFAULT false,
        resolvida                      BOOLEAN DEFAULT false,
        aplicada_exp                   BOOLEAN DEFAULT false
    );
    TYPE tcnjexp IS
        TABLE OF texp INDEX BY VARCHAR2(100);
    v_abre_exp        VARCHAR(1) DEFAULT '(';
    v_fecha_exp       VARCHAR(1) DEFAULT ')';
    v_pos_abre_exp    NUMBER DEFAULT 0;
    v_pos_fecha_exp   NUMBER DEFAULT 0;
    v_cont_exp        NUMBER DEFAULT 0;
    e_sem_separador EXCEPTION;
    e_expr_tamanho_0 EXCEPTION;
    e_abertura_fechamento_exp EXCEPTION;
    cnjexpressoesl1   tcnjexp;
    cnjexpressoesl2   tcnjexp;
    cnjvariaveis      tcnjexp;
    cnjvarsexp        tcnjexp;


    FUNCTION eliminar_caracteres_iniciais (
        str              VARCHAR2,
        cnjcaract_elim   VARCHAR2
    ) RETURN VARCHAR2 AS
        retorno VARCHAR2(4000);
    BEGIN
        retorno := str;
        WHILE ( instr(cnjcaract_elim, substr(retorno, 1, 1)) > 0 ) LOOP retorno := substr(retorno, 2);
        END LOOP;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END eliminar_caracteres_iniciais;


    FUNCTION eliminar_caracteres_finais (
        str              VARCHAR2,
        cnjcaract_elim   VARCHAR2
    ) RETURN VARCHAR2 AS
        retorno VARCHAR2(4000);
    BEGIN
        retorno := str;
        WHILE ( instr(cnjcaract_elim, substr(retorno, length(retorno), 1)) > 0 ) LOOP retorno := substr(retorno, 1, length(retorno
        ) - 1);
        END LOOP;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END eliminar_caracteres_finais;


    FUNCTION limpar_caract_esq_dir (
        str              VARCHAR2,
        cnjcaract_elim   VARCHAR2
    ) RETURN VARCHAR2 AS
        retorno VARCHAR2(4000);
    BEGIN
        retorno := str;
        retorno := eliminar_caracteres_iniciais(retorno, cnjcaract_elim);
        retorno := eliminar_caracteres_finais(retorno, cnjcaract_elim);
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END limpar_caract_esq_dir;


    PROCEDURE inicializar_variaveis (
        vp_vars        VARCHAR2,
        cnjvariaveis   IN OUT tcnjexp
    ) AS


        v_vars          VARCHAR2(4000);
        v_pos_sep_var   NUMBER DEFAULT 0;
        v_sep_var       VARCHAR2(1) DEFAULT ';';
        v_var_temp      texp;
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica', p_owner => '__FNV_GET_NOMESCHEMA__') ) AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.
        objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_vars := trim(vp_vars);
            v_pos_sep_var := instr(v_vars, v_sep_var);
            cnjvariaveis.DELETE();
            WHILE ( v_pos_sep_var > 0 ) LOOP
                v_var_temp := NULL;
                v_var_temp.expressao := substr(v_vars, 1, v_pos_sep_var - 1);
                v_var_temp.nome := substr(v_var_temp.expressao, 1, instr(v_var_temp.expressao, '=') - 1);


                v_var_temp.nomeexp := v_var_temp.nome;
                v_var_temp.valor := substr(v_var_temp.expressao, instr(v_var_temp.expressao, '=') + 1);


                IF ( __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica.eh_numero(v_var_temp.valor) = true ) THEN
                    v_var_temp.valornum := to_number(v_var_temp.valor);
                    v_var_temp.tipo := 'number';
                    v_var_temp.resolvida := true;
                ELSE
                    v_var_temp.valornum := NULL;
                    v_var_temp.tipo := 'varchar2';
                    v_var_temp.resolvida := false;
                END IF;


                v_vars := substr(v_vars, v_pos_sep_var + 1);
                v_pos_sep_var := instr(v_vars, v_sep_var);
                cnjvariaveis(v_var_temp.nome) := v_var_temp;
            END LOOP;


            IF ( length(v_vars) > 0 ) THEN
                v_var_temp := NULL;
                v_var_temp.expressao := v_vars;
                v_var_temp.nome := substr(v_var_temp.expressao, 1, instr(v_var_temp.expressao, '=') - 1);


                v_var_temp.nomeexp := v_var_temp.nome;
                v_var_temp.valor := substr(v_var_temp.expressao, instr(v_var_temp.expressao, '=') + 1);


                IF ( __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica.eh_numero(v_var_temp.valor) = true ) THEN
                    v_var_temp.valornum := to_number(v_var_temp.valor);
                    v_var_temp.tipo := 'number';
                    v_var_temp.resolvida := true;
                ELSE
                    v_var_temp.valornum := NULL;
                    v_var_temp.tipo := 'varchar2';
                    v_var_temp.resolvida := false;
                END IF;


                cnjvariaveis(v_var_temp.nome) := v_var_temp;
            END IF;


        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END inicializar_variaveis;


    PROCEDURE mostrar_expressao (
        exp texp
    ) AS
    BEGIN
        NULL;
    END mostrar_expressao;


    PROCEDURE mostrar_expressoes (
        cnjexp tcnjexp
    ) AS
        ind_temp     NUMBER DEFAULT 1;
        v_nome_exp   VARCHAR2(4000) DEFAULT NULL;
        v_exp_temp   texp;
    BEGIN
        v_nome_exp := cnjexp.first;
        WHILE ( v_nome_exp IS NOT NULL ) LOOP
            v_exp_temp := cnjexp(v_nome_exp);
            mostrar_expressao(v_exp_temp);
            v_nome_exp := cnjexp.next(v_nome_exp);
        END LOOP;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END mostrar_expressoes;


    FUNCTION pos_proximo_operador (
        vp_exp         VARCHAR2,
        vp_posini      NUMBER DEFAULT 1,
        vp_operandos   VARCHAR2 DEFAULT NULL
    ) RETURN NUMBER AS


        p             __FNV_GET_NOMESCHEMA__.tcnjnum;
        v_operandos   __FNV_GET_NOMESCHEMA__.tcnjstr;
        ind           NUMBER;
        cont          NUMBER;
        menor         NUMBER DEFAULT 0;
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array', p_owner => '__FNV_GET_NOMESCHEMA__') ) AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido
        (p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            IF ( vp_operandos IS NULL ) THEN
                v_operandos := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_array_str('*,/,+,-', ',');
            ELSE
                v_operandos := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_array_str(vp_operandos, ',');
            END IF;


            ind := 0;
            cont := v_operandos.count;
            p := tcnjnum();
            FOR ind IN 1..cont LOOP
                p.extend(1);
                p(ind) := instr(vp_exp, v_operandos(ind), vp_posini);
            END LOOP;


            IF ( vp_posini > 0 ) THEN
                menor := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica.menor(p, true);
            ELSE
                menor := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica.maior(p);
            END IF;


        END IF;


        RETURN menor;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END pos_proximo_operador;


    FUNCTION pos_proximo_operando (
        str    VARCHAR2,
        pini   NUMBER DEFAULT NULL
    ) RETURN NUMBER AS
        retorno     NUMBER DEFAULT 0;
        caractere   VARCHAR2(1) DEFAULT ' ';
        cont        NUMBER DEFAULT 0;
    BEGIN
        retorno := 0;
        cont := 0;
        IF ( length(str) > 0 ) THEN
            cont := nvl(pini, 1);
            caractere := substr(str, cont, 1);
            WHILE ( instr('*/+-()=', caractere) > 0 ) LOOP
                cont := cont + 1;
                caractere := substr(str, cont, 1);
            END LOOP;


            IF ( cont > length(str) ) THEN
                cont := 0;
            END IF;
        END IF;


        retorno := cont;
    /*IF ( length(str) > 0 ) THEN
        caractere := substr(str, nvl(pini, 1), 1);
        pos_nao_var := instr('*//*+-()=', caractere);
        IF ( pos_nao_var = 0 ) THEN
            retorno := 1;
        ELSE
            WHILE ( pos_nao_var > 0 ) LOOP
                teve_caractere_nao_var := true;
                caractere := substr(str, nvl(pini, 1) + retorno, 1);
                pos_nao_var := instr('*//*+-()=', caractere);
                retorno := retorno + 1;
            END LOOP;
            retorno := retorno + nvl(pini, 0);
            IF ( teve_caractere_nao_var = true ) THEN
                retorno := retorno - 1;
            END IF;
        END IF;
    END IF;*/
        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END pos_proximo_operando;


    PROCEDURE identificar_variaveis (
        expressao      IN OUT  VARCHAR2,
        cnjvarsexp     IN OUT  tcnjexp,
        cnjvariaveis   tcnjexp
    ) AS


        expressao_identificar   VARCHAR2(4000);
        v_comp_exp              NUMBER DEFAULT 0;
        v_exp_temp              texp;
        v_exp_ref_temp          texp;
        v_pos_ini_var           NUMBER DEFAULT 0;
        v_pos_prox_op           NUMBER DEFAULT 0;
        v_cont_var              NUMBER DEFAULT 0;
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica', p_owner => '__FNV_GET_NOMESCHEMA__') ) AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.
        objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            expressao_identificar := trim(expressao);
            v_pos_ini_var := pos_proximo_operando(expressao, 1);
            WHILE ( nvl(v_pos_ini_var, 0) > 0 AND v_pos_ini_var <> v_pos_prox_op ) LOOP
                v_comp_exp := length(expressao);
                v_pos_prox_op := pos_proximo_operador(expressao, v_pos_ini_var, '*,/,+,-,(,),=');
                IF ( v_pos_prox_op = 0 ) THEN
                    v_pos_prox_op := length(expressao) + 1;
                END IF;


                v_exp_temp := NULL;
                v_exp_temp.nome := '_v'
                                    || v_cont_var
                                    || '_';
                v_exp_temp.nomeexp := v_exp_temp.nome;
                v_exp_temp.expressao := substr(expressao, v_pos_ini_var, v_pos_prox_op - v_pos_ini_var);
                v_exp_temp.valor := v_exp_temp.expressao;
                v_exp_temp.tipo := 'varchar2';
                IF ( __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica.eh_numero(v_exp_temp.expressao) ) THEN
                    v_exp_temp.valornum := to_number(v_exp_temp.expressao);
                    v_exp_temp.tipo := 'number';
                    v_exp_temp.resolvida := true;
                ELSE
                    IF ( cnjvariaveis.EXISTS(v_exp_temp.expressao) ) THEN
                        v_exp_ref_temp := cnjvariaveis(v_exp_temp.expressao);
                        v_exp_temp.tipo := v_exp_ref_temp.tipo;
                        v_exp_temp.resolvida := v_exp_ref_temp.resolvida;
                        v_exp_temp.valornum := v_exp_ref_temp.valornum;
                    END IF;
                END IF;


                IF ( v_pos_ini_var = 1 ) THEN
                    expressao := v_exp_temp.nomeexp
                                    || substr(expressao, v_pos_prox_op);
                ELSE
                    expressao := substr(expressao, 1, v_pos_ini_var - 1)
                                    || v_exp_temp.nomeexp
                                    || substr(expressao, v_pos_prox_op);
                END IF;


                IF ( length(v_exp_temp.nomeexp) > length(v_exp_temp.expressao) ) THEN
                    v_pos_prox_op := v_pos_prox_op + ( length(v_exp_temp.nomeexp) - length(v_exp_temp.expressao) );
                ELSE
                    IF ( length(v_exp_temp.expressao) > length(v_exp_temp.nomeexp) ) THEN
                        v_pos_prox_op := v_pos_prox_op - ( length(v_exp_temp.expressao) - length(v_exp_temp.nomeexp) );


                    END IF;
                END IF;


                cnjvarsexp(v_exp_temp.nome) := v_exp_temp;
                v_pos_ini_var := pos_proximo_operando(expressao, v_pos_prox_op);
                v_cont_var := v_cont_var + 1;
            END LOOP;


        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END identificar_variaveis;


    PROCEDURE identificar_expressoes (
        expressao       VARCHAR2,
        cnjexpressoes   IN OUT tcnjexp
    ) AS
        expressao_identificar   VARCHAR2(4000);
        v_comp_exp              NUMBER DEFAULT 0;
        v_exp_temp              texp;
    BEGIN
        expressao_identificar := trim(expressao);
        v_pos_fecha_exp := instr(expressao_identificar, v_fecha_exp);
        WHILE ( v_pos_fecha_exp > 0 ) LOOP
            v_comp_exp := length(expressao_identificar);
            v_pos_abre_exp := instr(expressao_identificar, v_abre_exp, v_pos_fecha_exp - v_comp_exp - 1);
            IF ( v_pos_abre_exp <> 0 ) THEN
                v_exp_temp := NULL;
                v_exp_temp.nome := '_e'
                                    || v_cont_exp
                                    || '_';
                v_exp_temp.nomeexp := v_exp_temp.nome;
                v_exp_temp.expressao := substr(expressao_identificar, v_pos_abre_exp + 1, v_pos_fecha_exp - v_pos_abre_exp - 1);


                v_exp_temp.valor := v_exp_temp.expressao;
                v_exp_temp.tipo := 'varchar2';
                expressao_identificar := substr(expressao_identificar, 1, v_pos_abre_exp - 1)
                                            || v_exp_temp.nome
                                            || substr(expressao_identificar, v_pos_fecha_exp + 1);


                cnjexpressoes(v_exp_temp.nome) := v_exp_temp;
            ELSE
                RAISE e_abertura_fechamento_exp;
            END IF;


            v_pos_fecha_exp := instr(expressao_identificar, v_fecha_exp);
            v_cont_exp := v_cont_exp + 1;
        END LOOP;


        IF ( length(expressao_identificar) > 0 ) THEN
            v_exp_temp := NULL;
            v_exp_temp.nome := '_e'
                                || v_cont_exp
                                || '_';
            v_exp_temp.nomeexp := v_exp_temp.nome;
            v_exp_temp.expressao := expressao_identificar;
            v_exp_temp.valor := v_exp_temp.expressao;
            v_exp_temp.tipo := 'varchar2';
            cnjexpressoes(v_exp_temp.nome) := v_exp_temp;
        END IF;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END identificar_expressoes;


    FUNCTION obter_nomes_elementos_exp (
        str_obter VARCHAR2
    ) RETURN __FNV_GET_NOMESCHEMA__.tcnjstr AS


        retorno          __FNV_GET_NOMESCHEMA__.tcnjstr := __FNV_GET_NOMESCHEMA__.tcnjstr();
        v_str            VARCHAR2(4000);
        v_pos_prox_op    NUMBER DEFAULT 0;
        v_pos_prox_var   NUMBER DEFAULT 0;
        v_pos_op         NUMBER DEFAULT 0;
    BEGIN
        v_str := str_obter;
        v_pos_prox_var := pos_proximo_operando(v_str);
        WHILE ( v_pos_prox_var > 0 ) LOOP
            v_pos_prox_op := pos_proximo_operador(v_str, v_pos_prox_var + 1, '*,/,+,-,(,),=');
            IF ( v_pos_prox_op > 0 ) THEN
                retorno.extend(1);
                retorno(retorno.count) := substr(v_str, v_pos_prox_var, v_pos_prox_op - v_pos_prox_var);


                v_str := substr(v_str, v_pos_prox_op + 1);
            ELSE
                retorno.extend(1);
                retorno(retorno.count) := v_str;
                v_str := NULL;
            END IF;


            v_pos_prox_var := pos_proximo_operando(v_str);
        END LOOP;


        IF ( length(v_str) > 0 ) THEN
            retorno.extend(1);
            retorno(retorno.count) := v_str;
            v_str := NULL;
        END IF;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END obter_nomes_elementos_exp;


    FUNCTION obter_op (
        str_obter VARCHAR2
    ) RETURN VARCHAR2 AS
        retorno    VARCHAR2(1);
        v_pos_op   NUMBER DEFAULT 0;
    BEGIN
        retorno := '';
        v_pos_op := pos_proximo_operador(str_obter);
        IF ( v_pos_op > 0 ) THEN
            retorno := substr(str_obter, v_pos_op, 1);
        END IF;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END obter_op;


    FUNCTION obter_str_calc_op (
        str_obter   VARCHAR2,
        pos_op      NUMBER
    ) RETURN VARCHAR2 AS
        retorno         VARCHAR2(4000);
        v_pos_prox_op   NUMBER DEFAULT 0;
        v_pos_op_ant    NUMBER DEFAULT 0;
    BEGIN
        v_pos_op_ant := pos_proximo_operador(str_obter, pos_op - length(str_obter) - 2);
        v_pos_prox_op := pos_proximo_operador(str_obter, pos_op + 1);
        IF ( v_pos_op_ant = 0 ) THEN
            IF ( v_pos_prox_op = 0 ) THEN
                retorno := str_obter;
            ELSE
                retorno := substr(str_obter, 1, v_pos_prox_op - 1);
            END IF;
        ELSE
            IF ( v_pos_prox_op = 0 ) THEN
                retorno := substr(str_obter, v_pos_op_ant + 1);
            ELSE
                retorno := substr(str_obter, v_pos_op_ant + 1, v_pos_prox_op -(v_pos_op_ant + 1));
            END IF;
        END IF;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END obter_str_calc_op;


    FUNCTION calcular (
        str_calcular VARCHAR2
    ) RETURN VARCHAR2 AS
        retorno VARCHAR2(4000);
    BEGIN
        retorno := NULL;
        BEGIN
            EXECUTE IMMEDIATE 'begin :1 := '
                                || replace(str_calcular, ',', '.')
                                || '; end;'
                USING OUT retorno;


        EXCEPTION
            WHEN OTHERS THEN
                retorno := NULL;
        END;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END calcular;


    PROCEDURE efetuar_calc_cfme_preced (
        exp_calcular    IN OUT  texp,
        cnjexpressoes   IN OUT  tcnjexp,
        cnjvarsexp      IN OUT  tcnjexp,
        cnjvariaveis    IN OUT  tcnjexp
    ) AS


        str_calcular              VARCHAR2(4000);
        str_resultado             VARCHAR2(4000);
        str_op                    VARCHAR2(4000);
        str_op_temp               VARCHAR2(4000);
        v_op                      VARCHAR2(1) DEFAULT NULL;
        v_pos_prox_op             NUMBER DEFAULT 0;
        v_nomes_vars              __FNV_GET_NOMESCHEMA__.tcnjstr;
        v_nomes_el                __FNV_GET_NOMESCHEMA__.tcnjstr;
        ind                       NUMBER DEFAULT 0;
        cont                      NUMBER;
        v_exp_temp                texp;
        v_exp_temp1               texp;
        v_exp_temp2               texp;
        multiplicador_existente   NUMBER DEFAULT 1;
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            str_calcular := exp_calcular.valor;
            mostrar_expressao(exp_calcular);
            str_resultado := calcular(str_calcular);
            IF ( str_resultado IS NOT NULL ) THEN
                str_calcular := str_resultado;
                exp_calcular.valor := str_resultado;
                exp_calcular.valornum := str_resultado;
                exp_calcular.analisada := true;
                exp_calcular.resolvida := true;
            ELSE
                v_pos_prox_op := pos_proximo_operador(str_calcular, 1, '*,/');
                WHILE v_pos_prox_op > 0 LOOP
                    str_op := obter_str_calc_op(str_calcular, v_pos_prox_op);
                    str_resultado := calcular(str_op);
                    IF ( str_resultado IS NOT NULL ) THEN
                        str_calcular := replace(str_calcular, str_op, str_resultado);
                        exp_calcular.valor := str_calcular;
                    ELSE
                        v_nomes_vars := obter_nomes_elementos_exp(str_op);
                        v_op := obter_op(str_op);
                        cont := v_nomes_vars.count;
                        FOR ind IN 1..cont LOOP IF ( cnjvarsexp.EXISTS(v_nomes_vars(ind)) ) THEN
                            v_exp_temp := cnjvarsexp(v_nomes_vars(ind));
                            multiplicador_existente := nvl(v_exp_temp.multiplicador, 1);
                            IF ( ind = 1 ) THEN
                                IF ( v_op = '*' ) THEN
                                    v_exp_temp.multiplicador := multiplicador_existente * to_number(replace(v_nomes_vars(2), '.',
                                    ','));


                                ELSE
                                    v_exp_temp.multiplicador := multiplicador_existente / to_number(replace(v_nomes_vars(2), '.',
                                    ','));
                                END IF;
                            ELSE
                                IF ( v_op = '*' ) THEN
                                    v_exp_temp.multiplicador := multiplicador_existente * to_number(replace(v_nomes_vars(1), '.',
                                    ','));


                                ELSE
                                    v_exp_temp.multiplicador := multiplicador_existente / to_number(replace(v_nomes_vars(1), '.',
                                    ','));
                                END IF;
                            END IF;


                            cnjvarsexp(v_nomes_vars(ind)) := v_exp_temp;
                            IF ( length(str_calcular) = length(str_op) ) THEN
                                str_calcular := v_exp_temp.nomeexp;
                            ELSE
                                IF ( instr(str_calcular, str_op) = 1 ) THEN
                                    str_calcular := v_exp_temp.nomeexp
                                                    || substr(str_calcular, instr(str_calcular, str_op) + length(str_op));


                                ELSE
                                    str_calcular := substr(str_calcular, 1, instr(str_calcular, str_op))
                                                    || v_exp_temp.nomeexp
                                                    || substr(str_calcular, instr(str_calcular, str_op) + length(str_op));
                                END IF;
                            END IF;


                            exp_calcular.valor := str_calcular;
                            IF ( length(str_op) > length(v_exp_temp.nomeexp) ) THEN
                                v_pos_prox_op := v_pos_prox_op - ( length(str_op) - length(v_exp_temp.nomeexp) );
                            ELSE
                                v_pos_prox_op := v_pos_prox_op + ( length(v_exp_temp.nomeexp) - length(str_op) );
                            END IF;


                        ELSE
                            IF ( cnjexpressoes.EXISTS(v_nomes_vars(ind)) ) THEN
                                v_exp_temp := cnjexpressoes(v_nomes_vars(ind));
                                multiplicador_existente := nvl(v_exp_temp.multiplicador, 1);
                                IF ( ind = 1 ) THEN
                                    IF ( v_op = '*' ) THEN
                                        v_exp_temp.multiplicador := multiplicador_existente * to_number(replace(v_nomes_vars(2), '.'
                                        , ','));


                                    ELSE
                                        v_exp_temp.multiplicador := multiplicador_existente / to_number(replace(v_nomes_vars(2), '.'
                                        , ','));
                                    END IF;
                                ELSE
                                    IF ( v_op = '*' ) THEN
                                        v_exp_temp.multiplicador := multiplicador_existente * to_number(replace(v_nomes_vars(1), '.'
                                        , ','));


                                    ELSE
                                        v_exp_temp.multiplicador := multiplicador_existente / to_number(replace(v_nomes_vars(1), '.'
                                        , ','));
                                    END IF;
                                END IF;


                                cnjexpressoes(v_exp_temp.nome) := v_exp_temp;
                                IF ( length(str_calcular) = length(str_op) ) THEN
                                    str_calcular := v_exp_temp.nomeexp;
                                ELSE
                                    IF ( instr(str_calcular, str_op) = 1 ) THEN
                                        str_calcular := v_exp_temp.nomeexp
                                                        || substr(str_calcular, instr(str_calcular, str_op) + length(str_op));


                                    ELSE
                                        str_calcular := substr(str_calcular, 1, instr(str_calcular, str_op))
                                                        || v_exp_temp.nomeexp
                                                        || substr(str_calcular, instr(str_calcular, str_op) + length(str_op));
                                    END IF;
                                END IF;


                                exp_calcular.valor := str_calcular;
                                IF ( length(str_op) > length(v_exp_temp.nomeexp) ) THEN
                                    v_pos_prox_op := v_pos_prox_op - ( length(str_op) - length(v_exp_temp.nomeexp) );
                                ELSE
                                    v_pos_prox_op := v_pos_prox_op + ( length(v_exp_temp.nomeexp) - length(str_op) );
                                END IF;


                            END IF;
                        END IF;
                        END LOOP;


                    END IF;


                    v_pos_prox_op := pos_proximo_operador(str_calcular, v_pos_prox_op + 1, '*,/');
                END LOOP;


                v_pos_prox_op := pos_proximo_operador(str_calcular, 1, '+,-');
                WHILE v_pos_prox_op > 0 LOOP
                    str_op := obter_str_calc_op(str_calcular, v_pos_prox_op);
                    str_resultado := calcular(str_op);
                    IF ( str_resultado IS NOT NULL ) THEN
                        str_calcular := replace(str_calcular, str_op, str_resultado);
                        exp_calcular.valor := str_calcular;
                    ELSE
                        v_nomes_el := obter_nomes_elementos_exp(str_op);
                        IF ( v_nomes_el.count = 2 ) THEN
                            IF ( instr('+-*/()=', substr(v_nomes_el(1), 1, 1)) > 0 ) THEN
                                v_nomes_el(1) := substr(v_nomes_el(1), 2);
                            END IF;


                            IF ( instr('+-*/()=', substr(v_nomes_el(2), 1, 1)) > 0 ) THEN
                                v_nomes_el(2) := substr(v_nomes_el(2), 2);
                            END IF;


                            IF ( cnjvarsexp.EXISTS(v_nomes_el(1)) ) THEN
                                v_exp_temp1 := cnjvarsexp(v_nomes_el(1));
                                IF ( cnjvarsexp.EXISTS(v_nomes_el(2)) ) THEN
                                    v_exp_temp2 := cnjvarsexp(v_nomes_el(2));
                                    IF ( v_exp_temp1.valor = v_exp_temp2.valor ) THEN
                                        str_op_temp := nvl(v_exp_temp1.multiplicador, 1)
                                                        || substr(str_calcular, v_pos_prox_op, 1)
                                                        || nvl(v_exp_temp2.multiplicador, 1);


                                        str_resultado := calcular(str_op_temp);
                                        IF ( str_resultado IS NOT NULL ) THEN
                                            str_calcular := replace(str_calcular, v_nomes_el(2), '');
                                            str_calcular := eliminar_caracteres_finais(str_calcular, '*/+-()=');
                                            exp_calcular.valor := str_calcular;
                                            v_exp_temp1.multiplicador := str_resultado;
                                            cnjvarsexp(v_exp_temp1.nome) := v_exp_temp1;
                                        END IF;


                                    ELSE
                                        NULL;
                                    END IF;


                                ELSE
                                    IF ( v_exp_temp1.valor = v_nomes_el(2) ) THEN
                                        str_op_temp := nvl(v_exp_temp1.multiplicador, 1)
                                                        || substr(str_calcular, v_pos_prox_op, 1)
                                                        || 1;


                                        str_resultado := calcular(str_op_temp);
                                        IF ( str_resultado IS NOT NULL ) THEN
                                            str_calcular := replace(str_calcular, v_nomes_el(2), '');
                                            str_calcular := eliminar_caracteres_finais(str_calcular, '*/+-()=');
                                            exp_calcular.valor := str_calcular;
                                            v_exp_temp1.multiplicador := str_resultado;
                                            cnjvarsexp(v_exp_temp1.nome) := v_exp_temp1;
                                        END IF;


                                    ELSE
                                        NULL;
                                    END IF;
                                END IF;


                            ELSE
                                IF ( cnjvarsexp.EXISTS(v_nomes_el(2)) ) THEN
                                    v_exp_temp2 := cnjvarsexp(v_nomes_el(2));
                                    IF ( v_nomes_el(1) = v_exp_temp2.valor ) THEN
                                        str_op_temp := 1
                                                        || substr(str_calcular, v_pos_prox_op, 1)
                                                        || nvl(v_exp_temp2.multiplicador, 1);


                                        str_resultado := calcular(str_op_temp);
                                        IF ( str_resultado IS NOT NULL ) THEN
                                            str_calcular := replace(str_calcular, v_nomes_el(1), '');
                                            str_calcular := eliminar_caracteres_finais(str_calcular, '*/+-()=');
                                            exp_calcular.valor := str_calcular;
                                            v_exp_temp2.multiplicador := str_resultado;
                                            cnjvarsexp(v_exp_temp2.nome) := v_exp_temp2;
                                        END IF;


                                    ELSE
                                        NULL;
                                    END IF;


                                ELSE
                                    IF ( v_nomes_el(1) = v_nomes_el(2) ) THEN
                                        str_op_temp := 1
                                                        || substr(str_calcular, v_pos_prox_op, 1)
                                                        || 1;
                                        str_resultado := calcular(str_op_temp);
                                        IF ( str_resultado IS NOT NULL ) THEN
                                            str_calcular := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string.substituir(str_calcular, v_nomes_el(1), 1
                                            );


                                            str_calcular := eliminar_caracteres_finais(str_calcular, '*/+-()=');
                                            exp_calcular.valor := str_calcular;
                                        END IF;


                                    ELSE
                                        NULL;
                                    END IF;
                                END IF;
                            END IF;


                        END IF;


                    END IF;


                    v_pos_prox_op := pos_proximo_operador(str_calcular, v_pos_prox_op + 1, '+,-');
                END LOOP;


            END IF;


        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END efetuar_calc_cfme_preced;


    PROCEDURE resolver_expressao (
        exp_resolver           IN OUT  texp,
        cnjexpressoes          IN OUT  tcnjexp,
        cnjvarsexp             IN OUT  tcnjexp,
        cnjvariaveis           IN OUT  tcnjexp,
        considerar_resolvida   BOOLEAN DEFAULT true
    ) AS
    /*v_str               VARCHAR2(4000);
    v_pos_op_ant        NUMBER DEFAULT 0;
    v_pos_op_ant_temp   NUMBER DEFAULT 0;
    v_pos_prox_op       NUMBER DEFAULT 0;
    v_nome_var_temp     VARCHAR2(4000);
    v_var_temp          texp;
    v_var_ref_temp      texp;
    v_exp_temp2         texp;*/
        v_nomes_el      __FNV_GET_NOMESCHEMA__.tcnjstr;
        v_ind_nome_el   NUMBER;
        v_exp_temp      texp;
        str_resultado   VARCHAR2(4000);
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            mostrar_expressao(exp_resolver);
            v_nomes_el := obter_nomes_elementos_exp(exp_resolver.valor);
            v_ind_nome_el := v_nomes_el.first;
            WHILE ( v_ind_nome_el IS NOT NULL AND v_ind_nome_el > 0 ) LOOP
                v_nomes_el(v_ind_nome_el) := limpar_caract_esq_dir(v_nomes_el(v_ind_nome_el), '*/+-()=');
                IF ( cnjvarsexp.EXISTS(v_nomes_el(v_ind_nome_el)) ) THEN
                    v_exp_temp := cnjvarsexp(v_nomes_el(v_ind_nome_el));
                    mostrar_expressao(v_exp_temp);
                    IF ( v_exp_temp.resolvida = true ) THEN
                        exp_resolver.valor := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string.substituir(exp_resolver.valor, v_exp_temp.nome, v_exp_temp
                        .valornum, 1);
                    END IF;


                ELSE
                    IF ( cnjexpressoes.EXISTS(v_nomes_el(v_ind_nome_el)) ) THEN
                        v_exp_temp := cnjexpressoes(v_nomes_el(v_ind_nome_el));
                        mostrar_expressao(v_exp_temp);
                        IF ( v_exp_temp.resolvida = true ) THEN
                            exp_resolver.valor := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string.substituir(exp_resolver.valor, v_exp_temp.nome, v_exp_temp
                            .valornum, 1);


                            cnjexpressoes.DELETE(v_exp_temp.nome);
                        ELSE
                            resolver_expressao(v_exp_temp, cnjexpressoes, cnjvarsexp, cnjvariaveis, considerar_resolvida);
                            IF ( v_exp_temp.resolvida = true ) THEN
                                exp_resolver.valor := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string.substituir(exp_resolver.valor, v_exp_temp.nome
                                , v_exp_temp.valornum, 1);


                                cnjexpressoes.DELETE(v_exp_temp.nome);
                            ELSE
                                cnjexpressoes(v_exp_temp.nome) := v_exp_temp;
                            END IF;


                        END IF;


                    ELSE
                        NULL;
                    END IF;
                END IF;


                v_ind_nome_el := v_nomes_el.next(v_ind_nome_el);
            END LOOP;


            str_resultado := calcular(exp_resolver.valor);
            IF ( str_resultado IS NOT NULL ) THEN
                exp_resolver.valornum := str_resultado;
                exp_resolver.resolvida := true;
            ELSE
                efetuar_calc_cfme_preced(exp_resolver, cnjexpressoes, cnjvarsexp, cnjvariaveis);
            END IF;


            mostrar_expressao(exp_resolver);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END resolver_expressao;


    PROCEDURE resolver_expressoes (
        cnjexpressoes          IN OUT  tcnjexp,
        cnjvarsexp             IN OUT  tcnjexp,
        cnjvariaveis           IN OUT  tcnjexp,
        considerar_resolvida   BOOLEAN DEFAULT true
    ) AS


        v_nome_exp                     VARCHAR2(4000);
        v_exp_temp                     texp;
        v_exp_temp2                    texp;
        v_str                          VARCHAR2(4000);
        v_pos_op_ant                   NUMBER;
        v_pos_prox_op                  NUMBER;
        v_nome_var_temp                VARCHAR2(4000);
        v_tem_variavel_nao_resolvida   BOOLEAN DEFAULT false;
        v_var_temp                     texp;
        v_pos_op_ant_temp              NUMBER DEFAULT 0;
    BEGIN
        v_nome_exp := cnjexpressoes.first;
        WHILE ( v_nome_exp IS NOT NULL ) LOOP
            v_exp_temp := cnjexpressoes(v_nome_exp);
            resolver_expressao(v_exp_temp, cnjexpressoes, cnjvarsexp, cnjvariaveis, considerar_resolvida);
            cnjexpressoes(v_exp_temp.nome) := v_exp_temp;
            v_nome_exp := cnjexpressoes.next(v_nome_exp);
        END LOOP;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END resolver_expressoes;


    PROCEDURE aplicar_multiplicador (
        expressao       IN OUT  texp,
        cnjvariaveis    IN OUT  tcnjexp,
        cnjexpressoes   IN OUT  tcnjexp
    ) AS
        v_nomes_el                __FNV_GET_NOMESCHEMA__.tcnjstr;
        v_exp_temp                texp;
        ind                       NUMBER;
        cont                      NUMBER;
        multiplicador_existente   NUMBER;
        valor_temp                NUMBER;
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica', p_owner => '__FNV_GET_NOMESCHEMA__') ) AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.
        objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            IF ( expressao.resolvida = true ) THEN
                IF ( expressao.multiplicador IS NOT NULL ) THEN
                    IF expressao.multiplicador <> 1 THEN
                        expressao.valornum := expressao.valornum * expressao.multiplicador;
                        expressao.multiplicador := NULL;
                    ELSE
                        expressao.multiplicador := NULL;
                    END IF;


                END IF;


            ELSE
                v_nomes_el := obter_nomes_elementos_exp(expressao.valor);
                ind := 1;
                cont := v_nomes_el.count;
                FOR ind IN 1..cont LOOP NULL;
                END LOOP;
                ind := 1;
                cont := v_nomes_el.count;
                FOR ind IN 1..cont LOOP IF ( cnjvariaveis.EXISTS(v_nomes_el(ind)) ) THEN
                    v_exp_temp := cnjvariaveis(v_nomes_el(ind));
                    multiplicador_existente := nvl(v_exp_temp.multiplicador, 1);
                    IF ( v_exp_temp.resolvida = true ) THEN
                        valor_temp := v_exp_temp.valornum * multiplicador_existente * nvl(expressao.multiplicador, 1);
                        v_exp_temp.valornum := valor_temp;
                        v_exp_temp.multiplicador := NULL;
                    ELSE
                        valor_temp := multiplicador_existente * nvl(expressao.multiplicador, 1);
                        IF ( valor_temp = 1 ) THEN
                            valor_temp := NULL;
                        END IF;
                        v_exp_temp.multiplicador := valor_temp;
                    END IF;


                    cnjvariaveis(v_nomes_el(ind)) := v_exp_temp;
                ELSE
                    IF ( cnjexpressoes.EXISTS(v_nomes_el(ind)) ) THEN
                        v_exp_temp := cnjexpressoes(v_nomes_el(ind));
                        multiplicador_existente := nvl(v_exp_temp.multiplicador, 1);
                        IF ( v_exp_temp.resolvida = true ) THEN
                            valor_temp := v_exp_temp.valornum * multiplicador_existente * nvl(expressao.multiplicador, 1);
                            v_exp_temp.valornum := valor_temp;
                            v_exp_temp.multiplicador := NULL;
                        ELSE
                            valor_temp := multiplicador_existente * nvl(expressao.multiplicador, 1);
                            IF ( valor_temp = 1 ) THEN
                                valor_temp := NULL;
                            END IF;
                            v_exp_temp.multiplicador := valor_temp;
                            cnjexpressoes(v_nomes_el(ind)) := v_exp_temp;
                            aplicar_multiplicador(v_exp_temp, cnjvariaveis, cnjexpressoes);
                            v_exp_temp.multiplicador := NULL;
                            cnjexpressoes(v_exp_temp.nome) := v_exp_temp;
                        END IF;


                        cnjexpressoes(v_nomes_el(ind)) := v_exp_temp;
                    ELSE
                        IF ( __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica.eh_numero(replace(v_nomes_el(ind), '.', ',')) ) THEN
                            valor_temp := to_number(replace(v_nomes_el(ind), '.', ',')) * nvl(expressao.multiplicador, 1);


                            expressao.valor := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string.substituir(expressao.valor, v_nomes_el(ind), valor_temp
                            , 1);


                        ELSE
                            mostrar_expressoes(cnjvarsexp);
                            mostrar_expressoes(cnjexpressoes);
                        END IF;
                    END IF;
                END IF;
                END LOOP;


                cnjexpressoes(expressao.nome) := expressao;
            END IF;


        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END aplicar_multiplicador;


    PROCEDURE remontar_expressao (
        cnjexpressoes   IN OUT  tcnjexp,
        cnjvarsexp      IN OUT  tcnjexp,
        cnjvariaveis    IN OUT  tcnjexp
    ) AS


        v_nome_exp             VARCHAR2(4000);
        v_exp_temp             texp;
        v_pos_op               NUMBER;
        v_pos_el               NUMBER;
        v_pos_sinal_anterior   NUMBER;
        sinal_anterior         VARCHAR2(1);
        v_cnj_el               __FNV_GET_NOMESCHEMA__.tcnjstr;
        ind                    NUMBER;
        cont                   NUMBER;
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_nome_exp := cnjexpressoes.first;
            WHILE ( v_nome_exp IS NOT NULL ) LOOP
                << ini >> v_exp_temp := cnjexpressoes(v_nome_exp);
                mostrar_expressao(v_exp_temp);
                IF ( v_exp_temp.resolvida = true ) THEN
                    NULL;
                ELSE
                    v_cnj_el := obter_nomes_elementos_exp(v_exp_temp.valor);
                    cont := v_cnj_el.count;
                    ind := 1;
                    FOR ind IN 1..cont LOOP IF ( cnjexpressoes.EXISTS(v_cnj_el(ind)) ) THEN
                        v_pos_el := instr(v_exp_temp.valor, v_cnj_el(ind));
                        IF ( v_pos_el > 1 ) THEN
                            v_pos_sinal_anterior := v_pos_el - 1;
                            sinal_anterior := substr(v_exp_temp.valor, v_pos_sinal_anterior, 1);
                            IF ( sinal_anterior = '-' ) THEN
                                cnjexpressoes(v_cnj_el(ind)).valor := replace(cnjexpressoes(v_cnj_el(ind)).valor, '-', '+');
                            END IF;


                        END IF;


                        v_exp_temp.valor := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_string.substituir(v_exp_temp.valor, v_cnj_el(ind), cnjexpressoes
                        (v_cnj_el(ind)).valor, 1);


                        cnjexpressoes.DELETE(v_cnj_el(ind));
                    END IF;
                    END LOOP;


                    cnjexpressoes(v_exp_temp.nome) := v_exp_temp;
                    IF ( instr(v_exp_temp.valor, '_e') > 0 AND trim(v_exp_temp.valor) <> trim(v_nome_exp) ) THEN
                        GOTO ini;
                    END IF;


                END IF;


                v_nome_exp := cnjexpressoes.next(v_nome_exp);
            END LOOP;


        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END remontar_expressao;


    PROCEDURE aplicar_multiplicadores (
        cnjexpressoes   IN OUT  tcnjexp,
        cnjvarsexp      IN OUT  tcnjexp,
        cnjvariaveis    IN OUT  tcnjexp
    ) AS
        v_nome_exp   VARCHAR2(4000);
        v_exp_temp   texp;
    BEGIN
        v_nome_exp := cnjexpressoes.first;
        WHILE ( v_nome_exp IS NOT NULL ) LOOP
            v_exp_temp := cnjexpressoes(v_nome_exp);
            aplicar_multiplicador(v_exp_temp, cnjvarsexp, cnjexpressoes);
            v_exp_temp.multiplicador := NULL;
            cnjexpressoes(v_nome_exp) := v_exp_temp;
            v_nome_exp := cnjexpressoes.next(v_nome_exp);
        END LOOP;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END aplicar_multiplicadores;


    PROCEDURE substituir_expressao (
        expressoes         IN OUT tcnjexp,
        nome_exp           VARCHAR2,
        valor_substituto   VARCHAR2
    ) AS


        v_nome_exp    VARCHAR2(4000);
        v_exp_temp    texp;
        v_nomes_el    __FNV_GET_NOMESCHEMA__.tcnjstr;
        v_exp_temp2   texp;
        valor_ant     VARCHAR2(4000);
        mult_ant      NUMBER;
    BEGIN
        v_nome_exp := expressoes.first;
        WHILE ( v_nome_exp IS NOT NULL ) LOOP
            v_exp_temp := expressoes(v_nome_exp);
            valor_ant := v_exp_temp.valor;
            v_exp_temp.valor := replace(v_exp_temp.valor, nome_exp, valor_substituto);
            expressoes(v_nome_exp) := v_exp_temp;
            v_nome_exp := expressoes.next(v_nome_exp);
        END LOOP;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END substituir_expressao;


    PROCEDURE eliminar_redundancias (
        cnjexpressoes   IN OUT  tcnjexp,
        cnjvarsexp      IN OUT  tcnjexp,
        cnjvariaveis    IN OUT  tcnjexp
    ) AS


        v_nome_exp    VARCHAR2(4000);
        v_exp_temp    texp;
        v_nomes_el    __FNV_GET_NOMESCHEMA__.tcnjstr;
        v_exp_temp2   texp;
        valor_ant     VARCHAR2(4000);
        mult_ant      NUMBER;
    BEGIN
        v_nome_exp := cnjexpressoes.first;
        WHILE ( v_nome_exp IS NOT NULL ) LOOP
            v_exp_temp := cnjexpressoes(v_nome_exp);
            v_nomes_el := obter_nomes_elementos_exp(v_exp_temp.valor);
            IF ( v_nomes_el.count = 1 ) THEN
                IF ( cnjvarsexp.EXISTS(v_nomes_el(1)) ) THEN
                    v_exp_temp2 := cnjvarsexp(v_nomes_el(1));
                    valor_ant := v_exp_temp.valor;
                    mult_ant := v_exp_temp.multiplicador;
                    v_exp_temp2.multiplicador := nvl(v_exp_temp.multiplicador, 1) * nvl(v_exp_temp2.multiplicador, 1);


                    IF ( v_exp_temp2.multiplicador = 1 ) THEN
                        v_exp_temp2.multiplicador := NULL;
                    END IF;


                    cnjvarsexp(v_exp_temp2.nome) := v_exp_temp2;
                    substituir_expressao(cnjexpressoes, v_exp_temp.nome, v_exp_temp2.nome);
                    IF ( cnjexpressoes.count = 1 ) THEN
                        v_exp_temp.expressao := v_exp_temp2.expressao;
                        v_exp_temp.valor := v_exp_temp2.valor;
                        v_exp_temp.valornum := v_exp_temp2.valornum;
                        v_exp_temp.analisada := v_exp_temp2.analisada;
                        v_exp_temp.resolvida := v_exp_temp2.resolvida;
                        v_exp_temp.tipo := v_exp_temp2.tipo;
                        v_exp_temp.multiplicador := nvl(v_exp_temp.multiplicador, 1) * nvl(v_exp_temp2.multiplicador, 1);


                        IF ( v_exp_temp.multiplicador = 1 ) THEN
                            v_exp_temp.multiplicador := NULL;
                        END IF;


                        cnjexpressoes(v_exp_temp.nome) := v_exp_temp;
                    ELSE
                        cnjexpressoes.DELETE(v_exp_temp.nome);
                    END IF;


                ELSE
                    IF ( cnjexpressoes.EXISTS(v_nomes_el(1)) ) THEN
                        v_exp_temp2 := cnjexpressoes(v_nomes_el(1));
                        valor_ant := v_exp_temp.valor;
                        v_exp_temp.valor := v_exp_temp2.valor;
                        v_exp_temp.valornum := v_exp_temp2.valornum;
                        mult_ant := v_exp_temp.multiplicador;
                        v_exp_temp.multiplicador := nvl(v_exp_temp.multiplicador, 1) * nvl(v_exp_temp2.multiplicador, 1);


                        IF ( v_exp_temp.multiplicador = 1 ) THEN
                            v_exp_temp.multiplicador := NULL;
                        END IF;


                        cnjexpressoes(v_nome_exp) := v_exp_temp;
                        cnjexpressoes.DELETE(v_exp_temp2.nome);
                    END IF;
                END IF;
            END IF;


            v_nome_exp := cnjexpressoes.next(v_nome_exp);
        END LOOP;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END eliminar_redundancias;


    PROCEDURE efetuar_calculos_cfme_preced (
        expressoes     IN OUT  tcnjexp,
        cnjvarsexp     IN OUT  tcnjexp,
        cnjvariaveis   IN OUT  tcnjexp
    ) AS
        v_nome_exp   VARCHAR2(4000);
        v_exp_temp   texp;
    BEGIN
        v_nome_exp := expressoes.first;
        WHILE v_nome_exp IS NOT NULL LOOP
            v_exp_temp := expressoes(v_nome_exp);
            efetuar_calc_cfme_preced(v_exp_temp, expressoes, cnjvarsexp, cnjvariaveis);
            expressoes(v_nome_exp) := v_exp_temp;
            v_nome_exp := expressoes.next(v_nome_exp);
        END LOOP;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END efetuar_calculos_cfme_preced;


    PROCEDURE agrupar_elementos (
        expressoes     IN OUT  tcnjexp,
        cnjvarsexp     IN OUT  tcnjexp,
        cnjvariaveis   IN OUT  tcnjexp
    ) AS


        v_nome_exp   VARCHAR2(4000);
        v_exp_temp   texp;
        v_nomes_el   __FNV_GET_NOMESCHEMA__.tcnjstr;
        strexp_var   VARCHAR2(4000);
        strexp_num   VARCHAR2(4000);
        pos_el       NUMBER;
        ind          NUMBER;
        cont         NUMBER;
    BEGIN
        v_nome_exp := expressoes.first;
        WHILE v_nome_exp IS NOT NULL LOOP
            v_exp_temp := expressoes(v_nome_exp);
            v_nomes_el := obter_nomes_elementos_exp(v_exp_temp.valor);
            ind := 1;
            cont := v_nomes_el.count;
            strexp_var := '';
            strexp_num := '';
            FOR ind IN 1..cont LOOP
                pos_el := instr(v_exp_temp.valor, v_nomes_el(ind));
                IF ( cnjvarsexp.EXISTS(v_nomes_el(ind)) OR expressoes.EXISTS(v_nomes_el(ind)) ) THEN
                    IF ( pos_el = 1 ) THEN
                        strexp_var := strexp_var || v_nomes_el(ind);
                    ELSE
                        strexp_var := strexp_var
                                        || substr(v_exp_temp.valor, pos_el - 1, length(v_nomes_el(ind)) + 1);
                    END IF;


                ELSE
                    IF ( pos_el = 1 ) THEN
                        strexp_num := strexp_num || v_nomes_el(ind);
                    ELSE
                        strexp_num := strexp_num
                                        || substr(v_exp_temp.valor, pos_el - 1, length(v_nomes_el(ind)) + 1);
                    END IF;
                END IF;


            END LOOP;


            IF ( length(strexp_num) > 0 AND instr('+-*/', substr(strexp_num, 1, 1)) = 0 ) THEN
                strexp_num := '+' || strexp_num;
            END IF;


            v_exp_temp.valor := strexp_var || strexp_num;
            expressoes(v_nome_exp) := v_exp_temp;
            v_nome_exp := expressoes.next(v_nome_exp);
        END LOOP;


    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END agrupar_elementos;


    PROCEDURE isolar_incognitas (
        expressoesl1   IN OUT  tcnjexp,
        expressoesl2   IN OUT  tcnjexp,
        cnjvarsexp     IN OUT  tcnjexp,
        cnjvariaveis   IN OUT  tcnjexp
    ) AS


        v_nome_exp    VARCHAR2(4000);
        v_nome_exp2   VARCHAR2(4000);
        v_exp_temp    texp;
        v_nomes_el    __FNV_GET_NOMESCHEMA__.tcnjstr;
        strexp_var    VARCHAR2(4000);
        strexp_num    VARCHAR2(4000);
        pos_el        NUMBER;
        ind           NUMBER;
        cont          NUMBER;
        cnjexp_inc    tcnjexp;
        cnjexp_num    tcnjexp;
        v_exp_temp2   texp;
        cont_num      NUMBER;
        strl1         VARCHAR2(4000);
        strl2         VARCHAR2(4000);
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_nome_exp := expressoesl1.first;
            cont_num := 0;
            WHILE ( v_nome_exp IS NOT NULL ) LOOP
                v_exp_temp := expressoesl1(v_nome_exp);
                mostrar_expressao(v_exp_temp);
                IF ( v_exp_temp.resolvida = true ) THEN
                    v_nome_exp2 := '_n'
                                    || cont_num
                                    || '_';
                    v_exp_temp2.nome := v_nome_exp2;
                    v_exp_temp2.expressao := v_exp_temp.expressao;
                    v_exp_temp2.valor := v_exp_temp.valor;
                    v_exp_temp2.valornum := v_exp_temp.valornum;
                    v_exp_temp2.tipo := v_exp_temp.tipo;
                    v_exp_temp2.sinal := v_exp_temp.sinal;
                    v_exp_temp2.multiplicador := v_exp_temp.multiplicador;
                    v_exp_temp2.analisada := true;
                    v_exp_temp2.resolvida := true;
                /*IF ( pos_el > 1 ) THEN
                    v_exp_temp2.sinal := substr(v_exp_temp.valor, pos_el - 1, 1);*/
                    IF ( v_exp_temp2.sinal = '-' ) THEN
                        v_exp_temp2.sinal := '+';
                    ELSE
                        v_exp_temp2.sinal := '-';
                    END IF;
                /*else
                    v_exp_temp2.sinal := '-';
                END IF;*/


                    cnjexp_num(v_nome_exp2) := v_exp_temp2;
                    cont_num := cont_num + 1;
                ELSE
                    v_nomes_el := obter_nomes_elementos_exp(v_exp_temp.valor);
                    ind := 1;
                    cont := v_nomes_el.count;
                    FOR ind IN 1..cont LOOP
                        IF ( instr('*/+-()=', substr(v_nomes_el(ind), 1, 1)) > 0 ) THEN
                            v_nomes_el(ind) := substr(v_nomes_el(ind), 2);
                        END IF;


                        pos_el := instr(v_exp_temp.valor, v_nomes_el(ind));
                        IF ( cnjvarsexp.EXISTS(v_nomes_el(ind)) ) THEN
                            v_exp_temp2 := cnjvarsexp(v_nomes_el(ind));
                            IF ( pos_el > 1 ) THEN
                                v_exp_temp2.sinal := substr(v_exp_temp.valor, pos_el - 1, 1);
                            END IF;


                            cnjexp_inc(v_nomes_el(ind)) := v_exp_temp2;
                        ELSE
                            IF ( expressoesl1.EXISTS(v_nomes_el(ind)) ) THEN
                                v_exp_temp2 := expressoesl1(v_nomes_el(ind));
                                IF ( pos_el > 1 ) THEN
                                    v_exp_temp2.sinal := substr(v_exp_temp.valor, pos_el - 1, 1);
                                END IF;


                                cnjexp_inc(v_nomes_el(ind)) := v_exp_temp2;
                            ELSE
                                v_nome_exp2 := '_n'
                                                || cont_num
                                                || '_';
                                IF ( __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica.eh_numero(v_nomes_el(ind)) ) THEN
                                    v_exp_temp2.nome := v_nome_exp2;
                                    v_exp_temp2.expressao := v_nomes_el(ind);
                                    v_exp_temp2.valor := v_exp_temp2.expressao;
                                    v_exp_temp2.valornum := to_number(replace(v_exp_temp2.valor, '.', ','));


                                    v_exp_temp2.tipo := 'number';
                                    v_exp_temp2.analisada := true;
                                    v_exp_temp2.resolvida := true;
                                    IF ( pos_el > 1 ) THEN
                                        v_exp_temp2.sinal := substr(v_exp_temp.valor, pos_el - 1, 1);
                                        IF ( v_exp_temp2.sinal = '-' ) THEN
                                            v_exp_temp2.sinal := '+';
                                        ELSE
                                            v_exp_temp2.sinal := '-';
                                        END IF;


                                    ELSE
                                        v_exp_temp2.sinal := '-';
                                    END IF;


                                    cnjexp_num(v_nome_exp2) := v_exp_temp2;
                                    cont_num := cont_num + 1;
                                ELSE
                                    v_nome_exp2 := v_nomes_el(ind);
                                    v_exp_temp2 := NULL;
                                    v_exp_temp2.nome := v_nome_exp2;
                                    v_exp_temp2.expressao := v_exp_temp2.nome;
                                    v_exp_temp2.valor := v_exp_temp2.expressao;
                                    IF ( pos_el > 1 ) THEN
                                        v_exp_temp2.sinal := substr(v_exp_temp.valor, pos_el - 1, 1);
                                    END IF;


                                    cnjexp_inc(v_nome_exp2) := v_exp_temp2;
                                END IF;


                            END IF;
                        END IF;


                    END LOOP;


                END IF;


                v_nome_exp := expressoesl1.next(v_nome_exp);
            END LOOP;


            mostrar_expressoes(expressoesl2);
            v_nome_exp := expressoesl2.first;
            WHILE ( v_nome_exp IS NOT NULL ) LOOP
                v_exp_temp := expressoesl2(v_nome_exp);
                mostrar_expressao(v_exp_temp);
                IF ( v_exp_temp.resolvida = true ) THEN
                    v_nome_exp2 := '_n'
                                    || cont_num
                                    || '_';
                    v_exp_temp2.nome := v_nome_exp2;
                    v_exp_temp2.expressao := v_exp_temp.expressao;
                    v_exp_temp2.valor := v_exp_temp.valor;
                    v_exp_temp2.valornum := v_exp_temp.valornum;
                    v_exp_temp2.tipo := v_exp_temp.tipo;
                    v_exp_temp2.sinal := v_exp_temp.sinal;
                    v_exp_temp2.multiplicador := v_exp_temp.multiplicador;
                    v_exp_temp2.analisada := true;
                    v_exp_temp2.resolvida := true;
                /* IF ( pos_el > 1 ) THEN
                    v_exp_temp2.sinal := substr(v_exp_temp.valor, pos_el - 1, 1);
                END IF;*/
                    cnjexp_num(v_nome_exp2) := v_exp_temp2;
                    cont_num := cont_num + 1;
                ELSE
                    v_nomes_el := obter_nomes_elementos_exp(v_exp_temp.valor);
                    ind := 1;
                    cont := v_nomes_el.count;
                    FOR ind IN 1..cont LOOP
                        IF ( instr('*/+-()=', substr(v_nomes_el(ind), 1, 1)) > 0 ) THEN
                            v_nomes_el(ind) := substr(v_nomes_el(ind), 2);
                        END IF;


                        pos_el := instr(v_exp_temp.valor, v_nomes_el(ind));
                        IF ( cnjvarsexp.EXISTS(v_nomes_el(ind)) ) THEN
                            v_exp_temp2 := cnjvarsexp(v_nomes_el(ind));
                            IF ( pos_el > 1 ) THEN
                                v_exp_temp2.sinal := substr(v_exp_temp.valor, pos_el - 1, 1);
                                IF ( v_exp_temp2.sinal = '-' ) THEN
                                    v_exp_temp2.sinal := '+';
                                ELSE
                                    v_exp_temp2.sinal := '-';
                                END IF;


                            ELSE
                                v_exp_temp2.sinal := '-';
                            END IF;


                            cnjexp_inc(v_nomes_el(ind)) := v_exp_temp2;
                        ELSE
                            IF ( expressoesl2.EXISTS(v_nomes_el(ind)) ) THEN
                                v_exp_temp2 := expressoesl2(v_nomes_el(ind));
                                IF ( pos_el > 1 ) THEN
                                    v_exp_temp2.sinal := substr(v_exp_temp.valor, pos_el - 1, 1);
                                    IF ( v_exp_temp2.sinal = '-' ) THEN
                                        v_exp_temp2.sinal := '+';
                                    ELSE
                                        v_exp_temp2.sinal := '-';
                                    END IF;


                                ELSE
                                    v_exp_temp2.sinal := '-';
                                END IF;


                                cnjexp_inc(v_nomes_el(ind)) := v_exp_temp2;
                            ELSE
                                v_nome_exp2 := '_n'
                                                || cont_num
                                                || '_';
                                IF ( __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_matematica.eh_numero(v_nomes_el(ind)) ) THEN
                                    v_exp_temp2.nome := v_nome_exp2;
                                    v_exp_temp2.expressao := v_nomes_el(ind);
                                    v_exp_temp2.valor := v_exp_temp2.expressao;
                                    v_exp_temp2.valornum := to_number(replace(v_exp_temp2.valor, '.', ','));


                                    v_exp_temp2.tipo := 'number';
                                    v_exp_temp2.analisada := true;
                                    v_exp_temp2.resolvida := true;
                                    IF ( pos_el > 1 ) THEN
                                        v_exp_temp2.sinal := substr(v_exp_temp.valor, pos_el - 1, 1);
                                    END IF;


                                    cnjexp_num(v_nome_exp2) := v_exp_temp2;
                                    cont_num := cont_num + 1;
                                ELSE
                                    v_nome_exp2 := v_nomes_el(ind);
                                    v_exp_temp2 := NULL;
                                    v_exp_temp2.nome := v_nome_exp2;
                                    v_exp_temp2.expressao := v_exp_temp2.nome;
                                    v_exp_temp2.valor := v_exp_temp2.expressao;
                                    IF ( pos_el > 1 ) THEN
                                        v_exp_temp2.sinal := substr(v_exp_temp.valor, pos_el - 1, 1);
                                        IF ( v_exp_temp2.sinal = '-' ) THEN
                                            v_exp_temp2.sinal := '+';
                                        ELSE
                                            v_exp_temp2.sinal := '-';
                                        END IF;


                                    ELSE
                                        v_exp_temp2.sinal := '-';
                                    END IF;


                                    cnjexp_inc(v_nome_exp2) := v_exp_temp2;
                                END IF;


                            END IF;
                        END IF;


                    END LOOP;


                END IF;


                v_nome_exp := expressoesl2.next(v_nome_exp);
            END LOOP;


            expressoesl1('_el1_') := NULL;
            expressoesl1('_el1_').nome := '_el1_';
            expressoesl1('_el1_').tipo := 'varchar2';
            expressoesl1('_el1_').resolvida := false;
            expressoesl1('_el1_').analisada := false;
            expressoesl1('_el1_').expressao := '';
            expressoesl1('_el1_').valor := '';
            expressoesl2('_el2_') := NULL;
            expressoesl2('_el2_').nome := '_el2_';
            expressoesl2('_el2_').tipo := 'varchar2';
            expressoesl2('_el2_').resolvida := false;
            expressoesl2('_el2_').analisada := false;
            expressoesl2('_el2_').expressao := '';
            expressoesl2('_el2_').valor := '';
            v_nome_exp := cnjexp_inc.first;
            WHILE ( v_nome_exp IS NOT NULL ) LOOP
                v_exp_temp := cnjexp_inc(v_nome_exp);
                IF ( v_exp_temp.sinal IS NOT NULL ) THEN
                    expressoesl1('_el1_').valor := expressoesl1('_el1_').valor
                                                    || v_exp_temp.sinal
                                                    || v_exp_temp.nome;


                ELSE
                    expressoesl1('_el1_').valor := expressoesl1('_el1_').valor
                                                    || '+'
                                                    || v_exp_temp.nome;
                END IF;


                v_nome_exp := cnjexp_inc.next(v_nome_exp);
            END LOOP;


            v_nome_exp := cnjexp_num.first;
            WHILE ( v_nome_exp IS NOT NULL ) LOOP
                mostrar_expressao(expressoesl2('_el2_'));
                v_exp_temp := cnjexp_num(v_nome_exp);
                mostrar_expressao(v_exp_temp);
                IF ( v_exp_temp.sinal IS NOT NULL ) THEN
                    expressoesl2('_el2_').valor := expressoesl2('_el2_').valor
                                                    || v_exp_temp.sinal
                                                    || v_exp_temp.valornum;
                ELSE
                    expressoesl2('_el2_').valor := expressoesl2('_el2_').valor
                                                    || '+'
                                                    || v_exp_temp.valornum;
                END IF;


                v_nome_exp := cnjexp_num.next(v_nome_exp);
            END LOOP;


            mostrar_expressao(expressoesl1('_el1_'));
            mostrar_expressao(expressoesl2('_el2_'));
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END isolar_incognitas;


    FUNCTION traduzir_exp (
        exp_traduzir   VARCHAR2,
        cnjvarsexp     IN OUT tcnjexp
    ) RETURN VARCHAR2 AS


        retorno         VARCHAR2(4000) DEFAULT NULL;
        v_ind_nome_el   NUMBER;
        v_nome_el       VARCHAR2(4000);
        v_nomes_el      __FNV_GET_NOMESCHEMA__.tcnjstr;
    BEGIN
        v_nomes_el := obter_nomes_elementos_exp(exp_traduzir);
        v_ind_nome_el := v_nomes_el.first;
        retorno := exp_traduzir;
        WHILE ( v_ind_nome_el IS NOT NULL ) LOOP
            v_nome_el := v_nomes_el(v_ind_nome_el);
            v_nome_el := limpar_caract_esq_dir(v_nome_el, '*/+-()=');
            IF ( cnjvarsexp.EXISTS(v_nome_el) ) THEN
                retorno := replace(retorno, v_nome_el, cnjvarsexp(v_nome_el).valor);
            END IF;


            v_ind_nome_el := v_nomes_el.next(v_ind_nome_el);
        END LOOP;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END traduzir_exp;


    FUNCTION calcular_incognita (
        expressoesl1   IN OUT  tcnjexp,
        expressoesl2   IN OUT  tcnjexp,
        cnjvarsexp     IN OUT  tcnjexp,
        cnjvariaveis   IN OUT  tcnjexp
    ) RETURN VARCHAR2 AS


        retorno         VARCHAR2(4000) DEFAULT NULL;
        v_nome_exp1     VARCHAR2(4000);
        v_nome_exp2     VARCHAR2(4000);
        v_exp_temp1     texp;
        v_exp_temp2     texp;
        v_nomes_el1     __FNV_GET_NOMESCHEMA__.tcnjstr;
        v_nomes_el2     __FNV_GET_NOMESCHEMA__.tcnjstr;
        str_calcular    VARCHAR2(4000);
        str_resultado   VARCHAR2(4000);
    BEGIN
        v_nome_exp1 := '_el1_';
        v_exp_temp1 := expressoesl1(v_nome_exp1);
        v_nomes_el1 := obter_nomes_elementos_exp(v_exp_temp1.valor);
        v_nome_exp2 := '_el2_';
        v_exp_temp2 := expressoesl2(v_nome_exp2);
        IF ( v_nomes_el1.count > 1 ) THEN
            retorno := v_exp_temp1.valor
                        || '='
                        || v_exp_temp2.valor;
            retorno := traduzir_exp(retorno, cnjvarsexp);
        ELSE
            v_nomes_el1(1) := limpar_caract_esq_dir(v_nomes_el1(1), '*/+-()=');
            IF ( cnjvarsexp.EXISTS(v_nomes_el1(1)) ) THEN
                v_exp_temp1 := cnjvarsexp(v_nomes_el1(1));
            ELSE
                v_exp_temp1.nome := v_nomes_el1(1);
                v_exp_temp1.multiplicador := 1;
                v_exp_temp1.valor := v_exp_temp1.nome;
            END IF;


            v_nomes_el2 := obter_nomes_elementos_exp(v_exp_temp2.valor);
            v_nomes_el2(1) := limpar_caract_esq_dir(v_nomes_el2(1), '*/+-()=');
            str_resultado := calcular(v_nomes_el2(1)
                                        || '/'
                                        || nvl(v_exp_temp1.multiplicador, 1));


            IF ( str_resultado IS NOT NULL ) THEN
                retorno := v_exp_temp1.valor
                            || '='
                            || str_resultado;
            ELSE
                retorno := v_exp_temp1.valor
                            || '='
                            || v_nomes_el2(1)
                            || '/'
                            || nvl(v_exp_temp1.multiplicador, 1);
            END IF;


        END IF;


        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
    END calcular_incognita;


    FUNCTION resolver_expressao_algebrica (
        vp_expressao   VARCHAR2,
        vp_variaveis   VARCHAR2
    ) RETURN VARCHAR2 AS


        v_expressao           VARCHAR2(4000);
        v_separador_exp       VARCHAR2(1) DEFAULT '=';
        v_pos_separador_exp   NUMBER DEFAULT 0;
        v_exp_l1              VARCHAR2(4000);
        v_exp_l2              VARCHAR2(4000);
        v_retorno             VARCHAR2(4000) DEFAULT NULL;
        v_nome_exp            VARCHAR2(4000) DEFAULT NULL;
        v_exp_temp            texp;
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            cnjexpressoesl1.DELETE();
            cnjexpressoesl2.DELETE();
            cnjvariaveis.DELETE();
            cnjvarsexp.DELETE();
            v_expressao := trim(vp_expressao);
            v_cont_exp := 0;
            inicializar_variaveis(vp_variaveis, cnjvariaveis);
            identificar_variaveis(v_expressao, cnjvarsexp, cnjvariaveis);
            v_pos_separador_exp := instr(v_expressao, v_separador_exp);
            IF ( v_pos_separador_exp > 0 ) THEN
                v_exp_l1 := substr(v_expressao, 1, v_pos_separador_exp - 1);
                v_exp_l2 := substr(v_expressao, v_pos_separador_exp + 1);
                IF ( length(v_exp_l1) > 0 AND length(v_exp_l2) > 0 ) THEN
                    identificar_expressoes(v_exp_l1, cnjexpressoesl1);
                    identificar_expressoes(v_exp_l2, cnjexpressoesl2);
                    resolver_expressoes(cnjexpressoesl1, cnjvarsexp, cnjvariaveis);
                    resolver_expressoes(cnjexpressoesl2, cnjvarsexp, cnjvariaveis);
                    eliminar_redundancias(cnjexpressoesl1, cnjvarsexp, cnjvariaveis);
                    eliminar_redundancias(cnjexpressoesl2, cnjvarsexp, cnjvariaveis);
                    aplicar_multiplicadores(cnjexpressoesl1, cnjvarsexp, cnjvariaveis);
                    aplicar_multiplicadores(cnjexpressoesl2, cnjvarsexp, cnjvariaveis);
                    v_nome_exp := cnjvarsexp.first;
                    WHILE ( v_nome_exp IS NOT NULL ) LOOP
                        v_exp_temp := cnjvarsexp(v_nome_exp);
                        v_nome_exp := cnjvarsexp.next(v_nome_exp);
                    END LOOP;


                    v_nome_exp := cnjexpressoesl1.first;
                    WHILE ( v_nome_exp IS NOT NULL ) LOOP
                        v_exp_temp := cnjexpressoesl1(v_nome_exp);
                        v_nome_exp := cnjexpressoesl1.next(v_nome_exp);
                    END LOOP;


                    v_nome_exp := cnjexpressoesl2.first;
                    WHILE ( v_nome_exp IS NOT NULL ) LOOP
                        v_exp_temp := cnjexpressoesl2(v_nome_exp);
                        v_nome_exp := cnjexpressoesl2.next(v_nome_exp);
                    END LOOP;


                    mostrar_expressoes(cnjexpressoesl2);
                    remontar_expressao(cnjexpressoesl1, cnjvarsexp, cnjvariaveis);
                    remontar_expressao(cnjexpressoesl2, cnjvarsexp, cnjvariaveis);
                    mostrar_expressoes(cnjexpressoesl2);
                    efetuar_calculos_cfme_preced(cnjexpressoesl1, cnjvarsexp, cnjvariaveis);
                    efetuar_calculos_cfme_preced(cnjexpressoesl2, cnjvarsexp, cnjvariaveis);
                    agrupar_elementos(cnjexpressoesl1, cnjvarsexp, cnjvariaveis);
                    agrupar_elementos(cnjexpressoesl2, cnjvarsexp, cnjvariaveis);
                    efetuar_calculos_cfme_preced(cnjexpressoesl1, cnjvarsexp, cnjvariaveis);
                    efetuar_calculos_cfme_preced(cnjexpressoesl2, cnjvarsexp, cnjvariaveis);
                    isolar_incognitas(cnjexpressoesl1, cnjexpressoesl2, cnjvarsexp, cnjvariaveis);
                    efetuar_calculos_cfme_preced(cnjexpressoesl1, cnjvarsexp, cnjvariaveis);
                    efetuar_calculos_cfme_preced(cnjexpressoesl2, cnjvarsexp, cnjvariaveis);
                    v_nome_exp := cnjexpressoesl1.first;
                    WHILE ( v_nome_exp IS NOT NULL ) LOOP
                        v_exp_temp := cnjexpressoesl1(v_nome_exp);
                        v_nome_exp := cnjexpressoesl1.next(v_nome_exp);
                    END LOOP;


                    v_nome_exp := cnjexpressoesl2.first;
                    WHILE ( v_nome_exp IS NOT NULL ) LOOP
                        v_exp_temp := cnjexpressoesl2(v_nome_exp);
                        v_nome_exp := cnjexpressoesl2.next(v_nome_exp);
                    END LOOP;


                    v_retorno := calcular_incognita(cnjexpressoesl1, cnjexpressoesl2, cnjvarsexp, cnjvariaveis);
                ELSE
                    RAISE e_expr_tamanho_0;
                END IF;


            ELSE
                RAISE e_sem_separador;
            END IF;


        END IF;


        RETURN v_retorno;
    EXCEPTION
        WHEN e_sem_separador THEN
            RETURN v_retorno;
        WHEN e_expr_tamanho_0 THEN
            RETURN v_retorno;
        WHEN e_abertura_fechamento_exp THEN
            RETURN v_retorno;
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
            RETURN NULL;
            RETURN v_retorno;
    END resolver_expressao_algebrica;


END __FNV_GET_PREFIXOBJECTSDB__pkgexpalg;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_precif":{
		"nomepackagesqldb":"__CHAVE__",
		"nomepackagesqlsistema":"__CHAVE__",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_precif AS


    PROCEDURE importar_precos_aurora;


    PROCEDURE atualizar_preco_sug;


    PROCEDURE calcular_st_entrada (
        p_precovendasemst   NUMBER,
        p_ipi               NUMBER,
        p_aliqint           NUMBER,
        p_aliqext           NUMBER,
        p_iva               NUMBER,
        p_baseredst         NUMBER,
        p_redbasealiqext    NUMBER,
        pv_basest           IN OUT  NUMBER,
        pv_vlst             IN OUT  NUMBER
    );


    PROCEDURE copiar_custos_filial (
        p_codfilialorigem    NUMBER,
        p_codfilialdestino   NUMBER,
        p_codprod            NUMBER DEFAULT NULL
    );


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_precif;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_precif AS

    FUNCTION obter_config_precif (
        nome_param VARCHAR2
    ) RETURN VARCHAR2 AS
        v_existe NUMBER DEFAULT 0;
        v_ret    VARCHAR2(4000) DEFAULT NULL;
    BEGIN
        v_existe := 0;
        v_ret := NULL;
        SELECT
            COUNT(1) INTO v_existe
        FROM
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__configprecif
        WHERE
            lower(TRIM(config)) = lower(TRIM(nome_param));

        IF ( v_existe > 0 ) THEN
            SELECT
                valor INTO v_ret
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__configprecif
            WHERE
                lower(TRIM(config)) = lower(TRIM(nome_param));
        END IF;

        RETURN v_ret;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => nome_param, p_linha => $$plsql_line);
            RETURN NULL;
    END obter_config_precif;

    PROCEDURE importar_precos_aurora AS
        v_exists              BOOLEAN;
        v_length              NUMBER;
        v_blocksize           NUMBER;
        v_file_type           utl_file.file_type;
        v_file_name           VARCHAR2(200);
        v_directory_name      VARCHAR2(30);
        v_directory_dest_name VARCHAR2(30);
        v_file_dest_name      VARCHAR2(200);
        v_line                VARCHAR2(4000);
        v_delimitador_col     VARCHAR(1) DEFAULT ';';
        linha_preco           __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem%rowtype;
        linha_prod            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__produto_origem%rowtype;
        str1                  VARCHAR2(4000);
        cont_campos           NUMBER DEFAULT 0;
        existe_preco          NUMBER DEFAULT 0;
        num1                  NUMBER DEFAULT 0;
    BEGIN
        v_directory_name := 'P_AUR_PRECOS_VIGENTE';
        v_directory_dest_name := 'P_AUR_PRECOS_IMPORTADOS';
        v_file_name := 'precos.csv';
        v_file_dest_name := 'precos' || to_char(sysdate, 'ddmmyyyy HH24miss') || '.csv';
        utl_file.fgetattr(v_directory_name, v_file_name, v_exists, v_length, v_blocksize);
        IF v_exists THEN
            dbms_output.put_line('arquivo encontrado');
            v_file_type := utl_file.fopen(v_directory_name, v_file_name, 'R');
            BEGIN
                /*primeira linha eh o titulo, descartar*/
                utl_file.get_line(v_file_type, v_line);
                linha_prod.codorigemdado := 1;
                linha_prod.codfornec_erp := 500632;
                LOOP
                    BEGIN
                        linha_prod := NULL;
                        linha_preco := null;
                        utl_file.get_line(v_file_type, v_line);
                        v_line := replace(v_line, '\"', '');
                        linha_preco := NULL;
                        dbms_output.put_line(v_line);
                        cont_campos := 0;
                        LOOP
                            BEGIN
                                IF (
                                    ( nvl(instr(v_line, v_delimitador_col), 0) = 0 )
                                    AND ( nvl(length(v_line), 0) = 0 )
                                ) THEN
                                    EXIT;
                                END IF;

                                IF ( instr(v_line, v_delimitador_col) = 0 ) THEN
                                    str1 := v_line;
                                    v_line := '';
                                ELSE
                                    str1 := substr(v_line, 0, instr(v_line, v_delimitador_col) - 1);
                                    v_line := substr(v_line, instr(v_line, v_delimitador_col) + 1);
                                END IF;
                                --dbms_output.put_line('  valor:' || str1 || '|campo:'|| cont_campos);
                                CASE cont_campos
                                    WHEN 0 THEN
                                        BEGIN
                                            IF str1 = '85522043/0001-90' OR str1 = '1' THEN
                                                linha_preco.codfilialorigem := 1;
                                                linha_preco.codfilial_erp := 1;
                                                linha_preco.numregiao := 1;
                                            ELSE
                                                linha_preco.codfilialorigem := 2;
                                                linha_preco.codfilial_erp := 2;
                                                linha_preco.numregiao := 10;
                                            END IF;

                                        END;
                                    WHEN 1 THEN
                                        linha_preco.codprodorigem := str1;
                                        linha_prod.codprod := str1;
                                        linha_prod.codprod_na_origem := str1;
                                    WHEN 2 THEN
                                        linha_prod.descricao := str1;
                                    WHEN 3 THEN
                                        linha_preco.pcompra1 := replace(replace(str1, 'R$', ''), ' ', '');
                                    WHEN 4 THEN
                                        linha_preco.pcompra2 := replace(replace(str1, 'R$', ''), ' ', '');
                                    WHEN 5 THEN
                                        linha_preco.percdescpcompra2 := replace(replace(str1, '%', ''), ' ', '');

                                        IF nvl(linha_preco.percdescpcompra2, 0) >= 100 THEN
                                            linha_preco.percdescpcompra2 := linha_preco.percdescpcompra2 / 10;
                                        END IF;

                                        IF
                                            nvl(linha_preco.percdescpcompra2, 0) > 0
                                            AND nvl(linha_preco.percdescpcompra2, 0) <= 1
                                        THEN
                                            linha_preco.percdescpcompra2 := linha_preco.percdescpcompra2 * 100;
                                        END IF;

                                    ELSE
                                        NULL;
                                END CASE;

                                IF ((nvl(instr(v_line, v_delimitador_col), 0) = 0 )
                                    AND ( nvl(length(v_line), 0) = 0 )
                                ) THEN
                                    EXIT;
                                END IF;

                                cont_campos := cont_campos + 1;
                            EXCEPTION 
                                /*se houver erros nesse laco, tem que continuar para os proximos produtos*/
                                WHEN OTHERS THEN
                                    __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(
                                        p_vlrs => v_line, 
                                        p_linha => $$plsql_line
                                    );
                            END;
                        END LOOP;

                        IF ( length(trim(linha_preco.codprodorigem)) > 0 ) THEN
                            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_produto_origem(linha_prod);
                            linha_preco.codprod_erp := linha_prod.codprod_erp;
                            existe_preco := 0;
                            linha_preco.dtatualizacao := sysdate;
                            linha_preco.dtimportacao := sysdate;
                            SELECT
                                COUNT(1)
                                INTO existe_preco
                            FROM
                                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem
                            WHERE
                                    __FNV_GET_PREFIXOBJECTSDB__tabpr_origem.codfilialorigem = linha_preco.codfilialorigem
                                AND __FNV_GET_PREFIXOBJECTSDB__tabpr_origem.codprodorigem = linha_preco.codprodorigem;

                            IF ( existe_preco > 0 ) THEN
                                dbms_output.put_line('existe preco');
                                FOR lu IN (
                                    SELECT
                                        *
                                    FROM
                                        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem
                                    WHERE
                                            __FNV_GET_PREFIXOBJECTSDB__tabpr_origem.codfilialorigem = linha_preco.codfilialorigem
                                        AND __FNV_GET_PREFIXOBJECTSDB__tabpr_origem.codprodorigem = linha_preco.codprodorigem
                                ) LOOP
                                    BEGIN
                                        linha_preco.coditemtabpr := lu.coditemtabpr;
                                        linha_preco.numregiao := lu.numregiao;
                                        linha_preco.codregiao_erp := lu.codregiao_erp;
                                        linha_preco.dtimportacao := nvl(lu.dtimportacao, linha_preco.dtimportacao);
                                        UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem
                                        SET
                                            row = linha_preco
                                        WHERE
                                                __FNV_GET_PREFIXOBJECTSDB__tabpr_origem.codfilialorigem = linha_preco.codfilialorigem
                                            AND __FNV_GET_PREFIXOBJECTSDB__tabpr_origem.codprodorigem = linha_preco.codprodorigem
                                            AND __FNV_GET_PREFIXOBJECTSDB__tabpr_origem.numregiao = lu.numregiao;

                                        INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem_log VALUES linha_preco;

                                        IF ( inserting ) OR ( updating ) OR ( deleting ) THEN
                                            NULL;
                                        ELSE
                                            COMMIT;
                                        END IF;

                                    EXCEPTION
                                        WHEN OTHERS THEN
                                            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(
                                                p_vlrs => 'codfilial: '
                                                        || linha_preco.codfilialorigem
                                                        || ' codprod: '
                                                        || linha_preco.codprodorigem, p_linha => $$plsql_line
                                            );
                                    END;
                                END LOOP;

                            ELSE
                                linha_preco.coditemtabpr := nvl(__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.obter_valor_maximo('__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem', 'coditemtabpr'), 0) + 1;
                                linha_preco.codorigemdado := 1;
                                IF linha_preco.codfilialorigem = 1 THEN
                                    linha_preco.numregiao := 1;
                                ELSE
                                    linha_preco.numregiao := 10;
                                END IF;

                                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem VALUES linha_preco;

                                INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem_log VALUES linha_preco;

                                IF ( inserting ) OR ( updating ) OR ( deleting ) THEN
                                    NULL;
                                ELSE
                                    COMMIT;
                                END IF;

                            END IF;

                        END IF;

                    EXCEPTION
                        WHEN no_data_found THEN
                            EXIT;
                        WHEN OTHERS THEN
                            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => v_line, p_linha => $$plsql_line);
                    END;
                END LOOP;

            EXCEPTION
                WHEN no_data_found THEN
                    NULL;
            END;

            utl_file.fclose(v_file_type);
            utl_file.frename(v_directory_name, v_file_name, v_directory_dest_name, v_file_dest_name, true);
        ELSE
            SELECT
                MAX(dtatualizacao)
                INTO linha_preco.dtatualizacao
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem_log;

            IF trunc(linha_preco.dtatualizacao) < trunc(sysdate) THEN
                IF to_number(to_char(sysdate, 'hh24')) > 9 THEN
                    raise_application_error(-20001, 'Arquivo de precos da aurora nao encontrado nessa hora: ' || to_char(sysdate, 'dd/mm/yyyy hh24:mi:ss'));
                END IF;

            END IF;

            dbms_output.put_line('arquivo nao existe na pasta');
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END importar_precos_aurora;


    /*
    * Obtem o preco de compra da tabela aurora, ja com o desconto se houver. 
    * Tem tratativa para considerar estoque da filial 1 na 3
    */
    FUNCTION obter_preco_compra_aurora (
        p_codfilial NUMBER,
        p_codprod   NUMBER
    ) RETURN NUMBER AS
        v_preco_compra NUMBER DEFAULT NULL;
        v_exist        NUMBER DEFAULT 0;
        laur           __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem%rowtype;
    BEGIN
        v_exist := 0;
        SELECT
            COUNT(1)
            INTO v_exist
        FROM
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem
        WHERE
            codfilialorigem = 
                CASE
                    WHEN p_codfilial = 3 THEN
                        1
                    ELSE
                        p_codfilial
                END
            AND nvl(codprod_erp,codprodorigem) = p_codprod;

        IF ( v_exist > 0 ) THEN
            SELECT
                *
                INTO laur
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem
            WHERE
                codfilialorigem = 
                    CASE
                        WHEN p_codfilial = 3 THEN
                            1
                        ELSE
                            p_codfilial
                    END
                AND nvl(codprod_erp,codprodorigem) = p_codprod;

            CASE
                WHEN nvl(laur.percdescpcompra2, 0) > 0 THEN
                    if laur.percdescpcompra2 between 0 and 0.18 then
                        v_preco_compra := laur.pcompra1 * ( 1 - laur.percdescpcompra2 );
                    elsif laur.percdescpcompra2 > 100 then
                        v_preco_compra := laur.pcompra1 * ( 1 - ( laur.percdescpcompra2 / 10000 ) );
                    else
                        v_preco_compra := laur.pcompra1 * ( 1 - ( laur.percdescpcompra2 / 100 ) );
                    end if;                    
                ELSE
                    v_preco_compra := laur.pcompra1;
            END CASE;

        END IF;

        RETURN v_preco_compra;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'codfilial: '
                                                        || p_codfilial
                                                        || ' codprod: '
                                                        || p_codprod, p_linha => $$plsql_line);

            RETURN NULL;
    END obter_preco_compra_aurora;

    /**
    * Copia os custos dos produtos de uma filial para outra, utilizado no processo
    * de filial retira para atualizar os custos na filial destino
    */
    PROCEDURE copiar_custos_filial (
        p_codfilialorigem  NUMBER,
        p_codfilialdestino NUMBER,
        p_codprod          NUMBER DEFAULT NULL
    ) AS
        v_existe NUMBER DEFAULT 0;
    BEGIN
        FOR li IN (
            SELECT
                *
            FROM
                jumbo.pcest
            WHERE
                    codfilial = p_codfilialorigem
                AND nvl(p_codprod, codprod) = codprod
            ORDER BY
                codprod
        ) LOOP
            BEGIN
                v_existe := 0;
                SELECT
                    COUNT(1)
                INTO v_existe
                FROM
                    jumbo.pcest
                WHERE
                        codfilial = p_codfilialdestino
                    AND codprod = li.codprod;

                IF v_existe > 0 THEN
                    BEGIN
                        UPDATE jumbo.pcest
                        SET
                            custofin = li.custofin,
                            custoreal = li.custoreal,
                            custorep = li.custorep,
                            custoultent = li.custoultent,
                            valorultent = li.valorultent,
                            custoultentfin = li.custoultentfin,
                            vlultentcontsemst = li.vlultentcontsemst,
                            stbcr = li.stbcr,
                            basebcr = li.basebcr,
                            custonfsemst = li.custonfsemst,
                            custorealsemst = li.custorealsemst,
                            baseicmsultent = li.baseicmsultent,
                            --custocont = li.custocont, erro no contabil, comentado em 17/12/2021, verificar se resolve
                            numfci = li.numfci,
                            percconteudoimpfci = li.percconteudoimpfci,
                            percredbaseefet = li.percredbaseefet,
                            vlbaseefet = li.vlbaseefet,
                            percicmsefet = li.percicmsefet,
                            vlicmsefet = li.vlicmsefet,
                            aliqicms1 = li.aliqicms1,
                            vlbcfcpstret = li.vlbcfcpstret,
                            perfcpstret = li.perfcpstret,
                            vlfcpstret = li.vlfcpstret,
                            baseicmsbcr = li.baseicmsbcr,
                            vlicmsbcr = li.vlicmsbcr,
                            custofinsemst = li.custofinsemst,
                            custorealliq = li.custorealliq,
                            custoultentsemst = li.custoultentsemst,
                            custoultentfinsemst = li.custoultentfinsemst,
                            custoultentliq = li.custoultentliq
                        WHERE
                                codprod = li.codprod
                            AND codfilial = p_codfilialdestino;

                        COMMIT;
                    EXCEPTION
                        WHEN OTHERS THEN
                            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'codfilial: '
                                                                        || p_codfilialdestino
                                                                        || ' codprod: '
                                                                        || li.codprod, p_linha => $$plsql_line);

                            NULL;
                    END;
                ELSE
                    BEGIN
                        INSERT INTO jumbo.pcest (
                            codprod,
                            codfilial,
                            custofin,
                            custoreal,
                            custorep,
                            custoultent,
                            valorultent,
                            custoultentfin,
                            vlultentcontsemst,
                            stbcr,
                            basebcr,
                            custonfsemst,
                            custorealsemst,
                            baseicmsultent,
                            custocont,
                            numfci,
                            percconteudoimpfci,
                            percredbaseefet,
                            vlbaseefet,
                            percicmsefet,
                            vlicmsefet,
                            aliqicms1,
                            vlbcfcpstret,
                            perfcpstret,
                            vlfcpstret,
                            baseicmsbcr,
                            vlicmsbcr,
                            custofinsemst,
                            custorealliq,
                            custoultentsemst,
                            custoultentfinsemst,
                            custoultentliq
                        ) VALUES (
                            li.codprod,
                            p_codfilialdestino,
                            li.custofin,
                            li.custoreal,
                            li.custorep,
                            li.custoultent,
                            li.valorultent,
                            li.custoultentfin,
                            li.vlultentcontsemst,
                            li.stbcr,
                            li.basebcr,
                            li.custonfsemst,
                            li.custorealsemst,
                            li.baseicmsultent,
                            li.custocont,
                            li.numfci,
                            li.percconteudoimpfci,
                            li.percredbaseefet,
                            li.vlbaseefet,
                            li.percicmsefet,
                            li.vlicmsefet,
                            li.aliqicms1,
                            li.vlbcfcpstret,
                            li.perfcpstret,
                            li.vlfcpstret,
                            li.baseicmsbcr,
                            li.vlicmsbcr,
                            li.custofinsemst,
                            li.custorealliq,
                            li.custoultentsemst,
                            li.custoultentfinsemst,
                            li.custoultentliq
                        );

                        COMMIT;
                    EXCEPTION
                        WHEN OTHERS THEN
                            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(
                                p_vlrs => 'codfilial: '
                                        || p_codfilialdestino
                                        || ' codprod: '
                                        || li.codprod, p_linha => $$plsql_line
                                );
                            NULL;
                    END;
                END IF;

            EXCEPTION
                WHEN OTHERS THEN
                    __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(
                        p_vlrs => 'codfilial: '
                                || p_codfilialdestino
                                || ' codprod: '
                                || li.codprod, p_linha => $$plsql_line
                        );
                    NULL;
            END;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'codfilial: ' || p_codfilialdestino, p_linha => $$plsql_line);
            NULL;
    END copiar_custos_filial;

    /**
    * obtem o registro da tabela pctabtrib conforme parametros
    */
    FUNCTION obter_vinculo_tribsaida (
        p_codfilialorigem NUMBER,
        p_codprod         NUMBER,
        p_ufdestino       VARCHAR2
    ) RETURN jumbo.pctabtrib%rowtype IS
        v_existe  NUMBER DEFAULT 0;
        v_retorno jumbo.pctabtrib%rowtype default NULL;
    BEGIN
        v_existe := 0;
        SELECT
            COUNT(1)
            INTO v_existe
        FROM
            jumbo.pctabtrib tb
        WHERE
                tb.codfilialnf = p_codfilialorigem
            AND tb.codprod = p_codprod
            AND tb.ufdestino = p_ufdestino;

        IF v_existe > 0 THEN
            SELECT
                tb.*
                INTO v_retorno
            FROM
                jumbo.pctabtrib tb
            WHERE
                    tb.codfilialnf = p_codfilialorigem
                AND tb.codprod = p_codprod
                AND tb.ufdestino = p_ufdestino;

        END IF;

        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(
                p_vlrs => 'codfilial: '
                        || p_codfilialorigem
                        || ' codprod: '
                        || p_codprod
                        || ' ufdestino: '
                        || p_ufdestino, p_linha => $$plsql_line
                );
            RETURN NULL;
    END obter_vinculo_tribsaida;

    /**
    * obtem o registro da tabela pctribut conforme parametros
    */
    FUNCTION obter_tribsaida (
        p_codfilialorigem NUMBER,
        p_codprod         NUMBER,
        p_ufdestino       VARCHAR2
    ) RETURN jumbo.pctribut%rowtype IS
        v_existe            NUMBER DEFAULT 0;
        v_vinculo_tribsaida jumbo.pctabtrib%rowtype default NULL;
        v_retorno           jumbo.pctribut%rowtype default NULL;
    BEGIN
        v_vinculo_tribsaida := NULL;
        v_vinculo_tribsaida.codfilialnf := NULL;
        v_vinculo_tribsaida := obter_vinculo_tribsaida(p_codfilialorigem, p_codprod, p_ufdestino);
        IF v_vinculo_tribsaida.codfilialnf IS NOT NULL THEN
            v_existe := 0;
            SELECT
                COUNT(1)
                INTO v_existe
            FROM
                jumbo.pctribut tb
            WHERE
                tb.codst = v_vinculo_tribsaida.codst;

            IF v_existe > 0 THEN
                SELECT
                    tb.*
                    INTO v_retorno
                FROM
                    jumbo.pctribut tb
                WHERE
                    tb.codst = v_vinculo_tribsaida.codst;

            END IF;

        END IF;

        RETURN v_retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(
                p_vlrs => 'codfilial: '
                        || p_codfilialorigem
                        || ' codprod: '
                        || p_codprod
                        || ' ufdestino: '
                        || p_ufdestino, p_linha => $$plsql_line
                );

            RETURN NULL;
    END obter_tribsaida;

    /**
    * Obtem os custos de um produto do sistema conforme parametros
    */
    FUNCTION obter_custos (
        vp_codfilial         NUMBER,
        vp_codprod           NUMBER,
        vp_vlentrada         NUMBER,
        vp_percdescent       NUMBER DEFAULT 0,
        vp_qtent             NUMBER DEFAULT NULL,
        p_considerar_estoque BOOLEAN DEFAULT true
    ) RETURN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_log%rowtype AS
        v_dtvenc             DATE default NULL;
        v_dtlanc             DATE default NULL;
        v_prazomedio         NUMBER DEFAULT 0;
        v_dtproxatu          DATE default NULL;
        v_numdias            NUMBER DEFAULT 0;
        param_contx          NUMBER DEFAULT 0;
        produto              jumbo.pcprodut%rowtype default NULL;
        fornec               jumbo.pcfornec%rowtype default NULL;
        tribent              jumbo.pctribentrada%rowtype default NULL;
        figtribent           jumbo.pctribfigura%rowtype default NULL;
        vinc_tribsaida       jumbo.pctabtrib%rowtype default NULL;
        tribsaida            jumbo.pctribut%rowtype default NULL;
        vinc_tribsaida_venda jumbo.pctabtrib%rowtype default NULL;
        tribsaida_venda      jumbo.pctribut%rowtype default NULL;
        tribpiscofins        jumbo.pctribpiscofins%rowtype default NULL;
        tribpiscofins_venda  jumbo.pctribpiscofins%rowtype default NULL;
        lg                   __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_log%rowtype;
        v_existe             INTEGER DEFAULT 0;
    BEGIN
        v_existe := 0;
        lg := NULL;
        lg.codprod := NULL;
        v_existe := 0;
        SELECT
            COUNT(1)
            INTO v_existe
        FROM
            jumbo.pcest
        WHERE
                codfilial = vp_codfilial
            AND codprod = vp_codprod;

        IF v_existe > 0 THEN
            SELECT
                custofin,
                custoreal
                INTO
                    lg.custofinatualest,
                    lg.custorealatualest
            FROM
                jumbo.pcest
            WHERE
                    codfilial = vp_codfilial
                AND codprod = vp_codprod;

        END IF;

        v_existe := 0;
        SELECT
            COUNT(1)
            INTO v_existe
        FROM
            jumbo.pcprodut
        WHERE
            pcprodut.codprod = vp_codprod;

        IF v_existe > 0 THEN
            SELECT
                pcprodut.*
                INTO produto
            FROM
                jumbo.pcprodut
            WHERE
                pcprodut.codprod = vp_codprod;

            v_existe := 0;
            SELECT
                COUNT(1)
                INTO v_existe
            FROM
                jumbo.pcfornec
            WHERE
                pcfornec.codfornec = produto.codfornec;

            IF v_existe > 0 THEN
                SELECT
                    pcfornec.*
                    INTO fornec
                FROM
                    jumbo.pcfornec
                WHERE
                    pcfornec.codfornec = produto.codfornec;

                v_existe := 0;
                SELECT
                    COUNT(1)
                    INTO v_existe
                FROM
                    jumbo.pcest
                WHERE
                        pcest.codfilial = CASE
                                                WHEN vp_codfilial = 3 THEN
                                                    1
                                                ELSE
                                                    vp_codfilial
                                            END
                    AND pcest.codprod = vp_codprod;

                IF v_existe > 0 THEN
                    SELECT
                        CASE
                            WHEN vp_codfilial IN ( 1, 3 ) THEN
                                (
                                    SELECT
                                        SUM(nvl(e2.qtest, 0))
                                    FROM
                                        jumbo.pcest e2
                                    WHERE
                                        e2.codfilial IN ( 1, 3 )
                                        AND e2.codprod = e1.codprod
                                )
                            ELSE
                                nvl(e1.qtest, 0)
                        END
                    INTO lg.qtest
                    FROM
                        jumbo.pcest e1
                    WHERE
                            e1.codfilial = CASE
                                                WHEN vp_codfilial = 3 THEN
                                                    1
                                                ELSE
                                                    vp_codfilial
                                            END
                        AND e1.codprod = vp_codprod;

                    SELECT
                        sysdate + 7,
                        sysdate
                    INTO
                        v_dtvenc,
                        v_dtlanc
                    FROM
                        dual;

                    v_prazomedio := v_dtvenc - v_dtlanc;
                    SELECT
                        to_date(to_char(to_date(valor, 'dd/mm/yyyy HH24:MI:SS'), 'dd/mm/yyyy'), 'dd/mm/yyyy')
                    INTO v_dtproxatu
                    FROM
                        jumbo.pcparamfilial
                    WHERE
                            nome = 'CON_DTPROXATU'
                        AND codfilial = 99;

                    v_numdias := v_prazomedio - ( v_dtproxatu - trunc(sysdate) );
                    SELECT
                        valor
                    INTO param_contx
                    FROM
                        jumbo.pcparamfilial
                    WHERE
                            nome = 'CON_TX'
                        AND codfilial = 99;

                    v_existe := 0;
                    SELECT
                        COUNT(1)
                    INTO v_existe
                    FROM
                        jumbo.pctribentrada
                    WHERE
                            pctribentrada.codfilial = CASE
                                                            WHEN vp_codfilial = 3 THEN
                                                                1
                                                            ELSE
                                                                vp_codfilial
                                                        END
                        AND pctribentrada.ncm = produto.codncmex
                        AND pctribentrada.uforigem = fornec.estado
                        AND pctribentrada.tipofornec = fornec.tipofornec
                        AND ROWNUM <= 1;
                    /*filial 3 so recebe produtos por transferencia, utilizando assim a tributacao de saida como entrada*/


                    IF v_existe > 0 /*AND vp_codfilial <> 3*/ THEN
                        SELECT
                            pctribentrada.*
                        INTO tribent
                        FROM
                            jumbo.pctribentrada
                        WHERE
                                pctribentrada.codfilial = CASE
                                                                WHEN vp_codfilial = 3 THEN
                                                                    1
                                                                ELSE
                                                                    vp_codfilial
                                                            END
                            AND pctribentrada.ncm = produto.codncmex
                            AND pctribentrada.uforigem = fornec.estado
                            AND pctribentrada.tipofornec = fornec.tipofornec
                            AND ROWNUM <= 1;

                        SELECT
                            pctribfigura.*
                        INTO figtribent
                        FROM
                            jumbo.pctribfigura
                        WHERE
                            pctribfigura.codfigura = tribent.codfigura;

                        lg.codfilial := vp_codfilial;
                        lg.codprod := vp_codprod;
                        lg.ncm := produto.codncmex;
                        lg.codfornec := fornec.codfornec;
                        lg.tipofornec := fornec.tipofornec;
                        lg.uforigem := fornec.estado;
                        lg.indiceatest := power(nvl(param_contx, 1), nvl(v_numdias, 1));

                        lg.precoentrada := nvl(vp_vlentrada, 0);
                        lg.percdescentrada := nvl(vp_percdescent, 0);
                        IF ( nvl(lg.percdescentrada, 0) > 0 ) THEN
                            lg.precoliqentrada := nvl(lg.precoentrada, 0) - ( nvl(lg.precoentrada, 0) * nvl(lg.percdescentrada, 0) / 100 );
                        ELSE
                            lg.precoliqentrada := nvl(lg.precoentrada, 0);
                        END IF;

                        lg.codfigtribent := tribent.codfigura;
                        lg.percicmsent := nvl(figtribent.percicm, 0);
                        lg.percicmsdiferidoent := nvl(figtribent.percdescicmsdif, 0);
                        lg.perccredicms := nvl(figtribent.percredicms, 0);
                        lg.percpisent := nvl(figtribent.perpis, 0);
                        lg.perccofinsent := nvl(figtribent.percofins, 0);
                        lg.peripient := nvl(figtribent.peripi, 0);
                        lg.perccredicmpresumidoent := nvl(figtribent.perccredicmpresumido, 0);
                        lg.percsuframaent := nvl(figtribent.percsuframa, 0);
                        lg.percbaseredent := nvl(figtribent.percbaseredent, 0);
                        lg.percaliqextent := nvl(figtribent.percaliqext, 0);
                        lg.percivaent := nvl(figtribent.perciva, 0);
                        lg.percredbaseivaent := nvl(figtribent.redbaseiva, 0);
                        lg.percaliqintent := nvl(figtribent.percaliqint, 0);
                        lg.percredbasealiqextent := nvl(figtribent.redbasealiqext, 0);
                        lg.vlbaseicmsent := nvl(lg.precoliqentrada, 0) * ( 1 - ( CASE
                            WHEN nvl(lg.percbaseredent, 0) = 100 THEN
                                0
                            ELSE nvl(lg.percbaseredent, 0)
                        END / 100 ) );

                        lg.vlicmsent := nvl(lg.vlbaseicmsent, 0) * nvl(lg.percicmsent, 0) / 100;

                        lg.vlicmsdiferidoent := nvl(lg.vlicmsent, 0) * nvl(lg.percicmsdiferidoent, 0) / 100;

                        lg.vlicmsent := lg.vlicmsent - lg.vlicmsdiferidoent;
                        lg.vlcredicms := nvl(lg.vlbaseicmsent, 0) * nvl(figtribent.percredicms, 0) / 100;

                        lg.vlcredicms := lg.vlcredicms - ( nvl(lg.vlcredicms, 0) * nvl(lg.percicmsdiferidoent, 0) / 100 );

                        lg.vlcredpisent := nvl(lg.precoliqentrada, 0) * nvl(lg.percpisent, 0) / 100;

                        lg.vlcredcofinsent := nvl(lg.precoliqentrada, 0) * nvl(lg.perccofinsent, 0) / 100;

                        lg.vlcredpresumido := nvl(lg.precoliqentrada, 0) * nvl(figtribent.perccredicmpresumido, 0) / 100;

                        lg.vlcredsuframa := nvl(lg.precoliqentrada, 0) * nvl(figtribent.percsuframa, 0) / 100;

                        lg.vlbasestent := nvl(lg.precoliqentrada, 0) * ( 1 - ( nvl(figtribent.percbaseredent, 0) / 100 ) );

                        lg.vlicmsproprio := nvl(lg.vlbasestent, 0) * nvl(figtribent.percaliqext, 0) / 100;

                        lg.vlicmsivaent := nvl(lg.precoliqentrada, 0) + ( nvl(lg.precoliqentrada, 0) * nvl(figtribent.perciva, 0) / 100 );

                        IF nvl(lg.percbaseredent, 0) = 0 THEN
                            lg.percbaseredent := 100;
                        END IF;

                        calcular_st_entrada(p_precovendasemst => lg.precoliqentrada, p_ipi => nvl(lg.precoliqentrada, 0) * nvl(lg.peripient, 0), p_aliqint => lg.percaliqintent, p_aliqext => lg.percaliqextent, p_iva => lg.percivaent, p_baseredst => lg.percredbaseivaent,
                                            p_redbasealiqext => lg.percredbasealiqextent, pv_basest => lg.vlbasestent, pv_vlst => lg.vlicmsstent);

                        lg.vlicmsretencao := nvl(lg.vlicmsstent, 0) - nvl(lg.vlicmsproprio, 0);

                        IF nvl(lg.vlicmsstent, 0) > 0 THEN
                            lg.vlcredicms := 0;
                        END IF;

                        lg.vlentrada := nvl(lg.precoliqentrada, 0) + ( nvl(lg.precoliqentrada, 0) * nvl(figtribent.peripi, 0) ) + nvl(lg.vlicmsstent, 0);

                        lg.vlcredpisent := nvl(lg.vlentrada, 0) * nvl(lg.percpisent, 0) / 100;

                        lg.vlcredcofinsent := nvl(lg.vlentrada, 0) * nvl(lg.perccofinsent, 0) / 100;

                        lg.custoentrada := nvl(lg.vlentrada, 0) - nvl(lg.vlcredicms, 0) - nvl(lg.vlcredpisent, 0) - nvl(lg.vlcredcofinsent, 0) - nvl(lg.vlcredpresumido, 0) - nvl(lg.vlcredsuframa, 0);

                        lg.basecustofinancent := nvl(lg.custoentrada, 0) / nvl(lg.indiceatest, 1);

                        IF ( vp_qtent IS NULL OR nvl(vp_qtent, 0) = 0 ) THEN
                            SELECT
                                decode(SUM(nvl(nvl(qt, qtcont), 0)), 0, 1, NULL, 1,
                                        SUM(nvl(nvl(qt, qtcont), 0)))
                            INTO lg.qtentmedia
                            FROM
                                jumbo.pcmov
                            WHERE
                                dtmov BETWEEN add_months(trunc(sysdate), - 1) AND add_months(trunc(sysdate), - 1) + 15
                                AND codoper = 'E'
                                AND codfilial = CASE
                                                    WHEN vp_codfilial = 3 THEN
                                                        1
                                                    ELSE
                                                        vp_codfilial
                                                END
                                AND codprod = vp_codprod;

                        ELSE
                            lg.qtentmedia := nvl(vp_qtent, 0);
                        END IF;

                        IF ( nvl(lg.qtentmedia, 0) <= 0 ) THEN
                            lg.qtentmedia := 1;
                        END IF;

                        IF ( nvl(lg.qtest, 0) <= 0 ) THEN
                            lg.qtest := 0;
                        END IF;

                        IF ( p_considerar_estoque = true ) THEN
                            lg.custofinanceironovo := ( ( nvl(lg.qtest, 0) * nvl(lg.custofinatualest, 0) ) + ( nvl(lg.qtentmedia, 1) * nvl(lg.basecustofinancent, 0) ) ) / ( nvl(lg.qtest, 0) + nvl(lg.qtentmedia, 1) );

                            lg.custorealnovo := ( ( nvl(lg.qtest, 0) * nvl(lg.custorealatualest, 0) ) + ( nvl(lg.qtentmedia, 1) * nvl(lg.custoentrada, 0) ) ) / ( nvl(lg.qtest, 0) + nvl(lg.qtentmedia, 1) );

                        END IF;

                        lg.maiorcustorealultent := greatest(nvl(lg.custorealnovo, 0), nvl(lg.custoentrada, 0));

                        lg.datacalc := to_date(to_char(sysdate, 'dd/mm/yyyy HH24:mi:ss'), 'dd/mm/yyyy HH24:mi:ss');
                        INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_log VALUES lg;

                        IF ( inserting ) OR ( updating ) OR ( deleting ) THEN
                            NULL;
                        ELSE
                            COMMIT;
                        END IF;

                    END IF;

                END IF;

            END IF;

        END IF;

        RETURN lg;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm || dbms_utility.format_error_backtrace);
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'codfilial: '
                                                        || vp_codfilial
                                                        || ' codprod: '
                                                        || vp_codprod
                                                        || ' vlentrada: '
                                                        || vp_vlentrada
                                                        || ' percdescent: '
                                                        || vp_percdescent, p_linha => $$plsql_line);

            NULL;
            RETURN NULL;
    END obter_custos;

    FUNCTION calcular_basest (
        codprod         NUMBER,
        pvenda          NUMBER,
        aliqicms1       NUMBER,
        aliqicms2       NUMBER,
        ipi             NUMBER,
        iva             NUMBER,
        percredbasecalc NUMBER
    ) RETURN NUMBER AS

        retorno      NUMBER default NULL;
        formula      VARCHAR2(4000);
        variaveis    VARCHAR2(4000);
        retorno_calc VARCHAR2(4000);
    BEGIN
        retorno := NULL;
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkgexpalg', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            formula := 'baseicst=(pvenda-(((baseicst*aliqicms1/100)-(pvenda*aliqicms2/100))/(1-(aliqicms2/100)))+ipi)*(1+(iva/100))*(percredbasecalc/100)';
            variaveis := 'pvenda=' || pvenda;
            variaveis := variaveis
                            || ';aliqicms1='
                            || aliqicms1
                            || ';aliqicms2='
                            || aliqicms2
                            || ';ipi='
                            || ipi
                            || ';iva='
                            || iva
                            || ';percredbasecalc='
                            || percredbasecalc;

            retorno_calc := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkgexpalg.resolver_expressao_algebrica(formula, variaveis);
            retorno := substr(retorno_calc, instr(retorno_calc, '=') + 1);
        END IF;

        RETURN retorno;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'codprod: '
                                                        || codprod
                                                        || ' pvenda: '
                                                        || pvenda
                                                        || ' aliqicms1: '
                                                        || aliqicms1
                                                        || ' aliqicms2: '
                                                        || aliqicms2
                                                        || ' ipi: '
                                                        || ipi
                                                        || ' iva: '
                                                        || iva
                                                        || ' percredbasecalc: '
                                                        || percredbasecalc, p_linha => $$plsql_line);

            RETURN NULL;
    END calcular_basest;

    FUNCTION obter_linha_reg___FNV_GET_PREFIXOBJECTSDB__tabpr_aur (
        p_codfilial NUMBER,
        p_codprod   NUMBER
    ) RETURN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem%rowtype AS
        v_ret    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem%rowtype default NULL;
        v_existe NUMBER DEFAULT 0;
    BEGIN
        v_existe := 0;
        SELECT
            COUNT(1)
            INTO v_existe
        FROM
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem
        WHERE
                codfilialorigem = CASE
                                        WHEN p_codfilial = 3 THEN
                                            1
                                        ELSE
                                            p_codfilial
                                    END
            AND nvl(codprod_erp,codprodorigem) = p_codprod;

        IF ( v_existe > 0 ) THEN
            SELECT
                *
            INTO v_ret
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem
            WHERE
                    codfilialorigem = CASE
                                            WHEN p_codfilial = 3 THEN
                                                1
                                            ELSE
                                                p_codfilial
                                        END
                AND nvl(codprod_erp,codprodorigem) = p_codprod;

        END IF;

        RETURN v_ret;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => substr(sqlerrm
                                                            || ' '
                                                            || dbms_utility.format_error_backtrace, 1, 4000), p_linha => $$plsql_line);

            RETURN NULL;
    END obter_linha_reg___FNV_GET_PREFIXOBJECTSDB__tabpr_aur;

    PROCEDURE calcular_st_entrada (
        p_precovendasemst NUMBER,
        p_ipi             NUMBER,
        p_aliqint         NUMBER,
        p_aliqext         NUMBER,
        p_iva             NUMBER,
        p_baseredst       NUMBER,
        p_redbasealiqext  NUMBER,
        pv_basest         IN OUT NUMBER,
        pv_vlst           IN OUT NUMBER
    ) IS
        v_baseicms_venda NUMBER;
        v_vlicms_venda   NUMBER;
        v_redbaseiva     NUMBER;
        v_redbasealiqext NUMBER;
    BEGIN       
        /*p_baseredst = se for 0 ou nulo, usa 100 no calculo, se for maior que zero, usa a reducao*/
        v_redbaseiva := p_baseredst;
        IF nvl(v_redbaseiva, 0) = 0 THEN
            v_redbaseiva := 100;
        END IF;
        pv_basest := ( p_precovendasemst + p_ipi ) * ( v_redbaseiva / 100 ) * ( 1 + ( p_iva / 100 ) );

        pv_vlst := pv_basest * ( p_aliqint / 100 );
        v_redbasealiqext := p_redbasealiqext;
        IF nvl(v_redbasealiqext, 0) = 0 THEN
            v_redbasealiqext := 100;
        END IF;
        v_baseicms_venda := ( p_precovendasemst + p_ipi ) * ( v_redbasealiqext / 100 );
        v_vlicms_venda := v_baseicms_venda * ( p_aliqext / 100 );
        pv_vlst := pv_vlst - v_vlicms_venda;
        IF nvl(pv_vlst, 0) <= 0 THEN
            pv_vlst := 0;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => substr(sqlerrm
                                                            || ' '
                                                            || dbms_utility.format_error_backtrace, 1, 4000), p_linha => $$plsql_line);
    END calcular_st_entrada; 

    PROCEDURE calcular_e_atribuir_st_saida (
        pv_precolog IN OUT __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr%rowtype
    ) AS
        v_existe          NUMBER DEFAULT 0;
        v_codauxiliarprod NUMBER;
    BEGIN
        /*encontra um cliente vinculado a regiao para fazer o calculo utilizando a pkg_tributacao do winthor*/
        v_existe := 0;
        SELECT
            COUNT(1)
        INTO v_existe
        FROM
                    jumbo.pcclient c
            JOIN jumbo.pcregiao r ON ( r.numregiao = c.numregiaocli
                                        AND r.uf = c.estent
                                        AND r.uf = c.estcom
                                        AND r.uf = c.estcob
                                        AND r.codfilial = c.codfilialnf
                                        AND 1 = CASE
                WHEN r.numregiao IN ( 1, 3, 4, 5, 7,
                                        8, 10, 12, 30 )
                        AND c.tipofj = 'J' THEN
                    1
                WHEN r.numregiao NOT IN ( 1, 3, 4, 5, 7,
                                            8, 10, 12, 30 )
                        AND c.tipofj = 'F' THEN
                    1
                ELSE
                    0
                                                END )
        WHERE
            c.dtexclusao IS NULL
            AND c.codfilialnf = pv_precolog.codfilial
            AND c.numregiaocli = pv_precolog.numregiao
            AND ROWNUM <= 1;

        pv_precolog.codclicalc := NULL;
        IF v_existe > 0 THEN
            SELECT
                c.codcli
            INTO pv_precolog.codclicalc
            FROM
                        jumbo.pcclient c
                JOIN jumbo.pcregiao r ON ( r.numregiao = c.numregiaocli
                                            AND r.uf = c.estent
                                            AND r.uf = c.estcom
                                            AND r.uf = c.estcob
                                            AND r.codfilial = c.codfilialnf
                                            AND 1 = CASE
                    WHEN r.numregiao IN ( 1, 3, 4, 5, 7,
                                            8, 10, 12, 30 )
                            AND c.tipofj = 'J' THEN
                        1
                    WHEN r.numregiao NOT IN ( 1, 3, 4, 5, 7,
                                                8, 10, 12, 30 )
                            AND c.tipofj = 'F' THEN
                        1
                    ELSE
                        0
                                                    END )
            WHERE
                c.dtexclusao IS NULL
                AND c.codfilialnf = pv_precolog.codfilial
                AND c.numregiaocli = pv_precolog.numregiao
                AND ROWNUM <= 1;

            SELECT
                p.codauxiliar
            INTO v_codauxiliarprod
            FROM
                jumbo.pcprodut p
            WHERE
                p.codprod = pv_precolog.codprod;

            SELECT
                basest,
                st
            INTO
                pv_precolog.vlbasest,
                pv_precolog.vlst
            FROM
                TABLE ( jumbo.pkg_tributacao.calcular_st(pscodfilial => pv_precolog.codfilial, pscodfilialnf => pv_precolog.codfilial, pscodfilialretira => pv_precolog.codfilial, pcodcli => pv_precolog.codclicalc, pcodplpag => 1,
                                                        pcodprod => pv_precolog.codprod, pcodauxiliar => v_codauxiliarprod, pcondvenda => 1, psvendaexportacao => 'N', ppvenda => pv_precolog.precosugeridosemst,
                                                        pperdesconto => 0) );

            IF nvl(pv_precolog.vlst, 0) < 0 THEN
                pv_precolog.vlst := 0;
            END IF;

            pv_precolog.precosugerido := pv_precolog.precosugerido + nvl(pv_precolog.vlst, 0);
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'codprod: '
                                                        || pv_precolog.codprod
                                                        || ' numregiao: '
                                                        || pv_precolog.numregiao
                                                        || ' '
                                                        || substr(sqlerrm
                                                                || ' '
                                                                || dbms_utility.format_error_backtrace, 1, 4000), p_linha => $$plsql_line);

            NULL;
    END calcular_e_atribuir_st_saida;

    PROCEDURE aplicar_preco_tabela (
        lpr IN OUT __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr%rowtype
    ) AS
        PRAGMA autonomous_transaction;
        v_existe NUMBER DEFAULT 0;
    BEGIN
        UPDATE jumbo.pctabpr
        SET
            pctabpr.ptabela = lpr.precosugeridosemst,
            pctabpr.ptabela1 = lpr.precosugerido * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ),
            pctabpr.ptabela2 = lpr.precosugerido * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ),
            pctabpr.ptabela3 = lpr.precosugerido * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(
            replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ),
            pctabpr.ptabela4 = lpr.precosugerido * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(
            replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ),
            pctabpr.ptabela5 = lpr.precosugerido * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(
            replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA28'),
            '.', ',')) / 100 ) ),
            pctabpr.ptabela6 = lpr.precosugerido * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(
            replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA28'),
            '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA35'), '.', ',')) / 100 ) ),
            pctabpr.ptabela7 = lpr.precosugerido * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(
            replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA28'),
            '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA35'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA42'), '.', ',')) / 100 ) ),
            pctabpr.vlsttab = greatest(nvl(lpr.vlst, 0), 0),
            pctabpr.ptabelasemimposto1 = lpr.precosugeridosemst * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ),
            pctabpr.ptabelasemimposto2 = lpr.precosugeridosemst * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ),
            pctabpr.ptabelasemimposto3 = lpr.precosugeridosemst * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * (
            1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ),
            pctabpr.ptabelasemimposto4 = lpr.precosugeridosemst * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * (
            1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ),
            pctabpr.ptabelasemimposto5 = lpr.precosugeridosemst * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * (
            1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2(
            'CON_TAXA28'), '.', ',')) / 100 ) ),
            pctabpr.ptabelasemimposto6 = lpr.precosugeridosemst * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * (
            1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2(
            'CON_TAXA28'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA35'), '.', ',')) / 100 ) ),
            pctabpr.ptabelasemimposto7 = lpr.precosugeridosemst * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * (
            1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2(
            'CON_TAXA28'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA35'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA42'), '.', ',')) / 100 ) ),
            pctabpr.ptabelaatac = lpr.precosugeridosemst,
            pctabpr.ptabelaatac1 = lpr.precosugerido * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ),
            pctabpr.ptabelaatac2 = lpr.precosugerido * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ),
            pctabpr.ptabelaatac3 = lpr.precosugerido * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(
            replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ),
            pctabpr.ptabelaatac4 = lpr.precosugerido * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(
            replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ),
            pctabpr.ptabelaatac5 = lpr.precosugerido * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(
            replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA28'),
            '.', ',')) / 100 ) ),
            pctabpr.ptabelaatac6 = lpr.precosugerido * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(
            replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA28'),
            '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA35'), '.', ',')) / 100 ) ),
            pctabpr.ptabelaatac7 = lpr.precosugerido * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(
            replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA28'),
            '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA35'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA42'), '.', ',')) / 100 ) ),
            pctabpr.pvendaatacsemimposto1 = lpr.precosugeridosemst * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ),
            pctabpr.pvendaatacsemimposto2 = lpr.precosugeridosemst * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ),
            pctabpr.pvendaatacsemimposto3 = lpr.precosugeridosemst * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * (
            1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ),
            pctabpr.pvendaatacsemimposto4 = lpr.precosugeridosemst * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * (
            1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ),
            pctabpr.pvendaatacsemimposto5 = lpr.precosugeridosemst * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * (
            1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2(
            'CON_TAXA28'), '.', ',')) / 100 ) ),
            pctabpr.pvendaatacsemimposto6 = lpr.precosugeridosemst * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * (
            1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2(
            'CON_TAXA28'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA35'), '.', ',')) / 100 ) ),
            pctabpr.pvendaatacsemimposto7 = lpr.precosugeridosemst * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA0'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA7'), '.', ',')) / 100 ) ) * (
            1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA14'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA21'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2(
            'CON_TAXA28'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA35'), '.', ',')) / 100 ) ) * ( 1 + ( to_number(replace(jumbo.paramfilial.obtercomovarchar2('CON_TAXA42'), '.', ',')) / 100 ) ),
            dtultaltptabela = sysdate,
            dtultaltptabelafuturo =
                CASE
                    WHEN nvl(ptabela, 0) <> lpr.precosugerido THEN
                        trunc(sysdate)
                    ELSE
                        dtultaltptabelafuturo
                END,
            rotina = upper(TRIM('__FNV_GET_PREFIXOBJECTSDB__PKG_FUNCS_PRECIF')),
            matricula = 142,
            obs = substr(nvl(lpr.regraaplicada, obs), 1, 80),
            custoprecifictab = nvl(lpr.custoprecif, custoprecifictab)
        WHERE
                pctabpr.codprod = lpr.codprod
            AND pctabpr.numregiao = lpr.numregiao;

        COMMIT;
        /*atualiza o custo financeiro se for 0 ou nulo*/
        v_existe := 0;
        SELECT
            COUNT(1)
        INTO v_existe
        FROM
            jumbo.pcest
        WHERE
                pcest.codprod = lpr.codprod
            AND pcest.codfilial = lpr.codfilial
            AND nvl(pcest.custofin, 0) = 0;

        IF ( v_existe > 0 ) THEN
            UPDATE jumbo.pcest
            SET
                pcest.custofin = lpr.custofinanceiro
            WHERE
                    pcest.codprod = lpr.codprod
                AND pcest.codfilial = lpr.codfilial;

            COMMIT;
        END IF;
        /*atualiza o custo real se for 0 ou nulo*/


        v_existe := 0;
        SELECT
            COUNT(1)
        INTO v_existe
        FROM
            jumbo.pcest
        WHERE
                pcest.codprod = lpr.codprod
            AND pcest.codfilial = lpr.codfilial
            AND nvl(pcest.custoreal, 0) = 0;

        IF ( v_existe > 0 ) THEN
            UPDATE jumbo.pcest
            SET
                pcest.custoreal = lpr.custoreal
            WHERE
                    pcest.codprod = lpr.codprod
                AND pcest.codfilial = lpr.codfilial;

            COMMIT;
        END IF;
        /*atualiza o custo ult ent se for 0 ou nulo*/


        v_existe := 0;
        SELECT
            COUNT(1)
        INTO v_existe
        FROM
            jumbo.pcest
        WHERE
                pcest.codprod = lpr.codprod
            AND pcest.codfilial = lpr.codfilial
            AND nvl(pcest.custoultent, 0) = 0;

        IF ( v_existe > 0 ) THEN
            UPDATE jumbo.pcest
            SET
                pcest.custoultent = lpr.custoentrada
            WHERE
                    pcest.codprod = lpr.codprod
                AND pcest.codfilial = lpr.codfilial;

            COMMIT;
        END IF;
        /*atualiza o valor ult ent se for 0 ou nulo*/


        v_existe := 0;
        SELECT
            COUNT(1)
        INTO v_existe
        FROM
            jumbo.pcest
        WHERE
                pcest.codprod = lpr.codprod
            AND pcest.codfilial = lpr.codfilial
            AND nvl(pcest.valorultent, 0) = 0;

        IF ( v_existe > 0 ) THEN
            UPDATE jumbo.pcest
            SET
                pcest.valorultent = lpr.pcompra
            WHERE
                    pcest.codprod = lpr.codprod
                AND pcest.codfilial = lpr.codfilial;

            COMMIT;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'codprod: '
                                                        || lpr.codprod
                                                        || ' numregiao: '
                                                        || lpr.numregiao
                                                        || ' '
                                                        || substr(sqlerrm
                                                                || ' '
                                                                || dbms_utility.format_error_backtrace, 1, 4000), p_linha => $$plsql_line);
    END aplicar_preco_tabela;

    PROCEDURE aplicar_preco_venda_externa (
        p_codprod   NUMBER,
        p_numregiao NUMBER
    ) AS
        PRAGMA autonomous_transaction;
    BEGIN
        UPDATE jumbo.pctabpr
        SET
            pvenda = (
                CASE
                    WHEN ( nvl(ptabela, 0) <= 0 ) THEN
                        pvenda
                    ELSE
                        ptabela
                END
            ),
            pvenda1 = (
                CASE
                    WHEN ( nvl(ptabela1, 0) <= 0 ) THEN
                        pvenda1
                    ELSE
                        ptabela1
                END
            ),
            pvenda2 = (
                CASE
                    WHEN ( nvl(ptabela2, 0) <= 0 ) THEN
                        pvenda2
                    ELSE
                        ptabela2
                END
            ),
            pvenda3 = (
                CASE
                    WHEN ( nvl(ptabela3, 0) <= 0 ) THEN
                        pvenda3
                    ELSE
                        ptabela3
                END
            ),
            pvenda4 = (
                CASE
                    WHEN ( nvl(ptabela4, 0) <= 0 ) THEN
                        pvenda4
                    ELSE
                        ptabela4
                END
            ),
            pvenda5 = (
                CASE
                    WHEN ( nvl(ptabela5, 0) <= 0 ) THEN
                        pvenda5
                    ELSE
                        ptabela5
                END
            ),
            pvenda6 = (
                CASE
                    WHEN ( nvl(ptabela6, 0) <= 0 ) THEN
                        pvenda6
                    ELSE
                        ptabela6
                END
            ),
            pvenda7 = (
                CASE
                    WHEN ( nvl(ptabela7, 0) <= 0 ) THEN
                        pvenda7
                    ELSE
                        ptabela7
                END
            ),
            vlst = greatest(nvl(vlsttab, 0), 0),
            pvendasemimposto1 = (
                CASE
                    WHEN ( nvl(ptabelasemimposto1, 0) <= 0 ) THEN
                        pvendasemimposto1
                    ELSE
                        ptabelasemimposto1
                END
            ),
            pvendasemimposto2 = (
                CASE
                    WHEN ( nvl(ptabelasemimposto2, 0) <= 0 ) THEN
                        pvendasemimposto2
                    ELSE
                        ptabelasemimposto2
                END
            ),
            pvendasemimposto3 = (
                CASE
                    WHEN ( nvl(ptabelasemimposto3, 0) <= 0 ) THEN
                        pvendasemimposto3
                    ELSE
                        ptabelasemimposto3
                END
            ),
            pvendasemimposto4 = (
                CASE
                    WHEN ( nvl(ptabelasemimposto4, 0) <= 0 ) THEN
                        pvendasemimposto4
                    ELSE
                        ptabelasemimposto4
                END
            ),
            pvendasemimposto5 = (
                CASE
                    WHEN ( nvl(ptabelasemimposto5, 0) <= 0 ) THEN
                        pvendasemimposto5
                    ELSE
                        ptabelasemimposto5
                END
            ),
            pvendasemimposto6 = (
                CASE
                    WHEN ( nvl(ptabelasemimposto6, 0) <= 0 ) THEN
                        pvendasemimposto6
                    ELSE
                        ptabelasemimposto6
                END
            ),
            pvendasemimposto7 = (
                CASE
                    WHEN ( nvl(ptabelasemimposto7, 0) <= 0 ) THEN
                        pvendasemimposto7
                    ELSE
                        ptabelasemimposto7
                END
            ),
            pvendaatac = (
                CASE
                    WHEN ( nvl(ptabelaatac, 0) < 0 ) THEN
                        pvendaatac
                    ELSE
                        ptabelaatac
                END
            ),
            pvendaatac1 = (
                CASE
                    WHEN ( nvl(ptabelaatac1, 0) < 0 ) THEN
                        pvendaatac1
                    ELSE
                        ptabelaatac1
                END
            ),
            pvendaatac2 = (
                CASE
                    WHEN ( nvl(ptabelaatac2, 0) < 0 ) THEN
                        pvendaatac2
                    ELSE
                        ptabelaatac2
                END
            ),
            pvendaatac3 = (
                CASE
                    WHEN ( nvl(ptabelaatac3, 0) < 0 ) THEN
                        pvendaatac3
                    ELSE
                        ptabelaatac3
                END
            ),
            pvendaatac4 = (
                CASE
                    WHEN ( nvl(ptabelaatac4, 0) < 0 ) THEN
                        pvendaatac4
                    ELSE
                        ptabelaatac4
                END
            ),
            pvendaatac5 = (
                CASE
                    WHEN ( nvl(ptabelaatac5, 0) < 0 ) THEN
                        pvendaatac5
                    ELSE
                        ptabelaatac5
                END
            ),
            pvendaatac6 = (
                CASE
                    WHEN ( nvl(ptabelaatac6, 0) < 0 ) THEN
                        pvendaatac6
                    ELSE
                        ptabelaatac6
                END
            ),
            pvendaatac7 = (
                CASE
                    WHEN ( nvl(ptabelaatac7, 0) < 0 ) THEN
                        pvendaatac7
                    ELSE
                        ptabelaatac7
                END
            ),
            pvendaatacsemimposto1 = (
                CASE
                    WHEN ( nvl(ptabelaatacsemimposto1, 0) < 0 ) THEN
                        pvendaatacsemimposto1
                    ELSE
                        ptabelaatacsemimposto1
                END
            ),
            pvendaatacsemimposto2 = (
                CASE
                    WHEN ( nvl(ptabelaatacsemimposto2, 0) < 0 ) THEN
                        pvendaatacsemimposto2
                    ELSE
                        ptabelaatacsemimposto2
                END
            ),
            pvendaatacsemimposto3 = (
                CASE
                    WHEN ( nvl(ptabelaatacsemimposto3, 0) < 0 ) THEN
                        pvendaatacsemimposto3
                    ELSE
                        ptabelaatacsemimposto3
                END
            ),
            pvendaatacsemimposto4 = (
                CASE
                    WHEN ( nvl(ptabelaatacsemimposto4, 0) < 0 ) THEN
                        pvendaatacsemimposto4
                    ELSE
                        ptabelaatacsemimposto4
                END
            ),
            pvendaatacsemimposto5 = (
                CASE
                    WHEN ( nvl(ptabelaatacsemimposto5, 0) < 0 ) THEN
                        pvendaatacsemimposto5
                    ELSE
                        ptabelaatacsemimposto5
                END
            ),
            pvendaatacsemimposto6 = (
                CASE
                    WHEN ( nvl(ptabelaatacsemimposto6, 0) < 0 ) THEN
                        pvendaatacsemimposto6
                    ELSE
                        ptabelaatacsemimposto6
                END
            ),
            pvendaatacsemimposto7 = (
                CASE
                    WHEN ( nvl(ptabelaatacsemimposto7, 0) < 0 ) THEN
                        pvendaatacsemimposto7
                    ELSE
                        ptabelaatacsemimposto7
                END
            ),
            custoprecific = nvl(custoprecifictab, custoprecific),
            dtultaltpvenda = sysdate,
            dtultatupvenda = (
                CASE
                    WHEN nvl(pvenda, 0) <> nvl(ptabela, 0)
                            OR ( pctabpr.pvenda IS NULL ) THEN
                        sysdate
                    ELSE
                        dtultatupvenda
                END
            ),
            rotina = upper(TRIM('__FNV_GET_PREFIXOBJECTSDB__PKG_FUNCS_PRECIF.EXE')),
            matricula = 142,
            obs = substr(nvl(obs, ''), 1, 80)
        WHERE
                codprod = p_codprod
            AND numregiao = p_numregiao;

        COMMIT;
        NULL;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'codprod: '
                                                        || p_codprod
                                                        || ' numregiao: '
                                                        || p_numregiao
                                                        || ' '
                                                        || substr(sqlerrm
                                                                || ' '
                                                                || dbms_utility.format_error_backtrace, 1, 4000), p_linha => $$plsql_line);
    END aplicar_preco_venda_externa;

    PROCEDURE gravar___FNV_GET_PREFIXOBJECTSDB__tabpr_aur (
        pv_precolog    IN OUT __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr%rowtype,
        gravar_pctabpr BOOLEAN DEFAULT true
    ) AS

        v_preco_compra        NUMBER;
        lcalculocustos        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_log%rowtype;
        v_par_sugvenda        NUMBER;
        v_exist               NUMBER;
        v_precosugerido       NUMBER;
        v_indice              NUMBER;
        tribsaida             jumbo.pctribut%rowtype;
        v_resultado_baseicst  NUMBER;
        lprecoaurora          __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem%rowtype;
        v_qtent               NUMBER default NULL;
        atualizar_ptabela     BOOLEAN DEFAULT false;
        atualizar_pvenda      BOOLEAN DEFAULT false;
        v_casas_decimais_comp NUMBER DEFAULT 6;
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_casas_decimais_comp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao.como_numero(nvl(obter_config_precif('casas_decimais_comparacao_precos_atual_anterior'), 6));
        ELSE
            v_casas_decimais_comp := 4;
        END IF;
        /* obtem o preco de compra da tabela de precos da aurora: se for com desconto, ja vem o preco descontado;*/


        lprecoaurora := obter_linha_reg___FNV_GET_PREFIXOBJECTSDB__tabpr_aur(pv_precolog.codfilial, pv_precolog.codprod);
        v_preco_compra := obter_preco_compra_aurora(pv_precolog.codfilial, pv_precolog.codprod);
        if (nvl(v_preco_compra,0) > 0) then
            pv_precolog.pcompra1 := lprecoaurora.pcompra1;
            pv_precolog.pcompra2 := lprecoaurora.pcompra2;
            pv_precolog.pcompra3 := lprecoaurora.pcompra3;
            pv_precolog.pcompra4 := lprecoaurora.pcompra4;
            pv_precolog.pcompra5 := lprecoaurora.pcompra5;
            pv_precolog.pcompra6 := lprecoaurora.pcompra6;
            pv_precolog.pcompra7 := lprecoaurora.pcompra7;
            pv_precolog.pcompra8 := lprecoaurora.pcompra8;
            pv_precolog.percdescpcompra1 := lprecoaurora.percdescpcompra1;
            pv_precolog.percdescpcompra2 := lprecoaurora.percdescpcompra2;
            pv_precolog.percdescpcompra3 := lprecoaurora.percdescpcompra3;
            pv_precolog.percdescpcompra4 := lprecoaurora.percdescpcompra4;
            pv_precolog.percdescpcompra5 := lprecoaurora.percdescpcompra5;
            pv_precolog.percdescpcompra6 := lprecoaurora.percdescpcompra6;
            pv_precolog.percdescpcompra7 := lprecoaurora.percdescpcompra7;
            pv_precolog.percdescpcompra8 := lprecoaurora.percdescpcompra8;
            /*
            * obtem e efetua os calculos dos custos para esse valor de compra; a funcao grava um log dos calculos desses custos e os calcula 
            * conforme as tabelas de tributacao do winthor e parametros do winthor
            */
            v_qtent := NULL;
            IF ( nvl(pv_precolog.qtfaltaperiodoprev, 0) > 0 ) THEN
                v_qtent := pv_precolog.qtfaltaperiodoprev;
            END IF;
    
            BEGIN
                lcalculocustos := obter_custos(pv_precolog.codfilial, pv_precolog.codprod, v_preco_compra, NULL, v_qtent);
    
                v_exist := 0;
                SELECT
                    COUNT(1)
                    INTO v_exist
                FROM
                    jumbo.pcest e
                WHERE
                        e.codprod = pv_precolog.codprod
                    AND e.codfilial = CASE
                                            WHEN pv_precolog.codfilial = 3 THEN
                                                1
                                            ELSE
                                                pv_precolog.codfilial
                                        END
                    AND trunc(e.dtultent) >= trunc(to_date(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.primeiro_dia_semana(), 'dd/mm/yyyy'));
    
                IF ( v_exist > 0 ) THEN
                    /*
                        07/11/2019 - ignora o custo calculado manualmente pela procedure obter_custos e pega o custo calculado pelo winthor,
                        somente se ja entrou produto essa semana, senao mantem o calculo manual da procedure obter_custos
                    */
                    SELECT
                        nvl(e.custofin, lcalculocustos.custofinanceironovo),
                        nvl(e.custoreal, lcalculocustos.custorealnovo),
                        nvl(e.custoultent, lcalculocustos.custoentrada)
                    INTO
                        lcalculocustos.custofinanceironovo,
                        lcalculocustos.custorealnovo,
                        lcalculocustos.custoentrada
                    FROM
                        jumbo.pcest e
                    WHERE
                            e.codprod = pv_precolog.codprod
                        AND e.codfilial = CASE
                                                WHEN pv_precolog.codfilial = 3 THEN
                                                    1
                                                ELSE
                                                    pv_precolog.codfilial
                                            END;
    
                    lcalculocustos.maiorcustorealultent := greatest(nvl(lcalculocustos.custorealnovo, 0), nvl(lcalculocustos.custoentrada, 0));
    
                END IF;
    
            EXCEPTION
                WHEN OTHERS THEN
                    dbms_output.put_line(sqlerrm || dbms_utility.format_error_backtrace);
                    __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => pv_precolog.codprod
                                                                || ' '
                                                                || pv_precolog.codfilial, p_linha => $$plsql_line);
    
                    lcalculocustos.codprod := NULL;
                    NULL;
            END;
    
            IF nvl(lcalculocustos.codprod, 0) > 0 THEN
                SELECT
                    valor
                INTO v_par_sugvenda
                FROM
                    jumbo.pcparamfilial
                WHERE
                    nome = 'CON_SUGVENDA';
    
                FOR lpreco IN (
                    SELECT DISTINCT
                        pctabpr.codprod,
                        nvl(pcprodut.pcomrep1, 0)                                                                                                    pcomrep1,
                        est.codfilial,
                        nvl(est.valorultent, 0)                                                                                                      valorultent,
                        nvl(est.vlstultent, 0)                                                                                                       vlstultent,
                        pctabpr.numregiao,
                        nvl(pctabpr.ptabela, 0)                                                                                                      ptabela,
                        nvl(pctabpr.ptabela1, 0)                                                                                                     ptabela1,
                        nvl(pctabpr.pvenda, 0)                                                                                                       pvenda,
                        nvl(pctabpr.pvenda1, 0)                                                                                                      pvenda1,
                        nvl(pctabpr.margem, 0)                                                                                                       margem,
                        nvl(pctribut.codicmtab, 0)                                                                                                   codicmtab,
                        decode(nvl(pctribut.utilizarstfonteprecific, 'N'), 'S', nvl(pctribut.ivafonte, 0), nvl(pctribut.ivatab, 0))                  ivatab,
                        decode(nvl(pctribut.utilizarstfonteprecific, 'N'), 'S', nvl(pctribut.aliqicms1fonte, 0), nvl(pctribut.aliqicms1tab, 0))      aliqicms1tab,
                        decode(nvl(pctribut.utilizarstfonteprecific, 'N'), 'S', nvl(pctribut.aliqicms2fonte, 0), nvl(pctribut.aliqicms2tab, 0))      aliqicms2tab,
                        decode(nvl(pctribut.utilizarstfonteprecific, 'N'), 'S', nvl(pctribut.percbaseredstfonte, 0), nvl(pctribut.percbaseredst, 0)) percbaseredst,
                        nvl(pcprodut.percipivendatab, 0)                                                                                             percipivendatab,
                        nvl(pcregiao.uf, pcfilial.uf)                                                                                                uf_regicao,
                        nvl(pctabpr.vlultentmes, 0)                                                                                                  vlultentmes,
                        est.dtultent                                                                                                                 AS dtultent,
                        est.qtultent                                                                                                                 AS qtultent
                    FROM
                                jumbo.pctabpr
                        JOIN jumbo.pcprodut ON ( pcprodut.codprod = pctabpr.codprod )
                        JOIN jumbo.pcfornec ON ( pcfornec.codfornec = pcprodut.codfornec )
                        JOIN jumbo.pcregiao ON ( pctabpr.numregiao = pcregiao.numregiao )
                        JOIN jumbo.pcfilial ON ( pcfilial.codigo = pcregiao.codfilial )
                        JOIN jumbo.pcprodfilial ON ( pcprodfilial.codprod = pcprodut.codprod
                                                        AND pcprodfilial.codfilial = pcfilial.codigo )
                        JOIN jumbo.pcest est ON ( est.codprod = pcprodut.codprod
                                                    AND est.codfilial = pcfilial.codigo )
                        JOIN jumbo.pctabtrib ON ( pctabtrib.codfilialnf = pcfilial.codigo
                                                    AND pctabtrib.codprod = pcprodut.codprod
                                                    AND pctabtrib.ufdestino = pcregiao.uf )
                        JOIN jumbo.pctribut ON ( pctribut.codst = pctabtrib.codst )
                        JOIN jumbo.pcconsum ON ( 1 = 1 )
                    WHERE
                        ( ( pcregiao.status NOT IN ( 'I' ) )
                            OR ( pcregiao.status IS NULL ) )
                        AND pctabpr.codprod = pv_precolog.codprod
                        AND est.codfilial = pv_precolog.codfilial
                    ORDER BY
                        pctabpr.numregiao
                ) LOOP
                    BEGIN
                        pv_precolog.numregiao := lpreco.numregiao;
                        pv_precolog.percimpostoscmv := lpreco.codicmtab;
                        pv_precolog.perccomissao := lpreco.pcomrep1;
                        pv_precolog.percmargem := lpreco.margem;
                        pv_precolog.ptabelaant := lpreco.ptabela;
                        pv_precolog.ptabela1ant := lpreco.ptabela1;
                        pv_precolog.pvendaant := lpreco.pvenda;
                        pv_precolog.pvenda1ant := lpreco.pvenda1;
                        pv_precolog.pcompraant := lpreco.valorultent;
                        pv_precolog.dtultent := lpreco.dtultent;
                        pv_precolog.qtultent := lpreco.qtultent;
                        tribsaida := obter_tribsaida(lpreco.codfilial, lpreco.codprod, lpreco.uf_regicao);
                        pv_precolog.codst := tribsaida.codst;
                        v_indice := ( 100 - ( nvl(lpreco.codicmtab, 0) + nvl(lpreco.pcomrep1, 0) + nvl(lpreco.margem, 0) ) ) / 100;
    
                        v_precosugerido := 0;
                        CASE
                            WHEN v_par_sugvenda = 2 THEN /* custo financeiro*/
                                lcalculocustos.custoprecif := lcalculocustos.custofinanceironovo;
                            WHEN v_par_sugvenda = 8 THEN /*maior entre custo real e ultima entrada*/
                                lcalculocustos.custoprecif := lcalculocustos.maiorcustorealultent;
                            ELSE
                                raise_application_error(-20002, 'parametro sugestao de venda nao programado: '
                                                                    || pv_precolog.paramsugvenda
                                                                    || ' codprod: '
                                                                    || pv_precolog.codprod
                                                                    || ' codfilial: '
                                                                    || pv_precolog.codfilial);
                        END CASE;
    
                        v_precosugerido := lcalculocustos.custoprecif / v_indice;
                        pv_precolog.custoprecif := lcalculocustos.custoprecif;
                        v_precosugerido := trunc(v_precosugerido, 6);
                        pv_precolog.numregiao := lpreco.numregiao;
                        pv_precolog.pcompra := v_preco_compra;
                        pv_precolog.paramsugvenda := v_par_sugvenda;
                        pv_precolog.custofinanant := lcalculocustos.custofinatualest;
                        pv_precolog.custofinanceiro := lcalculocustos.custofinanceironovo;
                        pv_precolog.custorealant := lcalculocustos.custorealatualest;
                        pv_precolog.custoreal := lcalculocustos.custorealnovo;
                        pv_precolog.custoentrada := lcalculocustos.custoentrada;
                        pv_precolog.precosugerido := v_precosugerido;
                        pv_precolog.precosugeridosemst := v_precosugerido;
                        pv_precolog.vlimpostoscmv := pv_precolog.precosugerido * pv_precolog.percimpostoscmv / 100;
                        pv_precolog.vlcomissao := pv_precolog.precosugerido * pv_precolog.perccomissao / 100;
                        pv_precolog.vlmargem := pv_precolog.precosugerido * pv_precolog.percmargem / 100;
                        pv_precolog.vlcmv := pv_precolog.custofinanceiro + pv_precolog.vlimpostoscmv + pv_precolog.vlcomissao;
                        calcular_e_atribuir_st_saida(pv_precolog);
                        atualizar_ptabela := false;
                        atualizar_pvenda := false;
                        IF ( lower(trim(nvl(obter_config_precif('atualizar_pctabpr'), 'n'))) = 's' ) THEN
                            IF ( round(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) <> round(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                IF ( lower(trim(nvl(obter_config_precif('atualizar_pctabpr_produtos_tabela_aurora'), 'n'))) = 's' ) THEN
                                    IF ( lower(trim(nvl(obter_config_precif('atualizar_pctabpr_somente_se_aumentar'), 's'))) = 's' OR lower(trim(nvl(obter_config_precif('atualizar_pctabpr_produtos_tabela_aurora_somente_se_aumentar'), 's'))) = 's' ) THEN
                                        IF ( round(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) < round(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                            atualizar_ptabela := true;
                                        ELSE
                                            atualizar_ptabela := false;
                                        END IF;
    
                                        IF ( round(nvl(lpreco.pvenda1, 0), v_casas_decimais_comp) < round(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                            atualizar_pvenda := true;
                                        ELSE
                                            atualizar_pvenda := false;
                                        END IF;
    
                                    ELSE
                                        IF ( lower(trim(nvl(obter_config_precif('atualizar_pctabpr_produtos_tabela_aurora_somente_se_aumentar_ou_estoque_menor_minimo'), 's'))) = 's' ) THEN
                                            IF ( round(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) < round(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) OR pv_precolog.qtest <= ( pv_precolog.qtvendamediadia * nvl(obter_config_precif('quant_dias_estoque_minimo_regra15'),
                                            3) ) ) THEN
                                                atualizar_ptabela := true;
                                            ELSE
                                                atualizar_ptabela := false;
                                            END IF;
    
                                            IF ( round(nvl(lpreco.pvenda1, 0), v_casas_decimais_comp) < round(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) OR pv_precolog.qtest <= ( pv_precolog.qtvendamediadia * nvl(obter_config_precif('quant_dias_estoque_minimo_regra15'),
                                            3) ) ) THEN
                                                atualizar_pvenda := true;
                                            ELSE
                                                atualizar_pvenda := false;
                                            END IF;
    
                                        ELSE /*muito cuidado, diminui o preco de tabela com os parametros dessa forma (todos 'n')*/
                                            atualizar_ptabela := true;
                                            atualizar_pvenda := true;
                                        END IF;
                                    END IF;
    
                                END IF;
    
                            END IF; /* precos diferentes*/
                        END IF;/*config atualizar_pctabpr*/
    
    
                        CASE
                            WHEN ( trunc(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) < trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                || ' - preco calculado maior';
                            WHEN ( trunc(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) = trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                || ' - preco calculado igual';
                                atualizar_pvenda := false;
                                atualizar_ptabela := false;
                            WHEN ( trunc(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) > trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                || ' - preco calculado menor';
                        END CASE;
    
                        pv_precolog.alterar_ptabela := 0;
                        pv_precolog.alterar_pvenda := 0;
                        IF ( gravar_pctabpr = true ) THEN
                            pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                            || ' - gravar pctabpr';
                            IF ( atualizar_ptabela = true ) THEN
                                pv_precolog.alterar_ptabela := 1;
                                pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                || ' - atualizar_ptabela';
                            END IF;
    
                            IF ( atualizar_pvenda = true ) THEN
                                pv_precolog.alterar_pvenda := 1;
                                pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                || ' - atualizar_pvenda';
                            END IF;
    
                        ELSE
                        /*veio o parametro da procedure para nao gravar, independente do calculo e parametros, o que geralmente 
                        indica estoque suficiente conforme regra 15*/
                            pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                            || ' - nao gravar pctabpr';
                            atualizar_pvenda := false;
                            atualizar_ptabela := false;
                        END IF;
                    /*opcao para simular e nao alterar efetivamente nas tabelas de preco
                    if atualizar_pvenda = true or atualizar_ptabela = true then
                        atualizar_pvenda := false;
                        atualizar_ptabela := false;
                        pv_PrecoLog.regraaplicada := pv_PrecoLog.regraaplicada || ' - simulacao - vai alterar';
                    end if;*/
    
    
                        INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr VALUES pv_precolog;
    
                        COMMIT;
                        IF (
                            atualizar_ptabela = true
                            AND gravar_pctabpr = true
                        ) THEN
                            aplicar_preco_tabela(pv_precolog);
                        END IF;
    
                        IF (
                            atualizar_pvenda = true
                            AND gravar_pctabpr = true
                        ) THEN
                            aplicar_preco_venda_externa(lpreco.codprod, lpreco.numregiao);
                        END IF; /*preco calculado maior que o atual;*/
    
    
                    EXCEPTION 
                    /*se houver erros nesse laco, tem que continuar para os proximos produtos*/
                        WHEN OTHERS THEN
                            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'codprod: '
                                                                        || lpreco.codprod
                                                                        || ' codfilial: '
                                                                        || lpreco.codfilial
                                                                        || ' numregiao: '
                                                                        || lpreco.numregiao, p_linha => $$plsql_line);
    
                            NULL;
                    END;
                END LOOP; /* pctabpr   */
    
    
            END IF; /*encontrou custos*/

        end if; /*encontrou preco na tabela da aurora*/
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'codfilial: ' || pv_precolog.codfilial
                                                        || ' codprod: ' || pv_precolog.codprod
                                                        || ' numregiao: ' || pv_precolog.numregiao,
                                                        p_linha => $$plsql_line
            );
            NULL;
    END gravar___FNV_GET_PREFIXOBJECTSDB__tabpr_aur;

    PROCEDURE atualizar_precos_medios_grupos AS
    BEGIN
        FOR li IN (
            SELECT
                i.codgrupoprod,
                g.codvisivelgrupo,
                SUM(nvl(i.precoentf1, 0)) AS precoentf1,
                COUNT(
                    CASE
                        WHEN nvl(i.precoentf1, 0) > 0 THEN
                            1
                        ELSE
                            NULL
                    END
                )                         AS qtprecof1,
                SUM(nvl(i.precoentf2, 0)) AS precoentf2,
                COUNT(
                    CASE
                        WHEN nvl(i.precoentf2, 0) > 0 THEN
                            1
                        ELSE
                            NULL
                    END
                )                         AS qtprecof2
            FROM
                        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod i
                JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv g ON ( g.codgrupoprod = i.codgrupoprod )
            GROUP BY
                i.codgrupoprod,
                g.codvisivelgrupo
        ) LOOP
            UPDATE __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv g
            SET
                g.precomediogrupof1 = ( nvl(li.precoentf1, 0) /
                                        CASE
                                            WHEN nvl(li.qtprecof1, 1) > 0 THEN
                                                li.qtprecof1
                                            ELSE
                                                1
                                        END
                ),
                g.precomediogrupof2 = ( nvl(li.precoentf2, 0) /
                                        CASE
                                            WHEN nvl(li.qtprecof2, 1) > 0 THEN
                                                li.qtprecof2
                                            ELSE
                                                1
                                        END
                )
            WHERE
                g.codgrupoprod = li.codgrupoprod;

            COMMIT;
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
            NULL;
    END atualizar_precos_medios_grupos;

    PROCEDURE gravar___FNV_GET_PREFIXOBJECTSDB__tabpr (
        pv_precolog    IN OUT __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr%rowtype,
        gravar_pctabpr BOOLEAN DEFAULT true
    ) AS

        v_preco_compra           NUMBER;
        v_preco_compra_sem_st    NUMBER;
        lcalculocustos           __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_log%rowtype;
        lgrupoprod               __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv%rowtype;
        v_existe                 NUMBER;
        v_indice                 NUMBER;
        tribsaida                jumbo.pctribut%rowtype;
        v_resultado_baseicst     NUMBER;
        atualizar_ptabela        BOOLEAN DEFAULT false;
        atualizar_pvenda         BOOLEAN DEFAULT false;
        v_casas_decimais_comp    NUMBER DEFAULT 6;
        v_par_perc_determ_agress NUMBER default NULL;
        v_teve_entrada           BOOLEAN DEFAULT false;
        v_strtemp                VARCHAR2(4000) DEFAULT NULL;
        v_param_dias             tcnjnum default NULL;
        v_numtemp                NUMBER default NULL;
        v_calcular_grupo         BOOLEAN DEFAULT false;
        v_dt_alt_preco_grupo     DATE default NULL;
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_casas_decimais_comp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_conversao.como_numero(nvl(obter_config_precif('casas_decimais_comparacao_precos_atual_anterior'), 3));
        ELSE
            v_casas_decimais_comp := 3;
        END IF;
        /*obtem o parametro de qual custo usar na sugestao de preco */


        SELECT
            valor
        INTO pv_precolog.paramsugvenda
        FROM
            jumbo.pcparamfilial
        WHERE
            nome = 'CON_SUGVENDA';
        /*20/11/2019 - parte que verifica se faz parte de grupo e se tem custo no grupo*/


        atualizar_precos_medios_grupos;
        pv_precolog.pcompra := NULL;
        v_existe := 0;
        SELECT
            COUNT(1)
        INTO v_existe
        FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod i
            JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv g ON ( g.codgrupoprod = i.codgrupoprod )
        WHERE
                i.codprod = pv_precolog.codprod
            AND nvl(
                CASE
                    WHEN pv_precolog.codfilial = 2 THEN
                        g.precomediogrupof2
                    ELSE
                        g.precomediogrupof1
                END, 0) > 0;

        IF ( v_existe > 0 ) THEN /*produto pertence a grupo e o grupo tem custo impostado*/
            pv_precolog.regraaplicada := 'regra grupo ';
            SELECT
                g.*
            INTO lgrupoprod
            FROM
                        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod i
                JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv g ON ( g.codgrupoprod = i.codgrupoprod )
            WHERE
                    i.codprod = pv_precolog.codprod
                AND nvl(
                    CASE
                        WHEN pv_precolog.codfilial = 2 THEN
                            g.precomediogrupof2
                        ELSE
                            g.precomediogrupof1
                    END, 0) > 0;

            v_dt_alt_preco_grupo :=
                CASE
                    WHEN pv_precolog.codfilial = 2 THEN
                        lgrupoprod.dtalterprecof2
                    ELSE lgrupoprod.dtalterprecof1
                END;
            /*verifica se o parametro dias_semana_calcular_grupo existe e se esta preenchido com o dia atual da semana(1..7)*/


            v_strtemp := nvl(obter_config_precif('dias_semana_calcular_grupo'), '2,4,7');
            v_calcular_grupo := false;
            IF ( length(nvl(v_strtemp, '')) > 0 ) THEN
                v_param_dias := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_array_num(v_strtemp, ',');
                IF ( v_param_dias.count > 0 ) THEN
                    v_numtemp := to_number(to_char(sysdate, 'D'));
                    v_existe := 0;
                    SELECT
                        COUNT(1)
                    INTO v_existe
                    FROM
                        TABLE ( v_param_dias )
                    WHERE
                        column_value = v_numtemp;

                    IF v_existe > 0 THEN
                        v_calcular_grupo := true;
                    ELSE
                        pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                        || ' - parametro dia da semana desenquadrado';
                        INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr VALUES pv_precolog;

                        COMMIT;
                        v_calcular_grupo := false;
                    END IF;

                ELSE
                    v_calcular_grupo := true;
                END IF;

            ELSE
                v_calcular_grupo := true; /*parametro de dias em branco, calcula todos os dias*/
            END IF;

            IF ( v_calcular_grupo = false ) THEN
                IF ( ( ( trunc(nvl(v_dt_alt_preco_grupo, sysdate - 10)) ) = trunc(sysdate) ) OR ( ( trunc(nvl(v_dt_alt_preco_grupo, sysdate - 10)) ) = trunc(sysdate - 1) ) ) THEN
                    pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                    || ' - alterado preco ent no dia ';
                    v_calcular_grupo := true;
                END IF;
            END IF;

            IF v_calcular_grupo = true THEN
                pv_precolog.pcompra := NULL;
                pv_precolog.pcompra :=
                    CASE
                        WHEN pv_precolog.codfilial = 2 THEN
                            lgrupoprod.precomediogrupof2
                        ELSE lgrupoprod.precomediogrupof1
                    END;

                pv_precolog.pcompra1 := pv_precolog.pcompra;
                FOR lpreco IN (
                    SELECT DISTINCT
                        pctabpr.codprod,
                        nvl(pcprodut.pcomrep1, 0)                                                                                                    pcomrep1,
                        est.codfilial,
                        nvl(est.valorultent, 0)                                                                                                      valorultent,
                        nvl(est.vlstultent, 0)                                                                                                       vlstultent,
                        pctabpr.numregiao,
                        nvl(pctabpr.ptabela, 0)                                                                                                      ptabela,
                        nvl(pctabpr.ptabela1, 0)                                                                                                     ptabela1,
                        nvl(pctabpr.pvenda, 0)                                                                                                       pvenda,
                        nvl(pctabpr.pvenda1, 0)                                                                                                      pvenda1,
                        nvl(pctabpr.margem, 0)                                                                                                       margem,
                        nvl(pctribut.codicmtab, 0)                                                                                                   codicmtab,
                        decode(nvl(pctribut.utilizarstfonteprecific, 'N'), 'S', nvl(pctribut.ivafonte, 0), nvl(pctribut.ivatab, 0))                  ivatab,
                        decode(nvl(pctribut.utilizarstfonteprecific, 'N'), 'S', nvl(pctribut.aliqicms1fonte, 0), nvl(pctribut.aliqicms1tab, 0))      aliqicms1tab,
                        decode(nvl(pctribut.utilizarstfonteprecific, 'N'), 'S', nvl(pctribut.aliqicms2fonte, 0), nvl(pctribut.aliqicms2tab, 0))      aliqicms2tab,
                        decode(nvl(pctribut.utilizarstfonteprecific, 'N'), 'S', nvl(pctribut.percbaseredstfonte, 0), nvl(pctribut.percbaseredst, 0)) percbaseredst,
                        nvl(pcprodut.percipivendatab, 0)                                                                                             percipivendatab,
                        nvl(pcregiao.uf, pcfilial.uf)                                                                                                uf_regicao,
                        nvl(pctabpr.vlultentmes, 0)                                                                                                  vlultentmes,
                        nvl(est.qtestger, qtest)                                                                                                     AS qtest,
                        est.dtultent                                                                                                                 AS dtultent,
                        est.qtultent                                                                                                                 AS qtultent
                    FROM
                                jumbo.pctabpr
                        JOIN jumbo.pcprodut ON ( pcprodut.codprod = pctabpr.codprod )
                        JOIN jumbo.pcfornec ON ( pcfornec.codfornec = pcprodut.codfornec )
                        JOIN jumbo.pcregiao ON ( pctabpr.numregiao = pcregiao.numregiao )
                        JOIN jumbo.pcfilial ON ( pcfilial.codigo = pcregiao.codfilial )
                        JOIN jumbo.pcprodfilial ON ( pcprodfilial.codprod = pcprodut.codprod
                                                        AND pcprodfilial.codfilial = pcfilial.codigo )
                        JOIN jumbo.pcest est ON ( est.codprod = pcprodut.codprod
                                                    AND est.codfilial = pcfilial.codigo )
                        JOIN jumbo.pctabtrib ON ( pctabtrib.codfilialnf = pcfilial.codigo
                                                    AND pctabtrib.codprod = pcprodut.codprod
                                                    AND pctabtrib.ufdestino = pcregiao.uf )
                        JOIN jumbo.pctribut ON ( pctribut.codst = pctabtrib.codst )
                        JOIN jumbo.pcconsum ON ( 1 = 1 )
                    WHERE
                        ( ( pcregiao.status NOT IN ( 'I' ) )
                            OR ( pcregiao.status IS NULL ) )
                        AND pctabpr.codprod = pv_precolog.codprod
                        AND est.codfilial = pv_precolog.codfilial
                    ORDER BY
                        pctabpr.numregiao
                ) LOOP
                    pv_precolog.numregiao := lpreco.numregiao;
                    pv_precolog.percimpostoscmv := lpreco.codicmtab;
                    pv_precolog.perccomissao := lpreco.pcomrep1;
                    pv_precolog.percmargem := lpreco.margem;
                    pv_precolog.numregiao := lpreco.numregiao;
                    pv_precolog.qtest := lpreco.qtest;
                    pv_precolog.ptabelaant := lpreco.ptabela;
                    pv_precolog.ptabela1ant := lpreco.ptabela1;
                    pv_precolog.pvendaant := lpreco.pvenda;
                    pv_precolog.pvenda1ant := lpreco.pvenda1;
                    pv_precolog.pcompraant := lpreco.valorultent;
                    pv_precolog.dtultent := lpreco.dtultent;
                    pv_precolog.qtultent := lpreco.qtultent;
                    v_indice := ( 100 - ( nvl(lpreco.codicmtab, 0) + nvl(lpreco.pcomrep1, 0) + nvl(lpreco.margem, 0) ) ) / 100;

                    pv_precolog.precosugerido := 0;
                    BEGIN
                        /*
                        * obtem e efetua os calculos dos custos para esse valor de compra; a funcao grava um log dos calculos desses custos e os calcula 
                        * conforme as tabelas de tributacao do winthor e parametros do winthor
                        */
                        /*calcula graduacao de aumento conforme definido pelo felipe*/
                        IF nvl(pv_precolog.pcompraant, 0) > 0 THEN
                            IF lgrupoprod.percincporcalc IS NOT NULL THEN
                                v_par_perc_determ_agress := nvl(obter_config_precif('perc_determinante_agressividade_grupos'), 20);
                                IF ( ( pv_precolog.pcompra - pv_precolog.pcompraant ) / pv_precolog.pcompraant * 100 ) < v_par_perc_determ_agress THEN
                                    v_numtemp := pv_precolog.pcompra;
                                    pv_precolog.pcompra := pv_precolog.pcompraant * ( 1 + ( lgrupoprod.percincporcalc / 100 ) );

                                    IF pv_precolog.pcompra > v_numtemp THEN
                                        pv_precolog.pcompra := v_numtemp;
                                    ELSE
                                        pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                        || ' - utilizou percincporcalc ';
                                    END IF;

                                END IF;

                            END IF;
                        END IF;

                        BEGIN
                            lcalculocustos := obter_custos(vp_codfilial => pv_precolog.codfilial, vp_codprod => pv_precolog.codprod, vp_vlentrada => pv_precolog.pcompra, vp_percdescent => NULL, vp_qtent => NULL,
                                                            p_considerar_estoque => false);

                            lcalculocustos.maiorcustorealultent := greatest(nvl(lcalculocustos.custorealatualest, 0), nvl(lcalculocustos.custoentrada, 0));

                        EXCEPTION
                            WHEN OTHERS THEN
                                __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'erro ao obter custos: '
                                                                            || lcalculocustos.codprod
                                                                            || ' '
                                                                            || lcalculocustos.codfilial, p_linha => $$plsql_line);

                                lcalculocustos.codprod := NULL;
                                NULL;
                        END;

                        IF nvl(lcalculocustos.codprod, 0) > 0 THEN
                            /*calcula o preco de venda sugerido conforme o parametro de sugestao de venda e os custos calculados.*/
                            CASE
                                WHEN pv_precolog.paramsugvenda = 2 THEN /* custo financeiro*/
                                    lcalculocustos.custoprecif := lcalculocustos.custofinanceironovo;
                                WHEN pv_precolog.paramsugvenda = 8 THEN /*maior entre custo real e ultima entrada*/
                                    lcalculocustos.custoprecif := lcalculocustos.maiorcustorealultent;
                                ELSE
                                    raise_application_error(-20002, 'parametro sugestao de venda nao programado: '
                                                                    || pv_precolog.paramsugvenda
                                                                    || ' codprod: '
                                                                    || pv_precolog.codprod
                                                                    || ' codfilial: '
                                                                    || pv_precolog.codfilial);
                            END CASE;

                            pv_precolog.precosugerido := lcalculocustos.custoprecif / v_indice;
                            pv_precolog.custoprecif := lcalculocustos.custoprecif;
                            pv_precolog.precosugerido := trunc(pv_precolog.precosugerido, 6); /*casas decimais do winthor*/
                            pv_precolog.precosugeridosemst := pv_precolog.precosugerido;
                            pv_precolog.custofinanant := lcalculocustos.custofinatualest;
                            pv_precolog.custofinanceiro := lcalculocustos.custofinanceironovo;
                            pv_precolog.custorealant := lcalculocustos.custorealatualest;
                            pv_precolog.custoreal := lcalculocustos.custorealnovo;
                            pv_precolog.custoentrada := lcalculocustos.custoentrada;
                            pv_precolog.vlimpostoscmv := pv_precolog.precosugerido * pv_precolog.percimpostoscmv / 100;
                            pv_precolog.vlcomissao := pv_precolog.precosugerido * pv_precolog.perccomissao / 100;
                            pv_precolog.vlmargem := pv_precolog.precosugerido * pv_precolog.percmargem / 100;
                            pv_precolog.vlcmv := pv_precolog.custofinanceiro + pv_precolog.vlimpostoscmv + pv_precolog.vlcomissao;
                            tribsaida := obter_tribsaida(lpreco.codfilial, lpreco.codprod, lpreco.uf_regicao);
                            pv_precolog.codst := tribsaida.codst;
                            calcular_e_atribuir_st_saida(pv_precolog);
                            atualizar_ptabela := false;
                            atualizar_pvenda := false;
                            IF ( lower(trim(nvl(obter_config_precif('atualizar_pctabpr'), 'n'))) = 's' ) THEN
                                IF ( trunc(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) <> trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                    IF ( lower(trim(nvl(obter_config_precif('atualizar_pctabpr_produtos_fora_tabela_aurora'), 'n'))) = 's' ) THEN
                                        IF ( lower(trim(nvl(obter_config_precif('atualizar_pctabpr_somente_se_aumentar'), 's'))) = 's' OR lower(trim(nvl(obter_config_precif('atualizar_pctabpr_produtos_fora_tabela_aurora_somente_se_aumentar'), 's'))) = 's' ) THEN
                                            IF ( trunc(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) < trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                                atualizar_ptabela := true;
                                            ELSE
                                                atualizar_ptabela := false;
                                            END IF;

                                            IF ( trunc(nvl(lpreco.pvenda1, 0), v_casas_decimais_comp) < trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                                atualizar_pvenda := true;
                                            ELSE
                                                atualizar_pvenda := false;
                                            END IF;

                                        ELSE
                                            atualizar_ptabela := true;
                                            atualizar_pvenda := true;
                                        END IF;

                                    ELSE
                                        atualizar_ptabela := false;
                                        atualizar_pvenda := false;
                                    END IF;

                                END IF; /* precos diferentes*/
                            END IF;/*config atualizar_pctabpr*/


                            CASE
                                WHEN ( trunc(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) < trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                    pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                    || ' - preco calculado maior';
                                WHEN ( trunc(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) = trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                    pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                    || ' - preco calculado igual';
                                    atualizar_pvenda := false;
                                    atualizar_ptabela := false;
                                WHEN ( trunc(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) > trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                    pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                    || ' - preco calculado menor';
                            END CASE;

                            pv_precolog.alterar_ptabela := 0;
                            pv_precolog.alterar_pvenda := 0;
                            IF ( gravar_pctabpr = true ) THEN
                                pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                || ' - gravar pctabpr';
                                IF ( atualizar_ptabela = true ) THEN
                                    pv_precolog.alterar_ptabela := 1;
                                    pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                    || ' - atualizar_ptabela';
                                END IF;

                                IF ( atualizar_pvenda = true ) THEN
                                    pv_precolog.alterar_pvenda := 1;
                                    pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                    || ' - atualizar_pvenda';
                                END IF;

                            END IF;
                            /*opcao para simular e nao alterar efetivamente nas tabelas de preco
                            if atualizar_pvenda = true or atualizar_ptabela = true then
                                atualizar_pvenda := false;
                                atualizar_ptabela := false;
                                pv_PrecoLog.regraaplicada := pv_PrecoLog.regraaplicada || ' - simulacao - vai alterar';
                            end if;*/


                            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr VALUES pv_precolog;

                            COMMIT;                       
                            /*
                                Observar os resultados primeiro na __FNV_GET_PREFIXOBJECTSDB__tabpr e comparar com a 201, quando ocorrer entrada nao aurora.
                            */
                            IF (
                                atualizar_ptabela = true
                                AND gravar_pctabpr = true
                            ) THEN
                                aplicar_preco_tabela(pv_precolog);
                            END IF;

                            IF (
                                atualizar_pvenda = true
                                AND gravar_pctabpr = true
                            ) THEN
                                aplicar_preco_venda_externa(lpreco.codprod, lpreco.numregiao);
                            END IF;

                        END IF; /* encontrou custos*/


                    EXCEPTION 
                        /*se houver erros nesse laco, tem que continuar para os proximos produtos*/
                        WHEN OTHERS THEN
                            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'codprod: '
                                                                        || lpreco.codprod
                                                                        || ' codfilial: '
                                                                        || lpreco.codfilial
                                                                        || ' numregiao: '
                                                                        || lpreco.numregiao, p_linha => $$plsql_line);

                            NULL;
                    END;

                END LOOP; /* pctabpr;*/


            END IF; /*se v_calcular_grupo = true*/


        ELSE        
            /*
            * Percorre a tabela de produtos, listando produtos que tiveram entrada no ultimo dia e no dia atual e que
            * NAO SAO AURORA nem pertecem a GRUPOS OU TEM PRECO ESTABELECIDO NO GRUPO. Select extraido via trace da rotina 201 ao pesquisar produtos.
            */
            FOR lentrante IN (
                SELECT DISTINCT
                    pcprodut.codprod,
                    pv_precolog.codfilial
                FROM
                            jumbo.pcprodut
                    JOIN jumbo.pcprodfilial ON ( pcprodfilial.codprod = pcprodut.codprod )
                    JOIN jumbo.pcfilial ON ( pcfilial.codigo = pcprodfilial.codfilial )
                    JOIN jumbo.pcest ON ( pcest.codprod = pcprodut.codprod
                                            AND pcest.codfilial = pcprodfilial.codfilial )
                    JOIN jumbo.pcfornec ON ( pcfornec.codfornec = pcprodut.codfornec )
                WHERE
                    pcprodut.dtexclusao IS NULL
                    AND pcest.codfilial = CASE
                                                WHEN pv_precolog.codfilial = 3 THEN
                                                    1
                                                ELSE
                                                    pv_precolog.codfilial
                                            END
                    AND pcprodut.codprod = pv_precolog.codprod
                    AND ( ( pcprodut.precificestrangeira = 'N' )
                            OR ( pcprodut.precificestrangeira IS NULL ) )
                    AND ( ( ( pcprodut.obs2 NOT IN ( 'FL' ) )
                            OR ( pcprodut.obs2 IS NULL ) )
                            AND ( ( pcprodfilial.foralinha = 'N' )
                                OR ( pcprodfilial.foralinha IS NULL ) ) )
                    AND ( ( pcprodut.tipomerc NOT IN ( 'CB' ) )
                            OR ( pcprodut.tipomerc IS NULL ) )
                    AND ( ( ( pcprodut.obs NOT IN ( 'PV' ) )
                            OR ( pcprodut.obs IS NULL ) )
                            AND ( ( pcprodfilial.proibidavenda = 'N' )
                                OR ( pcprodfilial.proibidavenda IS NULL ) ) )
                    AND EXISTS (
                        SELECT
                            pctabpr.codprod
                        FROM
                            jumbo.pcregiao,
                            jumbo.pctabpr,
                            jumbo.pctribut,
                            jumbo.pcest est,
                            jumbo.pcprodut,
                            jumbo.pctabtrib
                        WHERE
                            ( ( pcregiao.status NOT IN ( 'I' ) )
                                OR ( pcregiao.status IS NULL ) )
                            AND pctabpr.codprod = pcprodut.codprod
                            AND pctabpr.numregiao = pcregiao.numregiao
                            AND est.codprod = pv_precolog.codprod
                            AND pctabpr.codprod = est.codprod
                            AND est.codfilial = pv_precolog.codfilial
                            AND ( pctabtrib.codfilialnf = decode(nvl(pcregiao.codfilial, '99'), '99', est.codfilial, pcregiao.codfilial) )
                            AND pctabtrib.ufdestino = pcregiao.uf
                            AND pctabtrib.codprod = pctabpr.codprod
                            AND pctabtrib.codst = pctribut.codst
                            AND ( ( pcregiao.codfilial IS NULL )
                                    OR ( pcregiao.codfilial = '99' )
                                    OR ( pcregiao.codfilial = pv_precolog.codfilial ) )
                    )
                    AND ( pcest.dtultent BETWEEN trunc(sysdate - 1) AND trunc(sysdate) )
                    AND pcfornec.fornecedor NOT LIKE '%AUROR%'
            ) LOOP
                FOR lpreco IN (
                    SELECT DISTINCT
                        pctabpr.codprod,
                        nvl(pcprodut.pcomrep1, 0)                                                                                                    pcomrep1,
                        est.codfilial,
                        est.numtransentultent,
                        nvl(est.valorultent, 0)                                                                                                      valorultent,
                        nvl(est.vlstultent, 0)                                                                                                       vlstultent,
                        pctabpr.numregiao,
                        nvl(pctabpr.ptabela, 0)                                                                                                      ptabela,
                        nvl(pctabpr.ptabela1, 0)                                                                                                     ptabela1,
                        nvl(pctabpr.pvenda, 0)                                                                                                       pvenda,
                        nvl(pctabpr.pvenda1, 0)                                                                                                      pvenda1,
                        nvl(pctabpr.margem, 0)                                                                                                       margem,
                        nvl(pctribut.codicmtab, 0)                                                                                                   codicmtab,
                        decode(nvl(pctribut.utilizarstfonteprecific, 'N'), 'S', nvl(pctribut.ivafonte, 0), nvl(pctribut.ivatab, 0))                  ivatab,
                        decode(nvl(pctribut.utilizarstfonteprecific, 'N'), 'S', nvl(pctribut.aliqicms1fonte, 0), nvl(pctribut.aliqicms1tab, 0))      aliqicms1tab,
                        decode(nvl(pctribut.utilizarstfonteprecific, 'N'), 'S', nvl(pctribut.aliqicms2fonte, 0), nvl(pctribut.aliqicms2tab, 0))      aliqicms2tab,
                        decode(nvl(pctribut.utilizarstfonteprecific, 'N'), 'S', nvl(pctribut.percbaseredstfonte, 0), nvl(pctribut.percbaseredst, 0)) percbaseredst,
                        nvl(pcprodut.percipivendatab, 0)                                                                                             percipivendatab,
                        nvl(pcregiao.uf, pcfilial.uf)                                                                                                uf_regicao,
                        nvl(pctabpr.vlultentmes, 0)                                                                                                  vlultentmes,
                        nvl(est.qtestger, qtest)                                                                                                     AS qtest,
                        est.dtultent                                                                                                                 AS dtultent,
                        est.qtultent                                                                                                                 AS qtultent
                    FROM
                                jumbo.pctabpr
                        JOIN jumbo.pcprodut ON ( pcprodut.codprod = pctabpr.codprod )
                        JOIN jumbo.pcfornec ON ( pcfornec.codfornec = pcprodut.codfornec )
                        JOIN jumbo.pcregiao ON ( pctabpr.numregiao = pcregiao.numregiao )
                        JOIN jumbo.pcfilial ON ( pcfilial.codigo = pcregiao.codfilial )
                        JOIN jumbo.pcprodfilial ON ( pcprodfilial.codprod = pcprodut.codprod
                                                        AND pcprodfilial.codfilial = pcfilial.codigo )
                        JOIN jumbo.pcest est ON ( est.codprod = pcprodut.codprod
                                                    AND est.codfilial = pcfilial.codigo )
                        JOIN jumbo.pctabtrib ON ( pctabtrib.codfilialnf = pcfilial.codigo
                                                    AND pctabtrib.codprod = pcprodut.codprod
                                                    AND pctabtrib.ufdestino = pcregiao.uf )
                        JOIN jumbo.pctribut ON ( pctribut.codst = pctabtrib.codst )
                        JOIN jumbo.pcconsum ON ( 1 = 1 )
                    WHERE
                        ( ( pcregiao.status NOT IN ( 'I' ) )
                            OR ( pcregiao.status IS NULL ) )
                        AND pctabpr.codprod = pv_precolog.codprod
                        AND est.codfilial = pv_precolog.codfilial
                    ORDER BY
                        pctabpr.numregiao
                ) LOOP
                    pv_precolog.numregiao := lpreco.numregiao;
                    pv_precolog.percimpostoscmv := lpreco.codicmtab;
                    pv_precolog.perccomissao := lpreco.pcomrep1;
                    pv_precolog.percmargem := lpreco.margem;
                    pv_precolog.numregiao := lpreco.numregiao;
                    pv_precolog.qtest := lpreco.qtest;
                    pv_precolog.ptabelaant := lpreco.ptabela;
                    pv_precolog.ptabela1ant := lpreco.ptabela1;
                    pv_precolog.pvendaant := lpreco.pvenda;
                    pv_precolog.pvenda1ant := lpreco.pvenda1;
                    pv_precolog.numtransentultent := lpreco.numtransentultent;
                    pv_precolog.pcompraant := lpreco.valorultent;
                    pv_precolog.dtultent := lpreco.dtultent;
                    pv_precolog.qtultent := lpreco.qtultent;
                    v_indice := ( 100 - ( nvl(lpreco.codicmtab, 0) + nvl(lpreco.pcomrep1, 0) + nvl(lpreco.margem, 0) ) ) / 100;

                    pv_precolog.precosugerido := 0;
                    /*
                    * Laco que so eh executado uma vez, tem um exit no final, eh para pegar a ultima entrada do dia ou dia anterior
                    * Importante: este laco somente ocorre se a ultima entrada ocorreu entre o dia atual de rodagem da procedure e o dia anterior,
                    * isso limita as atualizaoes a produtos que tiveram entrada nesse periodo.
                    */
                    v_teve_entrada := false;
                    FOR lultimaentrada IN (
                        SELECT
                            pcmov.*
                        FROM
                                    jumbo.pcmov
                            JOIN jumbo.pcnfent ON ( pcnfent.numtransent = pcmov.numtransent )
                        WHERE
                                pcmov.codprod = lpreco.codprod
                            AND pcmov.codfilial = CASE
                                                        WHEN lpreco.codfilial = '3' THEN
                                                            '1'
                                                        ELSE
                                                            lpreco.codfilial
                                                    END
                            AND pcmov.codoper = 'E'
                            AND pcmov.dtcancel IS NULL
                            AND pcmov.dtmov BETWEEN trunc(sysdate) - 1 AND trunc(sysdate)
                            AND pcmov.coddevol IS NULL
                        ORDER BY
                            pcmov.dtmov DESC,
                            pcmov.horalanc DESC,
                            pcmov.minutolanc DESC,
                            pcmov.numtransent DESC,
                            pcmov.numnota DESC
                    ) LOOP
                        v_teve_entrada := true;
                        v_preco_compra := nvl(lultimaentrada.punit, lultimaentrada.punitcont);
                        v_preco_compra_sem_st := v_preco_compra - nvl(lultimaentrada.st, 0);
                        pv_precolog.percdescpcompra1 := lultimaentrada.percdesc;
                        pv_precolog.numtransentultent := lultimaentrada.numtransent;
                        EXIT;
                    END LOOP;

                    IF v_teve_entrada = false THEN
                        v_preco_compra := pv_precolog.pcompraant;
                        v_preco_compra_sem_st := v_preco_compra - nvl(lpreco.vlstultent, 0);
                    END IF;

                    BEGIN
                        /*
                        * obtem e efetua os calculos dos custos para esse valor de compra; a funcao grava um log dos calculos desses custos e os calcula 
                        * conforme as tabelas de tributacao do winthor e parametros do winthor
                        */
                        BEGIN
                            lcalculocustos := obter_custos(pv_precolog.codfilial, pv_precolog.codprod, v_preco_compra_sem_st, NULL, NULL);
                            /*
                                07/11/2019 - ignora o custo calculado manualmente pela procedure obter_custos e pega o custo calculado pelo winthor, considerando que 
                                so deve passar aqui se entrou no dia anterior e com isso o proprio winthor ja calculou o custo e atuaalizou na pcest                            
                            */


                            SELECT
                                e.custofin,
                                e.custoreal,
                                e.custoultent
                            INTO
                                lcalculocustos.custofinanceironovo,
                                lcalculocustos.custorealnovo,
                                lcalculocustos.custoentrada
                            FROM
                                jumbo.pcest e
                            WHERE
                                    e.codprod = pv_precolog.codprod
                                AND e.codfilial = pv_precolog.codfilial;

                            lcalculocustos.maiorcustorealultent := greatest(nvl(lcalculocustos.custorealatualest, 0), nvl(lcalculocustos.custoentrada, 0));

                        EXCEPTION
                            WHEN OTHERS THEN
                                __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'erro ao obter custos: '
                                                                            || lcalculocustos.codprod
                                                                            || ' '
                                                                            || lcalculocustos.codfilial, p_linha => $$plsql_line);

                                lcalculocustos.codprod := NULL;
                                NULL;
                        END;

                        IF nvl(lcalculocustos.codprod, 0) > 0 THEN
                            /*calcula o preco de venda sugerido conforme o parametro de sugestao de venda e os custos calculados.*/
                            CASE
                                WHEN pv_precolog.paramsugvenda = 2 THEN /* custo financeiro*/
                                    lcalculocustos.custoprecif := lcalculocustos.custofinanceironovo;
                                WHEN pv_precolog.paramsugvenda = 8 THEN /*maior entre custo real e ultima entrada*/
                                    lcalculocustos.custoprecif := lcalculocustos.maiorcustorealultent;
                                ELSE
                                    raise_application_error(-20002, 'parametro sugestao de venda nao programado: '
                                                                    || pv_precolog.paramsugvenda
                                                                    || ' codprod: '
                                                                    || pv_precolog.codprod
                                                                    || ' codfilial: '
                                                                    || pv_precolog.codfilial);
                            END CASE;

                            pv_precolog.precosugerido := lcalculocustos.custoprecif / v_indice;
                            pv_precolog.custoprecif := lcalculocustos.custoprecif;
                            pv_precolog.precosugerido := trunc(pv_precolog.precosugerido, 6); /*casas decimais do winthor                            */
                            pv_precolog.precosugeridosemst := pv_precolog.precosugerido;
                            pv_precolog.pcompra := v_preco_compra;
                            pv_precolog.pcompra1 := v_preco_compra;
                            pv_precolog.custofinanant := lcalculocustos.custofinatualest;
                            pv_precolog.custofinanceiro := lcalculocustos.custofinanceironovo;
                            pv_precolog.custorealant := lcalculocustos.custorealatualest;
                            pv_precolog.custoreal := lcalculocustos.custorealnovo;
                            pv_precolog.custoentrada := lcalculocustos.custoentrada;
                            pv_precolog.vlimpostoscmv := pv_precolog.precosugerido * pv_precolog.percimpostoscmv / 100;
                            pv_precolog.vlcomissao := pv_precolog.precosugerido * pv_precolog.perccomissao / 100;
                            pv_precolog.vlmargem := pv_precolog.precosugerido * pv_precolog.percmargem / 100;
                            pv_precolog.vlcmv := pv_precolog.custofinanceiro + pv_precolog.vlimpostoscmv + pv_precolog.vlcomissao;
                            tribsaida := obter_tribsaida(lpreco.codfilial, lpreco.codprod, lpreco.uf_regicao);
                            pv_precolog.codst := tribsaida.codst;
                            calcular_e_atribuir_st_saida(pv_precolog);
                            atualizar_ptabela := false;
                            atualizar_pvenda := false;
                            IF ( lower(trim(nvl(obter_config_precif('atualizar_pctabpr'), 'n'))) = 's' ) THEN
                                IF ( trunc(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) <> trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                    IF ( lower(trim(nvl(obter_config_precif('atualizar_pctabpr_produtos_fora_tabela_aurora'), 'n'))) = 's' ) THEN
                                        IF ( lower(trim(nvl(obter_config_precif('atualizar_pctabpr_somente_se_aumentar'), 's'))) = 's' OR lower(trim(nvl(obter_config_precif('atualizar_pctabpr_produtos_fora_tabela_aurora_somente_se_aumentar'), 's'))) = 's' ) THEN
                                            IF ( trunc(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) < trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                                atualizar_ptabela := true;
                                            ELSE
                                                atualizar_ptabela := false;
                                            END IF;

                                            IF ( trunc(nvl(lpreco.pvenda1, 0), v_casas_decimais_comp) < trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                                atualizar_pvenda := true;
                                            ELSE
                                                atualizar_pvenda := false;
                                            END IF;

                                        ELSE
                                            atualizar_ptabela := true;
                                            atualizar_pvenda := true;
                                        END IF;

                                    END IF;

                                END IF; /* precos diferentes*/
                            END IF;/*config atualizar_pctabpr*/


                            CASE
                                WHEN ( trunc(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) < trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                    pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                    || ' - preco calculado maior';
                                WHEN ( trunc(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) = trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                    pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                    || ' - preco calculado igual';
                                    atualizar_pvenda := false;
                                    atualizar_ptabela := false;
                                WHEN ( trunc(nvl(lpreco.ptabela1, 0), v_casas_decimais_comp) > trunc(nvl(pv_precolog.precosugerido, 0), v_casas_decimais_comp) ) THEN
                                    pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                    || ' - preco calculado menor';
                            END CASE;

                            pv_precolog.alterar_ptabela := 0;
                            pv_precolog.alterar_pvenda := 0;
                            IF ( gravar_pctabpr = true ) THEN
                                pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                || ' - gravar pctabpr';
                                IF ( atualizar_ptabela = true ) THEN
                                    pv_precolog.alterar_ptabela := 1;
                                    pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                    || ' - atualizar_ptabela';
                                END IF;

                                IF ( atualizar_pvenda = true ) THEN
                                    pv_precolog.alterar_pvenda := 1;
                                    pv_precolog.regraaplicada := nvl(pv_precolog.regraaplicada, '')
                                                                    || ' - atualizar_pvenda';
                                END IF;

                            END IF;

                            INSERT INTO __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr VALUES pv_precolog;

                            COMMIT;
                            IF (
                                atualizar_ptabela = true
                                AND gravar_pctabpr = true
                            ) THEN
                                aplicar_preco_tabela(pv_precolog);
                            END IF;

                            IF (
                                atualizar_pvenda = true
                                AND gravar_pctabpr = true
                            ) THEN
                                aplicar_preco_venda_externa(lpreco.codprod, lpreco.numregiao);
                            END IF;

                        END IF; /* encontrou custos*/


                    EXCEPTION 
                        /*se houver erros nesse laco, tem que continuar para os proximos produtos*/
                        WHEN OTHERS THEN
                            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(
                                p_vlrs => 'codprod: '
                                        || lpreco.codprod
                                        || ' codfilial: '
                                        || lpreco.codfilial
                                        || ' numregiao: '
                                        || lpreco.numregiao, p_linha => $$plsql_line
                                );
                            NULL;
                    END;

                END LOOP; /* pctabpr;*/
            END LOOP; /* produtos com entrada*/
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'codfilial: '
                                                        || pv_precolog.codfilial
                                                        || ' codprod: '
                                                        || pv_precolog.codprod
                                                        || ' numregiao: '
                                                        || pv_precolog.numregiao, p_linha => $$plsql_line);

            NULL;
    END gravar___FNV_GET_PREFIXOBJECTSDB__tabpr;

    PROCEDURE atualizar_preco_sug AS

        qtvendperiodoanalise NUMBER;
        qtvendaperiodoprev   NUMBER;
        qtvendadia           NUMBER;
        v_qtest              NUMBER;
        lconfigprecifprod    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__configprecifprod%rowtype;
        v_exist              NUMBER DEFAULT 0;
        dtinianalise         DATE;
        dtfimanalise         DATE;
        dtiniprev            DATE;
        dtfimprev            DATE;
        lenq                 __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__logenquadreg%rowtype;
        v_preco_compra       NUMBER;
        lg                   __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_log%rowtype;
        v_par_sugvenda       NUMBER;
        v_precosugerido      NUMBER;
        v_indice             NUMBER;
        lpr                  __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr%rowtype;
        v_resultado_baseicst NUMBER;
        tribsaida            jumbo.pctribut%rowtype;
        lpaur                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem%rowtype;
        lconfigprecif        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__configprecif%rowtype;
    BEGIN
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            IF ( lower(trim(nvl(obter_config_precif('calculo_ativo'), 'n'))) = 's' ) THEN
                v_exist := 0;

                copiar_custos_filial(1, 3);
                /*
                * Percorre todos os produtos vigentes da tabela de produtos
                */
                FOR lprod IN (
                    SELECT
                        *
                    FROM
                        jumbo.pcprodut
                    WHERE
                        pcprodut.dtexclusao IS NULL
                        AND nvl(pcprodut.obs2, 'A') <> 'FL'
                    ORDER BY
                        pcprodut.codprod
                ) LOOP
                /*
                * Percorre as filiais existentes
                */
                    FOR lfil IN (
                        SELECT
                            *
                        FROM
                            jumbo.pcfilial
                        WHERE
                            pcfilial.codigo <> 99
                        ORDER BY
                            pcfilial.codigo
                    ) LOOP
                        BEGIN
                            lpr := NULL;
                            lpr.dtcalculo := to_date(to_char(sysdate, 'dd/mm/yyyy HH24:mi:ss'), 'dd/mm/yyyy HH24:mi:ss');
                            lpr.codfilial := lfil.codigo;
                            lpr.codprod := lprod.codprod;
                            v_exist := 0;
                            SELECT
                                COUNT(1)
                            INTO v_exist
                            FROM
                                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem
                            WHERE
                                    __FNV_GET_PREFIXOBJECTSDB__tabpr_origem.codfilialorigem = CASE
                                                                            WHEN lfil.codigo = '3' THEN
                                                                                '1'
                                                                            ELSE
                                                                                lfil.codigo
                                                                        END
                                AND __FNV_GET_PREFIXOBJECTSDB__tabpr_origem.codprodorigem = lprod.codprod;
                        /*
                        * Somente atualiza se enquadrar na regra dos 15 e se o produto existir na tabela de precos da aurora, no else atualiza os demais
                        */


                            IF ( v_exist > 0 ) THEN
                                IF ( lower(trim(nvl(obter_config_precif('calcular_produtos_tabela_aurora'), 'n'))) = 's' ) THEN
                                    IF ( lower(trim(nvl(obter_config_precif('utilizar_regra15_aur'), 's'))) = 's' ) THEN
                                        lpr.regraaplicada := 'regra 15 (Aurora)';
                                        SELECT
                                            *
                                        INTO lpaur
                                        FROM
                                            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__tabpr_origem
                                        WHERE
                                                __FNV_GET_PREFIXOBJECTSDB__tabpr_origem.codfilialorigem = CASE
                                                                                        WHEN lfil.codigo = '3' THEN
                                                                                            '1'
                                                                                        ELSE
                                                                                            lfil.codigo
                                                                                    END
                                            AND __FNV_GET_PREFIXOBJECTSDB__tabpr_origem.codprodorigem = lprod.codprod;
                                    /*
                                    * Seleciona configuracoes da tabela de configuracoes de precificacao ou atribui configuracoes padrao. Essas configuracoes
                                    * determinam as datas de inicio e fim de pesquisa do historico e data inicio e fim do periodo de previsao de venda para 
                                    * analise de o produto enquadra na regra dos 15(significa que nao tem estoque para atender os proximos 15 dias) ou nao
                                    */


                                        v_exist := 0;
                                        lconfigprecifprod := NULL;
                                        SELECT
                                            COUNT(1)
                                        INTO v_exist
                                        FROM
                                            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__configprecifprod
                                        WHERE
                                                __FNV_GET_PREFIXOBJECTSDB__configprecifprod.codfilial = lfil.codigo
                                            AND __FNV_GET_PREFIXOBJECTSDB__configprecifprod.codprod = lprod.codprod;

                                        IF ( v_exist = 0 ) THEN
                                            lconfigprecifprod.codprod := lprod.codprod;
                                            lconfigprecifprod.codfilial := lfil.codigo;
                                            lconfigprecifprod.inianalisehist := nvl(obter_config_precif('data_inicio_analise_historico_estoque_regra15'), 'd-16');
                                            lconfigprecifprod.fimanalisehist := nvl(obter_config_precif('data_fim_analise_historico_estoque_regra15'), 'd-1');
                                            lconfigprecifprod.inianaliseprev := nvl(obter_config_precif('data_inicio_analise_previsao_estoque_regra15'), 'd');
                                            lconfigprecifprod.fimanaliseprev := nvl(obter_config_precif('data_fim_analise_previsao_estoque_regra15'), 'd+10');
                                        ELSE
                                            SELECT
                                                *
                                            INTO lconfigprecifprod
                                            FROM
                                                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__configprecifprod
                                            WHERE
                                                    __FNV_GET_PREFIXOBJECTSDB__configprecifprod.codfilial = lfil.codigo
                                                AND __FNV_GET_PREFIXOBJECTSDB__configprecifprod.codprod = lprod.codprod;

                                        END IF;

                                        dtinianalise := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.calcular_data(trunc(sysdate), lconfigprecifprod.inianalisehist);

                                        dtfimanalise := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.calcular_data(trunc(sysdate), lconfigprecifprod.fimanalisehist);

                                        dtiniprev := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.calcular_data(trunc(sysdate), lconfigprecifprod.inianaliseprev);

                                        dtfimprev := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.calcular_data(trunc(sysdate), lconfigprecifprod.fimanaliseprev);

                                        lpr.dtinianalisehist := nvl(dtinianalise, trunc(sysdate) - 16);
                                        lpr.dtfimanalisehist := nvl(dtfimanalise, trunc(sysdate) - 1);
                                        lpr.dtinianaliseprev := nvl(dtiniprev, trunc(sysdate));
                                        lpr.dtfimanaliseprev := nvl(dtfimprev, trunc(sysdate) + 10);
                                    /*
                                    *   Verifica se existiu ao menos uma movimentacao de venda no periodo de analise configurado
                                    */
                                        v_exist := 0;
                                        SELECT
                                            COUNT(1)
                                        INTO v_exist
                                        FROM
                                            jumbo.pcmov
                                        WHERE
                                            pcmov.codfilial IN ( lfil.codigo,
                                                                    CASE
                                                                        WHEN lfil.codigo = 3 THEN
                                                                            1
                                                                        ELSE
                                                                            0
                                                                    END,
                                                                    CASE
                                                                        WHEN lfil.codigo = 1 THEN
                                                                            3
                                                                        ELSE
                                                                            0
                                                                    END
                                            )
                                            AND pcmov.codprod = lprod.codprod
                                            AND pcmov.dtmov BETWEEN lpr.dtinianalisehist AND lpr.dtfimanalisehist
                                            AND pcmov.codoper = 'S'
                                            AND pcmov.dtcancel IS NULL
                                            AND pcmov.coddevol IS NULL
                                            AND ROWNUM <= 1;
                                    /*
                                    * Encontra a media de venda diaria do periodo de analise do historico
                                    */


                                        qtvendperiodoanalise := 0;
                                        IF ( v_exist > 0 ) THEN
                                            SELECT
                                                SUM(nvl(nvl(pcmov.qt, pcmov.qtcont), 0))
                                            INTO qtvendperiodoanalise
                                            FROM
                                                jumbo.pcmov
                                            WHERE
                                                pcmov.codfilial IN ( lfil.codigo,
                                                                        CASE
                                                                            WHEN lfil.codigo = 3 THEN
                                                                                1
                                                                            ELSE
                                                                                0
                                                                        END,
                                                                        CASE
                                                                            WHEN lfil.codigo = 1 THEN
                                                                                3
                                                                            ELSE
                                                                                0
                                                                        END
                                                )
                                                AND pcmov.codprod = lprod.codprod
                                                AND pcmov.dtmov BETWEEN lpr.dtinianalisehist AND lpr.dtfimanalisehist
                                                AND pcmov.codoper = 'S'
                                                AND pcmov.dtcancel IS NULL
                                                AND pcmov.coddevol IS NULL;

                                        END IF;

                                        lpr.qtvendaperiodoanalise := nvl(qtvendperiodoanalise, 0);
                                        qtvendadia := lpr.qtvendaperiodoanalise / ( ( lpr.dtfimanalisehist + 1 ) - lpr.dtinianalisehist );

                                        lpr.qtvendamediadia := nvl(qtvendadia, 0);
                                    /*
                                    * Pesquisa o estoque atual
                                    */
                                        v_exist := 0;
                                        SELECT
                                            COUNT(1)
                                        INTO v_exist
                                        FROM
                                            jumbo.pcest
                                        WHERE
                                                pcest.codfilial = CASE
                                                                        WHEN lfil.codigo = 3 THEN
                                                                            1
                                                                        ELSE
                                                                            to_number(lfil.codigo)
                                                                    END
                                            AND pcest.codprod = lprod.codprod;

                                        v_qtest := 0;
                                        IF ( v_exist > 0 ) THEN
                                            SELECT
                                                least(nvl(qtest, 0), nvl(qtestger, 0)) - ( nvl(qtreserv, 0) + nvl(qtpendente, 0) )
                                            INTO v_qtest
                                            FROM
                                                jumbo.pcest
                                            WHERE
                                                    pcest.codfilial = CASE
                                                                            WHEN lfil.codigo = 3 THEN
                                                                                1
                                                                            ELSE
                                                                                to_number(lfil.codigo)
                                                                        END
                                                AND pcest.codprod = lprod.codprod;

                                        END IF;

                                        lpr.qtest := nvl(v_qtest, 0);
                                    /* 
                                    * Calcula a quantidade de venda prevista para o periodo previsto
                                    */
                                        qtvendaperiodoprev := lpr.qtvendamediadia * ( ( lpr.dtfimanaliseprev + 1 ) - lpr.dtinianaliseprev );

                                        IF ( qtvendaperiodoprev < 0 ) THEN
                                            qtvendaperiodoprev := 0;
                                        END IF;
                                        lpr.qtvendaperiodoprev := nvl(qtvendaperiodoprev, 0);
                                        CASE
                                            WHEN nvl(lpr.qtest, 0) >= nvl(lpr.qtvendaperiodoprev, 0) THEN
                                                lpr.qtfaltaperiodoprev := 0;
                                            ELSE
                                                lpr.qtfaltaperiodoprev := nvl(lpr.qtvendaperiodoprev, 0) - nvl(lpr.qtest, 0);
                                        END CASE;
                                    /*
                                    * Efetua os calculos de precificacao somente se a quantidade prevista de venda para o periodo previsto eh maior
                                    * que a quantidade de estoque atual ou se a quantidade de vendaprevista e igual a zero, o que significa que a media
                                    * diaria foi zero e que nao houve venda no periodo historico, o que pode ser considerado produto sem historico de movi
                                    * mentacao. 
                                    */


                                        IF ( ( nvl(lpr.qtest, 0) < nvl(lpr.qtvendaperiodoprev, 0) ) OR ( nvl(lpr.qtvendaperiodoprev, 0) <= 0 ) ) THEN
                                        /*enquadrou na regra dos 15*/
                                            lpr.regraaplicada := lpr.regraaplicada || ' - enquadrou';
                                        /*
                                        * Calcula e grava a precificacao na tabela de precos __FNV_GET_PREFIXOBJECTSDB__ (__FNV_GET_PREFIXOBJECTSDB__tabpr) e na tabela de precos da 
                                        * jumbo (pctabpr - grava o preco de tabela e aplica o preco de tabela e venda externa)
                                        */
                                            gravar___FNV_GET_PREFIXOBJECTSDB__tabpr_aur(lpr, true);
                                        ELSE
                                        /*atualiza os enquadramentos do produto para efeito de historico, dizendo que nao esta mais enquadrado na regra*/
                                            lpr.regraaplicada := lpr.regraaplicada || ' - nao enquadrou - estoque suficiente';
                                            gravar___FNV_GET_PREFIXOBJECTSDB__tabpr_aur(lpr, false);
                                        END IF;

                                    ELSE
                                        lpr.regraaplicada := 'regra tabela (Aurora)'; 
                                    /*gravar___FNV_GET_PREFIXOBJECTSDB__tabpr_aur(lpr,true);*/
                                    END IF; /* utilizar regra15 aur;*/


                                END IF; /*calcular produtos aurora*/
                            ELSE
                                IF ( lower(trim(nvl(obter_config_precif('calcular_produtos_fora_tabela_aurora'), 'n'))) = 's' ) THEN
                                /*
                                * atualiza o preco pela regra normal, produtos nao aurora ou nao estao na lista de precos da aurora
                                */
                                    lpr.regraaplicada := 'regra ult ent';
                                    gravar___FNV_GET_PREFIXOBJECTSDB__tabpr(lpr);
                                END IF;
                            END IF; /* existe ou nao __FNV_GET_PREFIXOBJECTSDB__tabpr_aur*/


                        EXCEPTION
                            WHEN OTHERS THEN
                                __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_vlrs => 'codfilial: '
                                                                            || lfil.codigo
                                                                            || ' codprod: '
                                                                            || lprod.codprod, p_linha => $$plsql_line);

                                NULL;/*se houver erro em um produto, tem que continuar para os proximos;*/
                        END;
                    END LOOP; /*loop filial*/
                END LOOP; /*loop produto*/


            ELSE
                raise_application_error(-20001, 'calculo inativo na configuracao de precificacao, calculos nao efetuados.');
            END IF;

        ELSE
            raise_application_error(-20001, 'Objeto invalido: __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm || dbms_utility.format_error_backtrace);
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_erro.inserir_erro(p_linha => $$plsql_line);
    END atualizar_preco_sug;

END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_precif;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	},
	"__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_relatorio":{
		"nomepackagesqldb":"__CHAVE__",
		"nomepackagesqlsistema":"__CHAVE__",
		"cabecalho":"
create or replace PACKAGE __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_relatorio AS
    PROCEDURE relcli_naoposit (
        p_codfilial   NUMBER DEFAULT NULL,
        p_codsuperv   NUMBER DEFAULT NULL,
        p_codusur     NUMBER DEFAULT NULL
    );


    PROCEDURE relpro_naoposit (
        p_codfilial   NUMBER DEFAULT NULL,
        p_codsuperv   NUMBER DEFAULT NULL,
        p_codusur     NUMBER DEFAULT NULL
    );


    PROCEDURE relobjetivos (
        p_codfilial   NUMBER DEFAULT NULL,
        p_codsuperv   NUMBER DEFAULT NULL,
        p_codusur     NUMBER DEFAULT NULL
    );


    PROCEDURE relsemanalsuperv (
        p_codfilial   NUMBER DEFAULT NULL,
        p_codsuperv   NUMBER DEFAULT NULL,
        p_codusur     NUMBER DEFAULT NULL
    );


END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_relatorio;",
		"corpo":"
create or replace PACKAGE BODY __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_relatorio AS
    FUNCTION primeiros_registros (
        p_comando_sql VARCHAR2, 
        p_qtregistros NUMBER DEFAULT 10
    ) RETURN ttabela AS
        v_cursor_id NUMBER;
        v_cols tcnjstr;
        v_col_cnt INTEGER;
        v_desc_tab dbms_sql.desc_tab2;
        v_linha VARCHAR2(32000);
        v_retorno VARCHAR2(32000);
        v_cont_reg INTEGER DEFAULT 0;
        v_css_tab_email VARCHAR2(32000) DEFAULT NULL;
        v_css_tab_email_td VARCHAR2(32000) DEFAULT NULL;
        v_css_tab_email_th VARCHAR2(32000) DEFAULT NULL;
        v_tab_html ttabela;
        v_cels tcnjstr;
        v_css_num VARCHAR2(100) DEFAULT 'text-align:right;';
    BEGIN
        v_tab_html := ttabela();
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__', p_owner => '__FNV_GET_NOMESCHEMA__') ) 
            AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor', p_owner => '__FNV_GET_NOMESCHEMA__') ) 
            AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array', p_owner => '__FNV_GET_NOMESCHEMA__') ) 
            AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_css_tab_email := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email');
            v_css_tab_email_td := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email_td');
            v_css_tab_email_th := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.obter_conteudo_html('css_tab_email_th');
            v_retorno := '<table style=\"' || v_css_tab_email || '\"><thead><tr><th style=\"' || v_css_tab_email_th || '\">';
            v_cursor_id := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor.abrir_cursor(p_comando_sql);
            v_cols := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_cursor.obter_nomes_e_def_col_cursor(v_cursor_id, v_col_cnt, v_desc_tab);
            v_tab_html.prop_style := v_css_tab_email;
            v_tab_html.titulo := '<thead><tr>';
            FOR i IN 
                v_cols.first..v_cols.last 
            LOOP 
                v_tab_html.titulo := v_tab_html.titulo || '<th style=\"' || v_css_tab_email_th || '\">' || v_cols(i) || '</th>';
            END LOOP;
            v_tab_html.titulo := v_tab_html.titulo || '</tr></thead>';
            v_linha := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_str_array(v_cols, ';');
            v_retorno := v_retorno || replace(v_linha, ';', '</th><th style=\"' || v_css_tab_email_th || '\">') 
                || '</th></tr></thead><tbody style=\"text-align:center;\">';
            v_cont_reg := 0;        
            /*complementar v_tab_html com dados e retornar no lugar de texto*/
            WHILE dbms_sql.fetch_rows(v_cursor_id) > 0 LOOP
                v_retorno := v_retorno || '<tr><td style=\"' || v_css_tab_email_td || '\">';
                v_linha := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_linha_cursor(v_cursor_id, v_desc_tab, v_col_cnt);
                v_retorno := v_retorno || replace(v_linha, ';', '</td><td style=\"' || v_css_tab_email_td || '\">') || '</td></tr>';
                v_cont_reg := v_cont_reg + 1;
                v_cels := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_array.como_array_str(v_linha, ';');
                v_tab_html.linhas.extend;
                v_tab_html.linhas(v_tab_html.linhas.last) := tlinhatabhtml();
                FOR i IN v_cels.first..v_cels.last LOOP
                    v_tab_html.linhas(v_tab_html.linhas.last).celulas.extend;
                    IF ( instr(lower(trim(v_cols(i))), 'objetivo') > 0 ) OR ( instr(lower(trim(v_cols(i))), 'realizado') > 0 ) 
                        OR ( instr(lower(trim(v_cols(i))), 'cod') > 0 ) OR ( instr(lower(trim(v_cols(i))), 'mes') > 0 ) 
                        OR ( instr(lower(trim(v_cols(i))), 'limcred') > 0 ) OR ( instr(lower(trim(v_cols(i))), 'qt') > 0 ) THEN
                        v_tab_html.linhas(v_tab_html.linhas.last).celulas(v_tab_html.linhas(v_tab_html.linhas.last).celulas.last) := '<td style=\"' || v_css_tab_email_td || ';' || v_css_num || '\">' || v_cels(i) || '</td>';
                    ELSE
                        v_tab_html.linhas(v_tab_html.linhas.last).celulas(v_tab_html.linhas(v_tab_html.linhas.last).celulas.last) := '<td style=\"' || v_css_tab_email_td || '\">' || v_cels(i) || '</td>';
                    END IF;
                END LOOP;
                EXIT WHEN v_cont_reg >= p_qtregistros;
            END LOOP;
            IF dbms_sql.is_open(v_cursor_id) THEN
                dbms_sql.close_cursor(v_cursor_id);
            END IF;
            v_retorno := v_retorno || '</tbody></table>';
        END IF;
        RETURN v_tab_html;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
            IF dbms_sql.is_open(v_cursor_id) THEN
                dbms_sql.close_cursor(v_cursor_id);
            END IF;
            RETURN NULL;
    END primeiros_registros;
    PROCEDURE relcli_naoposit (
        p_codfilial NUMBER DEFAULT NULL, 
        p_codsuperv NUMBER DEFAULT NULL, 
        p_codusur NUMBER DEFAULT NULL
    ) AS        
        v_cmd_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_primeiros_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_cliposit_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_cliposit VARCHAR2(32000) DEFAULT NULL;
        v_cmd_ativos_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_ativos VARCHAR2(32000) DEFAULT NULL;
        v_cmd VARCHAR2(32000) DEFAULT NULL;
        v_cmd_primeiros VARCHAR2(32000) DEFAULT NULL;
        v_nome_dir VARCHAR2(100) DEFAULT 'DIR_REL';
        v_nome_arq VARCHAR2(255) DEFAULT NULL;
        v_dtcriacao VARCHAR2(255) DEFAULT NULL;
        v_condic_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_inicial_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_inicial_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_filial_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_filial_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_superv_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_superv_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_rca_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_rca_aur VARCHAR2(4000) DEFAULT NULL;
        v_cursor_id INTEGER;
        v_linha VARCHAR2(32000) DEFAULT NULL;
        t_col_cnt INTEGER;
        v_conteudo_email_original VARCHAR2(32000) NULL;
        v_conteudo_email VARCHAR2(32000) NULL;
        v_titulo_email VARCHAR2(4000) DEFAULT 'Clientes para positivar';
        v_numtemp NUMBER;
        v_strtemp VARCHAR2(32000) DEFAULT NULL;
        v_colstr VARCHAR2(500) DEFAULT NULL;
        v_datetemp DATE;
        t_desc_tab dbms_sql.desc_tab2;
        v_dados_temp ttabstr;
        v_cols tcnjstr;
        v_clientes_ativos NUMBER DEFAULT 0;
        v_clientes_positivados NUMBER DEFAULT 0;
        v_tab_html ttabela;
    BEGIN
        v_dtcriacao := to_char(sysdate, 'ddmmyyyy');
        v_cmd_original := '
        with clientes_jumbo as (
            SELECT
                c.codusur1,
                c.codcli,
                c.cliente,
                c.fantasia,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) as dtultcomp,
                c.limcred,
                c.bloqueio    
            FROM
                jumbo.pcclient c
                left outer join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem ca on (ca.codcli_erp = c.codcli)    
            where
                c.dtexclusao is null
                and c.codusur1 not in (106,130,333,150,222,230,207,215)
                and greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) < to_date(''01/'' || to_char(sysdate,''mm'') || ''/'' || to_char(sysdate,''yyyy''),''dd/mm/yyyy'')
                __CONDICJUMBO__
            order by 
                limcred desc,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) desc
        ),
        clientes_aurora as (
            SELECT
                nvl(c.codusur1,nvl(ca.codvendedor_erp,ca.codvendedororigem)) as cdusur1,
                nvl(c.codcli,po.numcnpjcpf) as codcli,
                nvl(c.cliente,po.nomerazao) as cliente,
                nvl(c.fantasia,po.fantasia) as fantasia,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) as dtultcomp,
                nvl(c.limcred,0) as limcred,
                nvl(c.bloqueio,''N'') as bloqueio
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem ca
                join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pessoa_origem po on (po.codpessoa = ca.codpessoaorigem)
                left outer join jumbo.pcclient c on (to_number(regexp_replace(po.numcnpjcpf,''[^0-9]*'')) = to_number(regexp_replace(c.cgcent,''[^0-9]*'')))    
            where
                nvl(c.dtexclusao,null) is null
                and nvl(c.codusur1,nvl(ca.codvendedor_erp,ca.codvendedororigem)) not in (106,130,333,150,222,230,207,215)
                and greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) < to_date(''01/'' || to_char(sysdate,''mm'') || ''/'' || to_char(sysdate,''yyyy''),''dd/mm/yyyy'')
                and not exists(select 1 from clientes_jumbo cj where cj.codcli = ca.codcli_erp)
                __CONDICAURORA__
            order by 
                c.limcred desc,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) desc
        ),
        clientes_juntos as (
            select * from clientes_jumbo
            union all 
            select * from clientes_aurora
        ),resultante as (
            select 
                codusur1,
                codcli,
                cliente,
                fantasia,
                max(dtultcomp) as dtultcomp,
                limcred,
                bloqueio
            from 
                clientes_juntos
            group by
                codusur1,
                codcli,
                cliente,
                fantasia,
                limcred,
                bloqueio
        )
        select * from resultante order by 6 desc,5 desc    
    ';
        v_cmd_ativos_original := '
        with clientes_jumbo as (
            SELECT
                c.codusur1,
                c.codcli,
                c.cliente,
                c.fantasia,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) as dtultcomp,
                c.limcred,
                c.bloqueio    
            FROM
                jumbo.pcclient c
                left outer join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem ca on (ca.codcli_erp = c.codcli)    
            where
                c.dtexclusao is null
                and c.codusur1 not in (106,130,333,150,222,230,207,215)
                __CONDICJUMBO__
            order by 
                limcred desc,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) desc
        ),
        clientes_aurora as (
            SELECT
                nvl(c.codusur1,nvl(ca.codvendedor_erp,ca.codvendedororigem)) as cdusur1,
                nvl(c.codcli,po.numcnpjcpf) as codcli,
                nvl(c.cliente,po.nomerazao) as cliente,
                nvl(c.fantasia,po.fantasia) as fantasia,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) as dtultcomp,
                nvl(c.limcred,0) as limcred,
                nvl(c.bloqueio,''N'') as bloqueio
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem ca         
                join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pessoa_origem po on (po.codpessoa = ca.codpessoaorigem)
                left outer join jumbo.pcclient c on (to_number(regexp_replace(po.numcnpjcpf,''[^0-9]*'')) = to_number(regexp_replace(c.cgcent,''[^0-9]*'')))    
            where
                nvl(c.dtexclusao,null) is null
                and nvl(c.codusur1,nvl(ca.codvendedor_erp,ca.codvendedororigem))  not in (106,130,333,150,222,230,207,215)
                and not exists(select 1 from clientes_jumbo cj where cj.codcli = ca.codcli_erp)
                __CONDICAURORA__
            order by 
                c.limcred desc,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) desc
        ),
        clientes_juntos as (
            select * from clientes_jumbo
            union all 
            select * from clientes_aurora
        ),resultante as (
            select 
                codusur1,
                codcli,
                cliente,
                fantasia,
                max(dtultcomp) as dtultcomp,
                limcred,
                bloqueio
            from 
                clientes_juntos
            group by
                codusur1,
                codcli,
                cliente,
                fantasia,
                limcred,
                bloqueio
        )
        select count(1) from resultante
    ';
        v_cmd_cliposit_original := '
        with clientes_jumbo as (
            SELECT
                c.codusur1,
                c.codcli,
                c.cliente,
                c.fantasia,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) as dtultcomp,
                c.limcred,
                c.bloqueio    
            FROM
                jumbo.pcclient c
                left outer join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem ca on (ca.codcli_erp = c.codcli)    
            where
                c.dtexclusao is null
                and c.codusur1  not in (106,130,333,150,222,230,207,215)
                and greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) >= to_date(''01/'' || to_char(sysdate,''mm'') || ''/'' || to_char(sysdate,''yyyy''),''dd/mm/yyyy'')
                __CONDICJUMBO__
            order by 
                limcred desc,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) desc
        ),
        clientes_aurora as (
            SELECT
                nvl(c.codusur1,nvl(ca.codvendedor_erp,ca.codvendedororigem)) as cdusur1,
                nvl(c.codcli,po.numcnpjcpf) as codcli,
                nvl(c.cliente,po.nomerazao) as cliente,
                nvl(c.fantasia,po.fantasia) as fantasia,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) as dtultcomp,
                nvl(c.limcred,0) as limcred,
                nvl(c.bloqueio,''N'') as bloqueio
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem ca    
                join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pessoa_origem po on (po.codpessoa = ca.codpessoaorigem)
                left outer join jumbo.pcclient c on (to_number(regexp_replace(po.numcnpjcpf,''[^0-9]*'')) = to_number(regexp_replace(c.cgcent,''[^0-9]*'')))    
            where
                nvl(c.dtexclusao,null) is null
                and nvl(c.codusur1,nvl(ca.codvendedor_erp,ca.codvendedororigem))  not in (106,130,333,150,222,230,207,215)
                and greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) >= to_date(''01/'' || to_char(sysdate,''mm'') || ''/'' || to_char(sysdate,''yyyy''),''dd/mm/yyyy'')
                and not exists(select 1 from clientes_jumbo cj where cj.codcli = ca.codcli_erp)
                __CONDICAURORA__
            order by 
                c.limcred desc,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) desc
        ),
        clientes_juntos as (
            select * from clientes_jumbo
            union all 
            select * from clientes_aurora
        ),resultante as (
            select 
                codusur1,
                codcli,
                cliente,
                fantasia,
                max(dtultcomp) as dtultcomp,
                limcred,
                bloqueio
            from 
                clientes_juntos
            group by
                codusur1,
                codcli,
                cliente,
                fantasia,
                limcred,
                bloqueio
        )
        select count(1) from resultante
    ';
        v_cmd_primeiros_original := '
        with clientes_jumbo as (
            SELECT
                c.codusur1,
                c.codcli,
                c.cliente,
                c.fantasia,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) as dtultcomp,
                c.limcred,
                c.bloqueio    
            FROM
                jumbo.pcclient c
                left outer join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem ca on (ca.codcli_erp = c.codcli)    
            where
                c.dtexclusao is null
                and c.codusur1  not in (106,130,333,150,222,230,207,215)
                and greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) < to_date(''01/'' || to_char(sysdate,''mm'') || ''/'' || to_char(sysdate,''yyyy''),''dd/mm/yyyy'')
                __CONDICJUMBO__
            order by 
                limcred desc,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) desc
        ),
        clientes_aurora as (
            SELECT
                nvl(c.codusur1,nvl(ca.codvendedor_erp,ca.codvendedororigem)) as cdusur1,
                nvl(c.codcli,po.numcnpjcpf) as codcli,
                nvl(c.cliente,po.nomerazao) as cliente,
                nvl(c.fantasia,po.fantasia) as fantasia,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) as dtultcomp,
                nvl(c.limcred,0) as limcred,
                nvl(c.bloqueio,''N'') as bloqueio
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem ca  
                join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pessoa_origem po on (po.codpessoa = ca.codpessoaorigem)
                left outer join jumbo.pcclient c on (to_number(regexp_replace(po.numcnpjcpf,''[^0-9]*'')) = to_number(regexp_replace(c.cgcent,''[^0-9]*'')))    
            where
                nvl(c.dtexclusao,null) is null
                and nvl(c.codusur1,nvl(ca.codvendedor_erp,ca.codvendedororigem))  not in (106,130,333,150,222,230,207,215)
                and greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) < to_date(''01/'' || to_char(sysdate,''mm'') || ''/'' || to_char(sysdate,''yyyy''),''dd/mm/yyyy'')
                and not exists(select 1 from clientes_jumbo cj where cj.codcli = ca.codcli_erp)
                __CONDICAURORA__
            order by 
                limcred desc,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) desc
        ),
        clientes_juntos as (
            select * from clientes_jumbo
            union all 
            select * from clientes_aurora
        ),resultante as (
            select 
                codusur1,
                codcli,
                cliente,
                fantasia,
                max(dtultcomp) as dtultcomp,
                limcred,
                bloqueio
            from 
                clientes_juntos
            group by
                codusur1,
                codcli,
                cliente,
                fantasia,
                limcred,
                bloqueio
        )
        select * from resultante order by 6 desc,5 desc';
        v_condic_inicial_jum := ' and c.codcli not in (13519,13363,2848,1919,3829,28309) ';
        v_condic_inicial_aur := ' AND nvl(c.codcli, ca.codcli_erp) NOT IN (13519,13363,2848,1919,3829,28309)';
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) 
            AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo', p_owner => '__FNV_GET_NOMESCHEMA__') ) 
            AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_conteudo_email_original := utl_tcp.crlf || 'Car&iacute;ssimo __USUARIO__,' 
                || utl_tcp.crlf || utl_tcp.crlf || '<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Segue em anexo seus clientes que ainda n&atilde;o positivaram este m&ecirc;s. ' 
                || utl_tcp.crlf || utl_tcp.crlf || '<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A t&iacute;tulo de conhecimento. ' 
                || utl_tcp.crlf || utl_tcp.crlf || '<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Se atentar aos clientes n&atilde;o positivados nesse m&ecirc;s, principalmente os n&atilde;o bloqueados e que tem os maiores limites, assim como compradores assiduos e tambem tentar recuperar os bloqueados.' 
                || utl_tcp.crlf || utl_tcp.crlf || '<br /><br />A sua situa&ccedil;&atilde;o em rela&ccedil;&atilde;o a positiva&ccedil;&atilde;o de clientes est&aacute; assim:' 
                || utl_tcp.crlf || '<br />Clientes Ativos : ' || '__CLIENTES_ATIVOS__' 
                || utl_tcp.crlf || '<br />Clientes Positivados : ' || '__CLIENTES_POSITIVADOS__' 
                || utl_tcp.crlf || '<br />Clientes Para Positivar : ' || '__CLIENTES_NAO_POSITIVADOS__' 
                || utl_tcp.crlf || utl_tcp.crlf || '<br /><br />Veja abaixo alguns destes que est&atilde;o no anexo: <br /> <br />' 
                || utl_tcp.crlf || utl_tcp.crlf || '__PRIMEIROS_REGISTROS__' || utl_tcp.crlf;
            FOR lf IN (
                SELECT
                    f.codigo, f.cidade, f.email
                FROM
                    jumbo.pcfilial f
                WHERE
                    ( 
                        ( 
                            ( 
                                p_codfilial IS NOT NULL 
                                AND p_codfilial <> 0 
                            ) 
                            AND f.codigo = p_codfilial 
                        ) OR ( 
                            ( 
                                p_codfilial IS NULL 
                                OR p_codfilial = 0 
                            ) AND 1 = 1 
                        ) 
                    ) AND f.codigo <> 99 
                    ORDER BY 1
            ) LOOP
                v_condic_filial_jum := '(c.codfilialnf = ' || lf.codigo || ' or c.codusur1 in (select u.codusur from jumbo.pcusuari u where u.codfilial = ' || lf.codigo || '))';
                v_condic_filial_aur := '(nvl(c.codusur1,nvl(ca.codvendedor_erp,ca.codvendedororigem)) in (select u.codusur from jumbo.pcusuari u where u.codfilial = ' || lf.codigo || '))';
                FOR ls IN (
                    SELECT DISTINCT
                        s.codsupervisor, s.nome, u.codfilial, 
                        CASE
                            WHEN s.codsupervisor IN (
                                5
                            ) THEN
                                (
                                    SELECT
                                        s2.email
                                    FROM
                                        jumbo.pcsuperv s2
                                    WHERE
                                        s2.codsupervisor = 6
                                )
                            ELSE
                                s.email
                        END AS email
                    FROM
                        jumbo.pcsuperv   s
                        JOIN jumbo.pcusuari   u ON ( u.codsupervisor = s.codsupervisor )
                    WHERE
                        u.codfilial = lf.codigo
                        AND ( 
                            ( 
                                ( 
                                    p_codsuperv IS NOT NULL 
                                    AND p_codsuperv <> 0 
                                ) AND s.codsupervisor = p_codsuperv 
                            ) OR ( 
                                ( 
                                    p_codsuperv IS NULL OR p_codsuperv = 0 
                                ) AND 1 = 1 
                            ) 
                        ) AND EXISTS (
                            SELECT
                                1
                            FROM
                                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia s
                            WHERE
                                s.codentidade = u.codusur 
                                AND lower(TRIM(s.visao)) = 'cliente' 
                                AND lower(TRIM(s.unidade)) = 'mix' 
                                AND s.ano = to_char(sysdate, 'yyyy')
                                AND s.mes = upper(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM'))))
                        )
                    ORDER BY
                        1
                ) LOOP
                    v_condic_superv_jum := 'c.codusur1 in (select u.codusur from jumbo.pcusuari u where u.codsupervisor = ' || ls.codsupervisor || ')';
                    v_condic_superv_aur := '(nvl(c.codusur1,nvl(ca.codvendedor_erp,ca.codvendedororigem)) in (select u.codusur from jumbo.pcusuari u where u.codsupervisor = ' || ls.codsupervisor || '))';
                    FOR lu IN (
                        SELECT
                            u.codusur, u.nome, 
                            CASE
                                WHEN u.codusur IN (
                                    106
                                ) THEN
                                    (
                                        SELECT
                                            u2.email
                                        FROM
                                            jumbo.pcusuari u2
                                        WHERE
                                            u2.codusur = 130
                                    )
                                ELSE
                                    u.email
                            END AS email
                        FROM
                            jumbo.pcusuari u
                        WHERE
                            u.codusur > 100 
                            AND u.codusur < 300 
                            AND u.codusur NOT IN (
                                150, 251
                            ) 
                            AND u.codfilial = lf.codigo 
                            AND u.codsupervisor = ls.codsupervisor 
                            AND ( 
                                ( 
                                    ( 
                                        p_codusur IS NOT NULL 
                                        AND p_codusur <> 0 
                                    ) 
                                    AND u.codusur = p_codusur 
                                ) OR ( 
                                    ( 
                                        p_codusur IS NULL 
                                        OR p_codusur = 0 
                                    ) 
                                    AND 1 = 1 
                                ) 
                            ) 
                            AND nvl(u.bloqueio, 'x') <> 'S' 
                            AND EXISTS (
                                SELECT
                                    1
                                FROM
                                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia s
                                WHERE
                                    s.codentidade = u.codusur 
                                    AND lower(TRIM(s.visao)) = 'cliente' 
                                    AND lower(TRIM(s.unidade)) = 'mix' 
                                    AND s.ano = to_char(sysdate, 'yyyy') 
                                    AND s.mes = upper(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM'))))
                            ) AND u.dttermino IS NULL
                        ORDER BY
                            1
                    ) LOOP
                        v_condic_rca_jum := 'c.codusur1=' || lu.codusur;
                        v_condic_rca_aur := 'nvl(c.codusur1,nvl(ca.codvendedor_erp,ca.codvendedororigem))=' || lu.codusur;
                        v_condic_jum := v_condic_inicial_jum || ' and ' || v_condic_filial_jum || ' and ' || v_condic_superv_jum || ' and ' || v_condic_rca_jum;
                        v_condic_aur := v_condic_inicial_aur || ' and ' || v_condic_filial_aur || ' and ' || v_condic_superv_aur || ' and ' || v_condic_rca_aur;
                        v_cmd := replace(replace(v_cmd_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
                        v_cmd_primeiros := replace(replace(v_cmd_primeiros_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
                        v_cmd_cliposit := replace(replace(v_cmd_cliposit_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
                        v_cmd_ativos := replace(replace(v_cmd_ativos_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
                        --dbms_output.put_line(v_cmd_ativos);return;
                        --dbms_output.put_line(v_cmd_cliposit);return;
                        v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_ativos);                        
                        v_clientes_ativos := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);                        
                        v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_cliposit);                        
                        v_clientes_positivados := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);                        
                        v_conteudo_email := replace(v_conteudo_email_original, '__USUARIO__', 'RCA ' || lu.codusur || '-' || lu.nome);                        
                        v_tab_html := primeiros_registros(v_cmd_primeiros);
                        v_conteudo_email := replace(v_conteudo_email, '__PRIMEIROS_REGISTROS__', '__TABHTML__');
                        v_conteudo_email := replace(v_conteudo_email, '__CLIENTES_ATIVOS__', v_clientes_ativos);
                        v_conteudo_email := replace(v_conteudo_email, '__CLIENTES_POSITIVADOS__', v_clientes_positivados);
                        v_conteudo_email := replace(v_conteudo_email, '__CLIENTES_NAO_POSITIVADOS__',(v_clientes_ativos - v_clientes_positivados));
                        IF ( ( v_clientes_ativos - v_clientes_positivados ) > 0 ) AND ( v_tab_html.linhas.count > 0 ) THEN
                            --dbms_output.put_line(v_cmd_primeiros); return;
                            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                                pr_email_para => lower(nvl(lu.email, 'jumbo.ti@jumboalimentos.com.br' || ';' || ls.email || ';' || lf.email)), 
                                pr_email_copias_para => 'jumbo.ti@jumboalimentos.com.br', 
                                --pr_email_para => 'jumbo.ti@jumboalimentos.com.br',
                                pr_titulo_email => v_titulo_email, 
                                pr_corpo_email => v_conteudo_email, 
                                pr_nome_anexo => 'clientes.csv', 
                                pr_comando_sql_anexo => v_cmd, 
                                pr_tab_html => v_tab_html
                            );
                            --return;
                        END IF;
                    END LOOP;
                    v_condic_jum := v_condic_inicial_jum || ' and ' || v_condic_filial_jum || ' and ' || v_condic_superv_jum;
                    v_condic_aur := v_condic_inicial_aur || ' and ' || v_condic_filial_aur || ' and ' || v_condic_superv_aur;
                    v_cmd := replace(replace(v_cmd_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
                    v_cmd_primeiros := replace(replace(v_cmd_primeiros_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
                    v_cmd_cliposit := replace(replace(v_cmd_cliposit_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
                    v_cmd_ativos := replace(replace(v_cmd_ativos_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
                    v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_ativos);
                    v_clientes_ativos := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);
                    v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_cliposit);
                    v_clientes_positivados := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);
                    v_conteudo_email := replace(v_conteudo_email_original, '__USUARIO__', 'Supervisor ' || ls.codsupervisor || '-' || ls.nome);
                    v_tab_html := primeiros_registros(v_cmd_primeiros);
                    v_conteudo_email := replace(v_conteudo_email, '__PRIMEIROS_REGISTROS__', '__TABHTML__');
                    v_conteudo_email := replace(v_conteudo_email, '__CLIENTES_ATIVOS__', v_clientes_ativos);
                    v_conteudo_email := replace(v_conteudo_email, '__CLIENTES_POSITIVADOS__', v_clientes_positivados);
                    v_conteudo_email := replace(v_conteudo_email, '__CLIENTES_NAO_POSITIVADOS__',(v_clientes_ativos - v_clientes_positivados));
                    IF ( v_clientes_ativos - v_clientes_positivados ) > 0 THEN
                        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                            pr_email_para => lower(nvl(ls.email, 'jumbo.ti@jumboalimentos.com.br;' || lf.email)), 
                            pr_email_copias_para => 'jumbo.ti@jumboalimentos.com.br;felipe@jumboalimentos.com.br', 
                            --pr_email_para => 'jumbo.ti@jumboalimentos.com.br',
                            pr_titulo_email => v_titulo_email,
                            pr_corpo_email => v_conteudo_email, 
                            pr_nome_anexo => 'clientes.csv', 
                            pr_comando_sql_anexo => v_cmd, 
                            pr_tab_html => v_tab_html
                        );
                        --return;
                    END IF;
                END LOOP;
                v_condic_jum := v_condic_inicial_jum || ' and ' || v_condic_filial_jum;
                v_condic_aur := v_condic_inicial_aur || ' and ' || v_condic_filial_aur;
                v_cmd := replace(replace(v_cmd_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
                v_cmd_primeiros := replace(replace(v_cmd_primeiros_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
                v_cmd_cliposit := replace(replace(v_cmd_cliposit_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
                v_cmd_ativos := replace(replace(v_cmd_ativos_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
                v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_ativos);
                v_clientes_ativos := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);
                v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_cliposit);
                v_clientes_positivados := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);
                v_conteudo_email := replace(v_conteudo_email_original, '__USUARIO__', 'Filial ' || lf.codigo || '-' || lf.cidade);
                v_tab_html := primeiros_registros(v_cmd_primeiros);
                v_conteudo_email := replace(v_conteudo_email, '__PRIMEIROS_REGISTROS__', '__TABHTML__');
                v_conteudo_email := replace(v_conteudo_email, '__CLIENTES_ATIVOS__', v_clientes_ativos);
                v_conteudo_email := replace(v_conteudo_email, '__CLIENTES_POSITIVADOS__', v_clientes_positivados);
                v_conteudo_email := replace(v_conteudo_email, '__CLIENTES_NAO_POSITIVADOS__',(v_clientes_ativos - v_clientes_positivados));
                IF ( v_clientes_ativos - v_clientes_positivados ) > 0 THEN
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                        pr_email_para => lower(nvl(lf.email, 'jumbo.ti@jumboalimentos.com.br')), 
                        pr_email_copias_para => 'jumbo.ti@jumboalimentos.com.br;felipe@jumboalimentos.com.br', 
                        --pr_email_para => 'jumbo.ti@jumboalimentos.com.br',
                        pr_titulo_email => v_titulo_email, 
                        pr_corpo_email => v_conteudo_email, 
                        pr_nome_anexo => 'clientes.csv', 
                        pr_comando_sql_anexo => v_cmd, 
                        pr_tab_html => v_tab_html
                    );
                    --return;
                END IF;
            END LOOP;
            v_condic_jum := v_condic_inicial_jum;
            v_condic_aur := v_condic_inicial_aur;
            v_cmd := replace(replace(v_cmd_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
            v_cmd_primeiros := replace(replace(v_cmd_primeiros_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
            v_cmd_cliposit := replace(replace(v_cmd_cliposit_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
            v_cmd_ativos := replace(replace(v_cmd_ativos_original, '__CONDICJUMBO__', v_condic_jum), '__CONDICAURORA__', v_condic_aur);
            v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_ativos);
            v_clientes_ativos := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);
            v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_cliposit);
            v_clientes_positivados := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);
            v_conteudo_email := replace(v_conteudo_email_original, '__USUARIO__', 'JUMBO ALIMENTOS');
            v_tab_html := primeiros_registros(v_cmd_primeiros);
            v_conteudo_email := replace(v_conteudo_email, '__PRIMEIROS_REGISTROS__', '__TABHTML__');
            v_conteudo_email := replace(v_conteudo_email, '__CLIENTES_ATIVOS__', v_clientes_ativos);
            v_conteudo_email := replace(v_conteudo_email, '__CLIENTES_POSITIVADOS__', v_clientes_positivados);
            v_conteudo_email := replace(v_conteudo_email, '__CLIENTES_NAO_POSITIVADOS__',(v_clientes_ativos - v_clientes_positivados));
            IF ( v_clientes_ativos - v_clientes_positivados ) > 0 THEN
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                    pr_email_para => 'felipe@jumboalimentos.com.br', 
                    pr_email_copias_para => 'jumbo.ti@jumboalimentos.com.br', 
                    pr_titulo_email => v_titulo_email, 
                    pr_corpo_email => v_conteudo_email, 
                    pr_nome_anexo => 'clientes.csv', 
                    pr_comando_sql_anexo => v_cmd, 
                    pr_tab_html => v_tab_html
                );
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_linha => $$plsql_line);
    END relcli_naoposit;
    PROCEDURE relpro_naoposit (
        p_codfilial NUMBER DEFAULT NULL, 
        p_codsuperv NUMBER DEFAULT NULL, 
        p_codusur NUMBER DEFAULT NULL
    ) AS        
        v_cmd_prodnaoposit_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_primeiros_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_prodposit_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_prodposit VARCHAR2(32000) DEFAULT NULL;
        v_cmd_ativos_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_ativos VARCHAR2(32000) DEFAULT NULL;
        v_cmd VARCHAR2(32000) DEFAULT NULL;
        v_cmd_primeiros VARCHAR2(32000) DEFAULT NULL;
        v_nome_dir VARCHAR2(100) DEFAULT 'DIR_REL';
        v_nome_arq VARCHAR2(255) DEFAULT NULL;
        v_dtcriacao VARCHAR2(255) DEFAULT NULL;
        v_condic_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_inicial_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_inicial_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_filial_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_filial_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_superv_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_superv_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_rca_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_rca_aur VARCHAR2(4000) DEFAULT NULL;
        v_cursor_id INTEGER;
        v_linha VARCHAR2(32000) DEFAULT NULL;
        t_col_cnt INTEGER;
        v_titulo_email VARCHAR2(4000) DEFAULT 'Mix de Produtos';
        v_conteudo_email_original VARCHAR2(32000) NULL;
        v_conteudo_email VARCHAR2(32000) NULL;
        v_numtemp NUMBER;
        v_strtemp VARCHAR2(32000) DEFAULT NULL;
        v_colstr VARCHAR2(500) DEFAULT NULL;
        v_datetemp DATE;
        t_desc_tab dbms_sql.desc_tab2;
        v_dados_temp ttabstr;
        v_cols tcnjstr;
        v_produtos_ativos NUMBER DEFAULT 0;
        v_produtos_positivados NUMBER DEFAULT 0;
        v_comando_corrente CLOB;
        v_tab_html ttabela;
    BEGIN
        v_dtcriacao := to_char(sysdate, 'ddmmyyyy');
        v_cmd_prodnaoposit_original := '
        WITH usuarios AS (
            SELECT
                pcusuari.codusur AS \"codusuariosis\",
                MAX(pcusuari.nome) AS \"nome\"
            FROM
                jumbo.pcusuari
            WHERE
                ( pcusuari.codusur in (__CONDICCODUSUR__) )
            GROUP BY
                pcusuari.codusur
            UNION
            SELECT
                nvl(__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codusur_erp,__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codusur_na_origem) AS \"codusuariosis\",
                MAX(__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.nome) AS \"nome\"
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuarios_origem
            WHERE
                ( nvl(__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codusur_erp,__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codusur_na_origem) in (__CONDICCODUSUR__) )
                AND NOT EXISTS (
                    SELECT
                        1
                    FROM
                        jumbo.pcusuari
                    WHERE
                        pcusuari.codusur = __FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codusur_erp
                )
            GROUP BY
                nvl(__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codusur_erp,__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codusur_na_origem)
        ), produtos AS (
            SELECT DISTINCT
                TO_CHAR(nvl(__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codvisivelgrupo, pcprodut.codprod)) AS \"codprod\",
                MAX(nvl(__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.nomegrupoprod, pcprodut.descricao)) AS \"descricao\"
            FROM
                jumbo.pcprodut
                LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod ON __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codprod = pcprodut.codprod
                LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv ON __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codgrupoprod = __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codgrupoprod
            GROUP BY
                TO_CHAR(nvl(__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codvisivelgrupo, pcprodut.codprod))
            UNION
            SELECT DISTINCT
                TO_CHAR(nvl(__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codvisivelgrupo, nvl(__FNV_GET_PREFIXOBJECTSDB__produto_origem.codprod_erp,__FNV_GET_PREFIXOBJECTSDB__produto_origem.codprod_na_origem))) AS \"codprod\",
                MAX(nvl(__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.nomegrupoprod, __FNV_GET_PREFIXOBJECTSDB__produto_origem.descricao)) AS \"descricao\"
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__produto_origem
                LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod ON __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codprod = nvl(__FNV_GET_PREFIXOBJECTSDB__produto_origem.codprod_erp,__FNV_GET_PREFIXOBJECTSDB__produto_origem.codprod_na_origem)
                LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv ON __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codgrupoprod = __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codgrupoprod
            WHERE
                NOT EXISTS (
                    SELECT
                        1
                    FROM
                        jumbo.pcprodut
                    WHERE
                        pcprodut.codprod = nvl(__FNV_GET_PREFIXOBJECTSDB__produto_origem.codprod_erp,__FNV_GET_PREFIXOBJECTSDB__produto_origem.codprod_na_origem)
                )
            GROUP BY
                TO_CHAR(nvl(__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codvisivelgrupo, nvl(__FNV_GET_PREFIXOBJECTSDB__produto_origem.codprod_erp,__FNV_GET_PREFIXOBJECTSDB__produto_origem.codprod_na_origem)))
        ), valoressaida0 AS (
            SELECT
                to_number(pcmov.codusur) AS \"codusur\",
                TO_CHAR(nvl(__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codvisivelgrupo, pcmov.codprod)) AS \"codprod\",
                nvl(nvl(pcmov.pesoliq, pcprodut.pesoliq), 0) * ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) - nvl(pcmov.qtdevol, 0) ) AS \"pesototal\"
            FROM
                jumbo.pcmov
                JOIN jumbo.pcnfsaid           pcnfsaid ON ( pcmov.numtransvenda = pcnfsaid.numtransvenda
                                                    AND pcnfsaid.dtcancel IS NULL )                
                JOIN jumbo.pcprodut           pcprodut ON ( pcprodut.codprod = pcmov.codprod )
                JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis   __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( pcnfsaid.codusur = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod ON ( __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codprod = pcmov.codprod )
                LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv ON ( __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codgrupoprod = __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codgrupoprod )
            WHERE
                pcnfsaid.dtsaida BETWEEN ADD_MONTHS(trunc(SYSDATE) - ( to_number(TO_CHAR(SYSDATE, ''dd'')) - 1 ),-1) AND LAST_DAY(ADD_MONTHS(trunc(SYSDATE) - ( to_number(TO_CHAR(SYSDATE, ''dd'')) - 1 ),-1))
                AND pcmov.codoper IN ( ''S'' )
                AND pcnfsaid.especie = ''NF''
            UNION ALL
            SELECT
                to_number(dados_vendas_origem.vendedor) AS \"codusur\",
                TO_CHAR(nvl(__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codvisivelgrupo, dados_vendas_origem.cd_item)) AS \"codprod\",
                nvl(dados_vendas_origem.peso_liquido_item, 0) AS \"pesototal\"
            FROM
                __FNV_GET_NOMESCHEMA__.dados_vendas_origem
                JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( dados_vendas_origem.vendedor = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod ON __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codprod = dados_vendas_origem.cd_item
                LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv ON __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codgrupoprod = __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codgrupoprod
            WHERE
                dados_vendas_origem.dt_emissao_nfsa BETWEEN ADD_MONTHS(trunc(SYSDATE) - ( to_number(TO_CHAR(SYSDATE, ''dd'')) - 1 ),-1) AND LAST_DAY(ADD_MONTHS(trunc(SYSDATE) - ( to_number(TO_CHAR(SYSDATE, ''dd'')) - 1 ),-1))
        ), valoressaida1 AS (
            SELECT
                to_number(pcmov.codusur) AS \"codusur\",
                TO_CHAR(nvl(__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codvisivelgrupo, pcmov.codprod)) AS \"codprod\",
                nvl(nvl(pcmov.pesoliq, pcprodut.pesoliq), 0) * ( nvl(nvl(pcmov.qt, pcmov.qtcont), 0) - nvl(pcmov.qtdevol, 0) ) AS \"pesototal\"
            FROM
                jumbo.pcmov
                JOIN jumbo.pcnfsaid           pcnfsaid ON ( pcmov.numtransvenda = pcnfsaid.numtransvenda
                                                    AND pcnfsaid.dtcancel IS NULL )
                JOIN jumbo.pcprodut           pcprodut ON ( pcprodut.codprod = pcmov.codprod )
                JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis   __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( pcnfsaid.codusur = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod ON ( __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codprod = pcmov.codprod )
                LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv ON ( __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codgrupoprod = __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codgrupoprod )
            WHERE
                pcnfsaid.dtsaida BETWEEN trunc(SYSDATE) - ( to_number(TO_CHAR(SYSDATE, ''dd'')) - 1 ) AND LAST_DAY(trunc(SYSDATE) - ( to_number(TO_CHAR(SYSDATE, ''dd'')) - 1 ))
                AND pcmov.codoper IN ( ''S'' )
                AND pcnfsaid.especie = ''NF''
            UNION ALL
            SELECT
                to_number(dados_vendas_origem.vendedor) AS \"codusur\",
                TO_CHAR(nvl(__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codvisivelgrupo, dados_vendas_origem.cd_item)) AS \"codprod\",
                nvl(dados_vendas_origem.peso_liquido_item, 0) AS \"pesototal\"
            FROM
                __FNV_GET_NOMESCHEMA__.dados_vendas_origem
                JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuariosis __FNV_GET_PREFIXOBJECTSDB__usuariosis ON ( dados_vendas_origem.vendedor = __FNV_GET_PREFIXOBJECTSDB__usuariosis.codusuariosis
                                                                AND nvl(__FNV_GET_PREFIXOBJECTSDB__usuariosis.contabilizarvendas, 0) = 1 )
                LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__integgrupoprod ON __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codprod = dados_vendas_origem.cd_item
                LEFT OUTER JOIN __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv ON __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codgrupoprod = __FNV_GET_PREFIXOBJECTSDB__integgrupoprod.codgrupoprod
            WHERE
                dados_vendas_origem.dt_emissao_nfsa between trunc(SYSDATE) - ( to_number(TO_CHAR(SYSDATE, ''dd'')) - 1 ) AND LAST_DAY(trunc(SYSDATE) - ( to_number(TO_CHAR(SYSDATE, ''dd'')) - 1 ))
        ), r0 AS (
            SELECT
                produtos.\"codprod\"          AS \"codprod\",
                produtos.\"descricao\"        AS \"descricao\",
                valoressaida0.\"pesototal\"   AS \"pesototal0\",
                NULL AS \"pesototal1\"
            FROM
                valoressaida0
                JOIN usuarios   usuarios ON ( usuarios.\"codusuariosis\" = valoressaida0.\"codusur\" )
                LEFT OUTER JOIN produtos   produtos ON ( produtos.\"codprod\" = valoressaida0.\"codprod\" )
        ), r1 AS (
            SELECT
                produtos.\"codprod\"          AS \"codprod\",
                produtos.\"descricao\"        AS \"descricao\",
                NULL AS \"pesototal0\",
                valoressaida1.\"pesototal\"   AS \"pesototal1\"
            FROM
                valoressaida1
                JOIN usuarios   usuarios ON ( usuarios.\"codusuariosis\" = valoressaida1.\"codusur\" )
                LEFT OUTER JOIN produtos   produtos ON ( produtos.\"codprod\" = valoressaida1.\"codprod\" )
        ), r AS (
            SELECT
                *
            FROM
                r0
            UNION ALL
            SELECT
                *
            FROM
                r1
        ), resultante AS (
            SELECT
                TO_CHAR(r.\"codprod\") AS \"codprod\",
                MAX(r.\"descricao\") AS \"descricao\",
                SUM(nvl(r.\"pesototal0\", 0)) AS \"Mes anterior\",
                SUM(nvl(r.\"pesototal1\", 0)) AS \"Mes atual\"
            FROM
                r
            GROUP BY
                \"codprod\",
                \"descricao\"
            HAVING
                SUM(nvl(r.\"pesototal1\", 0)) <= 0
        )
        SELECT
            *
        FROM
            resultante
        UNION ALL
        SELECT DISTINCT
            __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao,
            nvl(pcprodut.descricao,(
                SELECT
                    nomegrupoprod
                FROM
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv
                WHERE
                    __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codvisivelgrupo = __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao
            )),
            0,
            0
        FROM
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia
            LEFT OUTER JOIN jumbo.pcprodut ON ( TO_CHAR(pcprodut.codprod) = __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao )
        WHERE
            __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.visao = ''produto''
            AND __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao IS NOT NULL
            AND __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.ano IN (
                to_number(to_char(sysdate,''yyyy'')),
                to_number(to_char(sysdate,''yyyy''))
            )
            AND lower(TRIM(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.mes)) IN (
                ''' || __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM'))) || ''',
                ''' || __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM'))) || '''
            )
            AND NOT EXISTS (
                SELECT
                    1
                FROM
                    r
                WHERE
                    TO_CHAR(r.\"codprod\") = __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao
            )
            AND __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codentidade in (__CONDICCODUSUR__)
        ORDER BY
            3 desc';
        v_cmd_ativos_original := '
        WITH contagem as (
            SELECT DISTINCT
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao,
                nvl(pcprodut.descricao,(
                    SELECT
                        nomegrupoprod
                    FROM
                        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv
                    WHERE
                        __FNV_GET_PREFIXOBJECTSDB__gruposprodequiv.codvisivelgrupo = __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao
                )),
                0,
                0
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia
                LEFT OUTER JOIN jumbo.pcprodut ON ( TO_CHAR(pcprodut.codprod) = __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao )
            WHERE
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.visao = ''produto''
                AND __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao IS NOT NULL
                AND __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.ano IN (
                    to_number(to_char(sysdate,''yyyy'')),
                    to_number(to_char(sysdate,''yyyy''))
                )
                AND lower(TRIM(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.mes)) IN (
                    ''' || __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM'))) || ''',
                    ''' || __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM'))) || '''
                )                
                AND __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codentidade in (__CONDICCODUSUR__)
            )
        select count(1) as qt from contagem
    ';
        v_cmd_prodposit_original := '
        WITH contagem as (
            SELECT DISTINCT
                realizado
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia
            WHERE
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.visao = ''produto''
                and __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.unidade = ''mix''
                AND __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao IS NULL
                AND __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.ano IN (
                    to_number(to_char(sysdate,''yyyy'')),
                    to_number(to_char(sysdate,''yyyy''))
                )
                AND lower(TRIM(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.mes)) IN (
                    ''' || __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM'))) || ''',
                    ''' || __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM'))) || '''
                )                
                AND __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codentidade in (__CONDICCODUSUR__)
            )
        select sum(realizado) as qt from contagem
        
    ';
        v_cmd_primeiros_original := v_cmd_prodnaoposit_original;
        v_condic_inicial_jum := '';
        v_condic_inicial_aur := '';
        v_condic_jum := 'select codusur from jumbo.pcusuari union select nvl(codusur_erp,codusur_na_origem) from __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuarios_origem';
        v_condic_aur := 'select nvl(codusur_erp,codusur_na_origem) from __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuarios_origem';
        v_cmd := replace(v_cmd_prodnaoposit_original, '__CONDICCODUSUR__', v_condic_jum);
        v_cmd_primeiros := replace(v_cmd_primeiros_original, '__CONDICCODUSUR__', v_condic_jum);
        v_cmd_prodposit := replace(v_cmd_prodposit_original, '__CONDICCODUSUR__', v_condic_jum);
        v_cmd_ativos := replace(v_cmd_ativos_original, '__CONDICCODUSUR__', v_condic_jum);
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) 
            AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo', p_owner => '__FNV_GET_NOMESCHEMA__') ) 
            AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_comando_corrente := v_cmd_ativos;
            --dbms_output.put_line(v_cmd_ativos); return;
            v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_ativos);
            v_produtos_ativos := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);
            v_comando_corrente := v_cmd_prodposit;
            --dbms_output.put_line(v_cmd_prodposit); return;
            v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_prodposit);
            v_produtos_positivados := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);
            v_nome_arq := 'naoposit_' || v_dtcriacao || '.xlsx';
            v_conteudo_email_original := utl_tcp.crlf || 'Car&iacute;ssimo __USUARIO__,' 
                || utl_tcp.crlf || utl_tcp.crlf || '<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Segue em anexo seus produtos que ainda n&atilde;o positivaram este m&ecirc;s. ' 
                || utl_tcp.crlf || utl_tcp.crlf || '<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A t&iacute;tulo de conhecimento. ' 
                || utl_tcp.crlf || utl_tcp.crlf || '<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Se atentar aos produtos n&atilde;o positivados nesse m&ecirc;s, principalmente os que tiveram os maiores volumes nos periodos anteriores, assim como produtos de giro.' 
                || utl_tcp.crlf || utl_tcp.crlf || '<br /><br />A sua situa&ccedil;&atilde;o em rela&ccedil;&atilde;o ao mix de produtos est&aacute; assim:' 
                || utl_tcp.crlf || '<br />Produtos do Mix : ' || '__PRODUTOS_ATIVOS__' 
                || utl_tcp.crlf || '<br />Produtos Positivados : ' || '__PRODUTOS_POSITIVADOS__' 
                || utl_tcp.crlf || '<br />Produtos Para Positivar : ' || '__PRODUTOS_NAO_POSITIVADOS__' 
                || utl_tcp.crlf || utl_tcp.crlf || '<br /><br />Veja abaixo alguns destes que est&atilde;o no anexo:<br /> <br />' 
                || utl_tcp.crlf || utl_tcp.crlf || '__PRIMEIROS_REGISTROS__' || utl_tcp.crlf;
            v_conteudo_email := replace(v_conteudo_email_original, '__USUARIO__', 'JUMBO ALIMENTOS');
            --dbms_output.put_line(v_cmd_primeiros);return;
            v_tab_html := primeiros_registros(v_cmd_primeiros);
            v_conteudo_email := replace(v_conteudo_email, '__PRIMEIROS_REGISTROS__', '__TABHTML__');
            v_conteudo_email := replace(v_conteudo_email, '__PRODUTOS_ATIVOS__', v_produtos_ativos);
            v_conteudo_email := replace(v_conteudo_email, '__PRODUTOS_POSITIVADOS__', v_produtos_positivados);
            v_conteudo_email := replace(v_conteudo_email, '__PRODUTOS_NAO_POSITIVADOS__',(v_produtos_ativos - v_produtos_positivados));
            IF ( v_produtos_ativos - v_produtos_positivados ) > 0 THEN
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                    pr_email_para => 'felipe@jumboalimentos.com.br', 
                    pr_email_copias_para => 'jumbo.ti@jumboalimentos.com.br', 
                    --pr_email_para => 'jumbo.ti@jumboalimentos.com.br', 
                    pr_titulo_email => v_titulo_email, 
                    pr_corpo_email => v_conteudo_email, 
                    pr_nome_anexo => 'produtos.csv', 
                    pr_comando_sql_anexo => v_cmd, 
                    pr_tab_html => v_tab_html
                );
                --return;
            END IF;
            FOR lf IN (
                SELECT
                    f.codigo, f.cidade, f.email
                FROM
                    jumbo.pcfilial f
                WHERE
                    ( 
                        ( 
                            ( 
                                p_codfilial IS NOT NULL 
                                AND p_codfilial <> 0 
                            ) 
                            AND f.codigo = p_codfilial 
                        ) 
                        OR ( 
                            ( 
                                p_codfilial IS NULL 
                                OR p_codfilial = 0 
                            ) 
                            AND 1 = 1 
                        ) 
                    ) 
                    AND f.codigo <> 99                
                ORDER BY 1
            ) LOOP
                v_condic_jum := 'select codusur from jumbo.pcusuari where pcusuari.codfilial = ' || lf.codigo 
                    || ' union select nvl(codusur_erp,codusur_na_origem) from __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuarios_origem where nvl(__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codfilial_erp,__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codfilialorigem) = ' || lf.codigo;                
                v_cmd := replace(v_cmd_prodnaoposit_original, '__CONDICCODUSUR__', v_condic_jum);
                v_cmd_primeiros := replace(v_cmd_primeiros_original, '__CONDICCODUSUR__', v_condic_jum);
                v_cmd_prodposit := replace(v_cmd_prodposit_original, '__CONDICCODUSUR__', v_condic_jum);
                v_cmd_ativos := replace(v_cmd_ativos_original, '__CONDICCODUSUR__', v_condic_jum);
            
                v_comando_corrente := v_cmd_ativos;
                v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_ativos);
                v_produtos_ativos := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);
                v_comando_corrente := v_cmd_prodposit;
                v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_prodposit);
                v_produtos_positivados := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);
                v_conteudo_email := replace(v_conteudo_email_original, '__USUARIO__', 'Filial ' || lf.codigo || '-' || lf.cidade);
                v_tab_html := primeiros_registros(v_cmd_primeiros);
                v_conteudo_email := replace(v_conteudo_email, '__PRIMEIROS_REGISTROS__', '__TABHTML__');
                v_conteudo_email := replace(v_conteudo_email, '__PRODUTOS_ATIVOS__', v_produtos_ativos);
                v_conteudo_email := replace(v_conteudo_email, '__PRODUTOS_POSITIVADOS__', v_produtos_positivados);
                v_conteudo_email := replace(v_conteudo_email, '__PRODUTOS_NAO_POSITIVADOS__',(v_produtos_ativos - v_produtos_positivados));
                IF ( v_produtos_ativos - v_produtos_positivados ) > 0 THEN
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                        pr_email_para => lower(nvl(lf.email, 'jumbo.ti@jumboalimentos.com.br')), 
                        pr_email_copias_para => 'jumbo.ti@jumboalimentos.com.br;felipe@jumboalimentos.com.br', 
                        pr_titulo_email => v_titulo_email, 
                        pr_corpo_email => v_conteudo_email, 
                        pr_nome_anexo => 'produtos.csv', 
                        pr_comando_sql_anexo => v_cmd, 
                        pr_tab_html => v_tab_html
                    );
                END IF;
                v_nome_arq := 'naoposit_f' || lf.codigo || '_' || v_dtcriacao || '.xlsx';
                FOR ls IN (
                    SELECT DISTINCT
                        s.codsupervisor, 
                        s.nome, 
                        u.codfilial, 
                        s.email
                    FROM
                        jumbo.pcsuperv   s
                        JOIN jumbo.pcusuari   u ON ( u.codsupervisor = s.codsupervisor )
                    WHERE
                        u.codfilial = lf.codigo
                        AND ( 
                            ( 
                                ( 
                                    p_codsuperv IS NOT NULL 
                                    AND p_codsuperv <> 0 
                                ) 
                                AND s.codsupervisor = p_codsuperv 
                            ) OR ( 
                                ( 
                                    p_codsuperv IS NULL 
                                    OR p_codsuperv = 0 
                                ) 
                                AND 1 = 1 
                            ) 
                        ) 
                        AND EXISTS (
                            SELECT
                                1
                            FROM
                                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia s
                            WHERE
                                s.codentidade = u.codusur 
                                AND lower(TRIM(s.visao)) = 'produto' 
                                AND lower(TRIM(s.unidade)) = 'mix' 
                                AND s.ano = to_char(sysdate, 'yyyy') 
                                AND s.mes = upper(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM'))))
                        )
                    ORDER BY
                        1
                ) LOOP
                    v_condic_jum := 'select codusur from jumbo.pcusuari where pcusuari.codsupervisor = ' || ls.codsupervisor 
                        || ' union select nvl(codusur_erp,codusur_na_origem) from __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuarios_origem where nvl(__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codsupervisor_erp,__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codsupervisororigem) = ' || ls.codsupervisor;
                    v_cmd := replace(v_cmd_prodnaoposit_original, '__CONDICCODUSUR__', v_condic_jum);
                    v_cmd_primeiros := replace(v_cmd_primeiros_original, '__CONDICCODUSUR__', v_condic_jum);
                    v_cmd_prodposit := replace(v_cmd_prodposit_original, '__CONDICCODUSUR__', v_condic_jum);
                    v_cmd_ativos := replace(v_cmd_ativos_original, '__CONDICCODUSUR__', v_condic_jum);
                    v_comando_corrente := v_cmd_ativos;
                    v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_ativos);
                    v_produtos_ativos := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);
                    v_comando_corrente := v_cmd_prodposit;
                    v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_prodposit);
                    v_produtos_positivados := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);
                    v_conteudo_email := replace(v_conteudo_email_original, '__USUARIO__', 'Supervisor ' || ls.codsupervisor || '-' || ls.nome);
                    v_tab_html := primeiros_registros(v_cmd_primeiros);
                    v_conteudo_email := replace(v_conteudo_email, '__PRIMEIROS_REGISTROS__', '__TABHTML__');
                    v_conteudo_email := replace(v_conteudo_email, '__PRODUTOS_ATIVOS__', v_produtos_ativos);
                    v_conteudo_email := replace(v_conteudo_email, '__PRODUTOS_POSITIVADOS__', v_produtos_positivados);
                    v_conteudo_email := replace(v_conteudo_email, '__PRODUTOS_NAO_POSITIVADOS__',(v_produtos_ativos - v_produtos_positivados));
                    IF ( v_produtos_ativos - v_produtos_positivados ) > 0 THEN
                        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                            pr_email_para => lower(nvl(ls.email, 'jumbo.ti@jumboalimentos.com.br;' || lf.email)), 
                            pr_email_copias_para => 'jumbo.ti@jumboalimentos.com.br;felipe@jumboalimentos.com.br', 
                            pr_titulo_email => v_titulo_email, 
                            pr_corpo_email => v_conteudo_email, 
                            pr_nome_anexo => 'produtos.csv', 
                            pr_comando_sql_anexo => v_cmd, 
                            pr_tab_html => v_tab_html
                        );
                    END IF;
                    v_nome_arq := 'naoposit_f' || lf.codigo || '_s' || ls.codsupervisor || '_' || v_dtcriacao || '.xlsx';
                    FOR lu IN (
                        SELECT
                            u.codusur, u.nome, CASE
                                WHEN u.codusur IN (
                                    106
                                ) THEN
                                    (
                                        SELECT
                                            u2.email
                                        FROM
                                            jumbo.pcusuari u2
                                        WHERE
                                            u2.codusur = 130
                                    )
                                ELSE
                                    u.email
                            END AS email
                        FROM
                            jumbo.pcusuari u
                        WHERE
                            u.codusur > 100 AND u.codusur < 300 AND u.codusur NOT IN (
                                150, 251
                            ) 
                            AND u.codfilial = lf.codigo 
                            AND u.codsupervisor = ls.codsupervisor 
                            AND ( 
                                ( 
                                    ( 
                                        p_codusur IS NOT NULL 
                                        AND p_codusur <> 0 
                                    ) 
                                    AND u.codusur = p_codusur 
                                ) 
                                OR ( 
                                    ( 
                                        p_codusur IS NULL 
                                        OR p_codusur = 0 
                                    ) 
                                    AND 1 = 1 
                                ) 
                            ) 
                            AND nvl(u.bloqueio, 'x') <> 'S' 
                            AND u.dttermino IS NULL 
                            AND EXISTS (
                                SELECT
                                    1
                                FROM
                                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia s
                                WHERE
                                    s.codentidade = u.codusur 
                                    AND lower(TRIM(s.visao)) = 'produto' 
                                    AND lower(TRIM(s.unidade)) = 'mix'
                                    AND s.ano = to_char(sysdate, 'yyyy') 
                                    AND s.mes = upper(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM'))))
                            )
                        ORDER BY
                            1
                    ) LOOP
                        v_condic_jum := lu.codusur;
                        v_cmd := replace(v_cmd_prodnaoposit_original, '__CONDICCODUSUR__', v_condic_jum);
                        v_cmd_primeiros := replace(v_cmd_primeiros_original, '__CONDICCODUSUR__', v_condic_jum);
                        v_cmd_prodposit := replace(v_cmd_prodposit_original, '__CONDICCODUSUR__', v_condic_jum);
                        v_cmd_ativos := replace(v_cmd_ativos_original, '__CONDICCODUSUR__', v_condic_jum);
                        v_comando_corrente := v_cmd_ativos;
                        v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_ativos);
                        v_produtos_ativos := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);
                        v_comando_corrente := v_cmd_prodposit;
                        v_dados_temp := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_dados(v_cmd_prodposit);
                        v_produtos_positivados := __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql.obter_primeiro_valor(v_dados_temp);
                        v_conteudo_email := replace(v_conteudo_email_original, '__USUARIO__', 'RCA ' || lu.codusur || '-' || lu.nome);
                        v_tab_html := primeiros_registros(v_cmd_primeiros);
                        v_conteudo_email := replace(v_conteudo_email, '__PRIMEIROS_REGISTROS__', '__TABHTML__');
                        v_conteudo_email := replace(v_conteudo_email, '__PRODUTOS_ATIVOS__', v_produtos_ativos);
                        v_conteudo_email := replace(v_conteudo_email, '__PRODUTOS_POSITIVADOS__', v_produtos_positivados);
                        v_conteudo_email := replace(v_conteudo_email, '__PRODUTOS_NAO_POSITIVADOS__',(v_produtos_ativos - v_produtos_positivados));
                        IF ( v_produtos_ativos - v_produtos_positivados ) > 0 THEN
                            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                                pr_email_para => lower(nvl(lu.email, 'jumbo.ti@jumboalimentos.com.br' || ';' || ls.email || ';' || lf.email)), 
                                pr_email_copias_para => 'jumbo.ti@jumboalimentos.com.br', 
                                pr_titulo_email => v_titulo_email, 
                                pr_corpo_email => v_conteudo_email, 
                                pr_nome_anexo => 'produtos.csv', 
                                pr_comando_sql_anexo => v_cmd, 
                                pr_tab_html => v_tab_html
                            );
                        END IF;
                        v_nome_arq := 'naoposit_f' || lf.codigo || '_s' || ls.codsupervisor || '_r' || lu.codusur || '_' || v_dtcriacao || '.xlsx';
                    END LOOP;
                END LOOP;
            END LOOP;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_vlrs => substr(v_comando_corrente, 1, 4000), p_linha => $$plsql_line);
    END relpro_naoposit;
    PROCEDURE relobjetivos (
        p_codfilial NUMBER DEFAULT NULL, 
        p_codsuperv NUMBER DEFAULT NULL, 
        p_codusur NUMBER DEFAULT NULL
    ) AS        
        v_cmd_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_primeiros_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_cliposit_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_cliposit VARCHAR2(32000) DEFAULT NULL;
        v_cmd_ativos_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_ativos VARCHAR2(32000) DEFAULT NULL;
        v_cmd VARCHAR2(32000) DEFAULT NULL;
        v_cmd_primeiros VARCHAR2(32000) DEFAULT NULL;
        v_nome_dir VARCHAR2(100) DEFAULT 'DIR_REL';
        v_nome_arq VARCHAR2(255) DEFAULT NULL;
        v_dtcriacao VARCHAR2(255) DEFAULT NULL;
        v_condic_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_inicial_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_inicial_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_filial_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_filial_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_superv_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_superv_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_rca_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_rca_aur VARCHAR2(4000) DEFAULT NULL;
        v_cursor_id INTEGER;
        v_linha VARCHAR2(32000) DEFAULT NULL;
        t_col_cnt INTEGER;
        v_titulo_email VARCHAR2(4000) DEFAULT 'Campanha de Incentivos';
        v_conteudo_email_original VARCHAR2(32000) NULL;
        v_conteudo_email VARCHAR2(32000) NULL;
        v_numtemp NUMBER;
        v_strtemp VARCHAR2(32000) DEFAULT NULL;
        v_colstr VARCHAR2(500) DEFAULT NULL;
        v_datetemp DATE;
        t_desc_tab dbms_sql.desc_tab2;
        v_dados_temp ttabstr;
        v_cols tcnjstr;
        v_clientes_ativos NUMBER DEFAULT 0;
        v_clientes_positivados NUMBER DEFAULT 0;
        v_comando_corrente CLOB;
        v_nome_anexo VARCHAR2(255) DEFAULT 'incentivos.csv';
        v_tab_html ttabela;
    BEGIN
        v_dtcriacao := to_char(sysdate, 'ddmmyyyy');
        v_cmd_original := '
        WITH valores AS (
            SELECT
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codentidade    AS rca,
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao   AS codprod,
                CASE
                    WHEN instr(lower(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao), ''g'') > 0 THEN
                        (
                            SELECT
                                g.nomegrupoprod
                            FROM
                                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv g
                            WHERE
                                g.codvisivelgrupo = __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao
                        )
                    ELSE
                        (
                            SELECT
                                p.descricao
                            FROM
                                jumbo.pcprodut p
                            WHERE
                                p.codprod = __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao
                        )
                END AS descricao,
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor,
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado,
                CASE
                    WHEN __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado / DECODE(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor, 0, 1, NULL, 1, __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor) * 100 > percmaxating THEN
                        percmaxating
                    ELSE
                        __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado / DECODE(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor, 0, 1, NULL, 1, __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor) * 100
                END AS percating,
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor *
                    CASE
                        WHEN __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado / DECODE(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor, 0, 1, NULL, 1, __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor) * 100 > percmaxating THEN
                            percmaxating
                        ELSE
                            __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado / DECODE(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor, 0, 1, NULL, 1, __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor) * 100
                    END
                AS realizado_percmax,
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codgrupogiro
                || ''-''
                || (
                    SELECT
                        nomegrupogiro
                    FROM
                        __FNV_GET_PREFIXOBJECTSDB__gruposgiro
                    WHERE
                        __FNV_GET_PREFIXOBJECTSDB__gruposgiro.codgrupogiro = __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codgrupogiro
                ) AS grupogiro,
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.percmaxating
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia
            WHERE
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codcampanhasinergia = 0
                AND __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.mes
                    || ''/''
                    || __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.ano IN (
                    ''' || upper(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM')))) || '''
                    || ''/''
                    || ' || to_char(sysdate, 'yyyy') || ',
                    ''' || upper(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM')))) || '''
                    || ''/''
                    || ' || to_char(sysdate, 'yyyy') || '
                )
                AND lower(TRIM(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.unidade)) <> ''mix''
                AND __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codentidade in (__CONDICCODUSUR__)
        )
        SELECT
            codprod,
            descricao,
            SUM(valor) as objetivo,
            SUM(realizado) as realizado,
            round(( SUM(realizado_percmax) / SUM(valor) ) * ( SUM(valor) ) / 100,2) as realizadotrava,
            round(SUM(realizado_percmax) / SUM(valor),2) AS percating,
            grupogiro,
            percmaxating
        FROM
            valores
        WHERE
            rca in (__CONDICCODUSUR__)
        GROUP BY
            codprod,
            descricao,
            grupogiro,
            percmaxating
        ORDER BY
            3 DESC ';
        v_cmd_primeiros_original := '
        WITH valores AS (
            SELECT
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codentidade    AS rca,
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao   AS codprod,
                CASE
                    WHEN instr(lower(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao), ''g'') > 0 THEN
                        (
                            SELECT
                                g.nomegrupoprod
                            FROM
                                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__gruposprodequiv g
                            WHERE
                                g.codvisivelgrupo = __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao
                        )
                    ELSE
                        (
                            SELECT
                                p.descricao
                            FROM
                                jumbo.pcprodut p
                            WHERE
                                p.codprod = __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.coditemvisao
                        )
                END AS descricao,
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor,
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado,
                CASE
                    WHEN __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado / DECODE(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor, 0, 1, NULL, 1, __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor) * 100 > percmaxating THEN
                        percmaxating
                    ELSE
                        __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado / DECODE(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor, 0, 1, NULL, 1, __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor) * 100
                END AS percating,
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor *
                    CASE
                        WHEN __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado / DECODE(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor, 0, 1, NULL, 1, __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor) * 100 > percmaxating THEN
                            percmaxating
                        ELSE
                            __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.realizado / DECODE(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor, 0, 1, NULL, 1, __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.valor) * 100
                    END
                AS realizado_percmax,
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codgrupogiro
                || ''-''
                || (
                    SELECT
                        nomegrupogiro
                    FROM
                        __FNV_GET_PREFIXOBJECTSDB__gruposgiro
                    WHERE
                        __FNV_GET_PREFIXOBJECTSDB__gruposgiro.codgrupogiro = __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codgrupogiro
                ) AS grupogiro,
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.percmaxating
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia
            WHERE
                __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codcampanhasinergia = 0
                AND __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.mes
                    || ''/''
                    || __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.ano IN (
                    ''' || upper(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM')))) || '''
                    || ''/''
                    || ' || to_char(sysdate, 'yyyy') || ',
                    ''' || upper(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM')))) || '''
                    || ''/''
                    || ' || to_char(sysdate, 'yyyy') || '
                )
                AND lower(TRIM(__FNV_GET_PREFIXOBJECTSDB__objetivossinergia.unidade)) <> ''mix''
                AND __FNV_GET_PREFIXOBJECTSDB__objetivossinergia.codentidade in (__CONDICCODUSUR__)
        )
        SELECT
            codprod,
            descricao,
            SUM(valor) as objetivo,
            SUM(realizado) as realizado
        FROM
            valores
        WHERE
            rca in (__CONDICCODUSUR__)
        GROUP BY
            codprod,
            descricao
        ORDER BY
            3 DESC ';
        v_condic_inicial_jum := '';
        v_condic_inicial_aur := '';
        v_condic_jum := 'select codusur from jumbo.pcusuari union select nvl(codusur_erp,codusur_na_origem) from __FNV_GET_PREFIXOBJECTSDB__usuarios_origem';
        v_cmd := replace(v_cmd_original, '__CONDICCODUSUR__', v_condic_jum);
        v_cmd_primeiros := replace(v_cmd_primeiros_original, '__CONDICCODUSUR__', v_condic_jum);
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) 
            AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo', p_owner => '__FNV_GET_NOMESCHEMA__') ) 
            AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_conteudo_email_original := utl_tcp.crlf || 'Car&iacute;ssimo __USUARIO__,' 
                || utl_tcp.crlf || utl_tcp.crlf || '<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Segue em anexo sua campanha de incentivo. ' 
                || utl_tcp.crlf || utl_tcp.crlf || '<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A t&iacute;tulo de conhecimento. ' 
                || utl_tcp.crlf || utl_tcp.crlf || '<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Se atentar aos produtos n&atilde;o positivados nesse m&ecirc;s, principalmente os que tem os maiores volumes de incentivo, assim como produtos de giro.' 
                || utl_tcp.crlf || utl_tcp.crlf || utl_tcp.crlf || '<br /><br />Veja abaixo alguns destes que est&atilde;o no anexo:(os valores est&atilde;o em KG)<br /> <br />' 
                || utl_tcp.crlf || utl_tcp.crlf || '__PRIMEIROS_REGISTROS__' || utl_tcp.crlf;
            v_conteudo_email := replace(v_conteudo_email_original, '__USUARIO__', 'JUMBO ALIMENTOS');
            v_tab_html := primeiros_registros(v_cmd_primeiros);
            v_conteudo_email := replace(v_conteudo_email, '__PRIMEIROS_REGISTROS__', '__TABHTML__');
            --dbms_output.put_line(v_cmd); return;
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                pr_email_para => 'felipe@jumboalimentos.com.br', 
                --pr_email_para => 'jumbo.ti@jumboalimentos.com.br', 
                pr_email_copias_para => 'jumbo.ti@jumboalimentos.com.br', 
                pr_titulo_email => v_titulo_email, 
                pr_corpo_email => v_conteudo_email, 
                pr_nome_anexo => v_nome_anexo, 
                pr_comando_sql_anexo => v_cmd, 
                pr_tab_html => v_tab_html
            );
            --return;
            FOR lf IN (
                SELECT
                    f.codigo, 
                    f.cidade, 
                    f.email
                FROM
                    jumbo.pcfilial f
                WHERE
                    ( 
                        ( 
                            ( 
                                p_codfilial IS NOT NULL 
                                AND p_codfilial <> 0 
                            ) 
                            AND f.codigo = p_codfilial 
                        ) 
                        OR ( 
                            ( 
                                p_codfilial IS NULL 
                                OR p_codfilial = 0 
                            ) 
                            AND 1 = 1 
                        ) 
                    ) 
                    AND f.codigo <> 99
                ORDER BY 1
            ) LOOP
                v_condic_jum := 'select codusur from jumbo.pcusuari where pcusuari.codfilial = ' || lf.codigo 
                    || ' union select nvl(codusur,codusur_na_origem) from __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuarios_origem where nvl(__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codfilial_erp,__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codfilialorigem) = ' || lf.codigo;
                v_cmd := replace(v_cmd_original, '__CONDICCODUSUR__', v_condic_jum);
                v_cmd_primeiros := replace(v_cmd_primeiros_original, '__CONDICCODUSUR__', v_condic_jum);
                v_conteudo_email := replace(v_conteudo_email_original, '__USUARIO__', 'Filial ' || lf.codigo || '-' || lf.cidade);
                v_tab_html := primeiros_registros(v_cmd_primeiros);
                v_conteudo_email := replace(v_conteudo_email, '__PRIMEIROS_REGISTROS__', '__TABHTML__');
                --dbms_output.put_line(v_cmd); return;
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                    pr_email_para => lower(nvl(lf.email, 'jumbo.ti@jumboalimentos.com.br')), 
                    pr_email_copias_para => 'jumbo.ti@jumboalimentos.com.br;felipe@jumboalimentos.com.br', 
                    --pr_email_para => 'jumbo.ti@jumboalimentos.com.br',  
                    pr_titulo_email => v_titulo_email, 
                    pr_corpo_email => v_conteudo_email, 
                    pr_nome_anexo => v_nome_anexo, 
                    pr_comando_sql_anexo => v_cmd, 
                    pr_tab_html => v_tab_html
                );
                FOR ls IN (
                    SELECT DISTINCT
                        s.codsupervisor, s.nome, u.codfilial, s.email
                    FROM
                        jumbo.pcsuperv   s
                        JOIN jumbo.pcusuari   u ON ( u.codsupervisor = s.codsupervisor )
                    WHERE
                        u.codfilial = lf.codigo
                        AND ( 
                            ( 
                                ( 
                                    p_codsuperv IS NOT NULL 
                                    AND p_codsuperv <> 0 
                                ) 
                                AND s.codsupervisor = p_codsuperv 
                            ) 
                            OR ( 
                                ( 
                                    p_codsuperv IS NULL 
                                    OR p_codsuperv = 0 
                                ) 
                                AND 1 = 1 
                            ) 
                        ) 
                        AND EXISTS (
                            SELECT
                                1
                            FROM
                                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia s
                            WHERE
                                s.codentidade = u.codusur 
                                AND lower(TRIM(s.visao)) = 'produto' 
                                AND lower(TRIM(s.unidade)) = 'kg' 
                                AND s.ano = to_char(sysdate, 'yyyy') 
                                AND s.mes = upper(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM'))))
                        )
                    ORDER BY
                        1
                ) LOOP
                    v_condic_jum := 'select codusur from jumbo.pcusuari where pcusuari.codsupervisor = ' || ls.codsupervisor 
                        || ' union select nvl(codusur_erp,codusur_na_origem) from __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuarios_origem where nvl(__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codsupervisor_erp,__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codsupervisororigem) = ' || ls.codsupervisor;
                    v_cmd := replace(v_cmd_original, '__CONDICCODUSUR__', v_condic_jum);
                    v_cmd_primeiros := replace(v_cmd_primeiros_original, '__CONDICCODUSUR__', v_condic_jum);
                    v_conteudo_email := replace(v_conteudo_email_original, '__USUARIO__', 'Supervisor ' || ls.codsupervisor || '-' || ls.nome);
                    v_tab_html := primeiros_registros(v_cmd_primeiros);
                    v_conteudo_email := replace(v_conteudo_email, '__PRIMEIROS_REGISTROS__', '__TABHTML__');
                    --dbms_output.put_line(v_cmd); return;
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                        pr_email_para => lower(nvl(ls.email, 'jumbo.ti@jumboalimentos.com.br;' || lf.email)), 
                        pr_email_copias_para => 'jumbo.ti@jumboalimentos.com.br;felipe@jumboalimentos.com.br', 
                        --pr_email_para => 'jumbo.ti@jumboalimentos.com.br', 
                        pr_titulo_email => v_titulo_email, 
                        pr_corpo_email => v_conteudo_email, 
                        pr_nome_anexo => v_nome_anexo, 
                        pr_comando_sql_anexo => v_cmd, 
                        pr_tab_html => v_tab_html
                    );
                    
                    FOR lu IN (
                        SELECT
                            u.codusur, u.nome, CASE
                                WHEN u.codusur IN (
                                    106
                                ) THEN
                                    (
                                        SELECT
                                            u2.email
                                        FROM
                                            jumbo.pcusuari u2
                                        WHERE
                                            u2.codusur = 130
                                    )
                                ELSE
                                    u.email
                            END AS email
                        FROM
                            jumbo.pcusuari u
                        WHERE
                            u.codusur > 100 
                            AND u.codusur < 300 
                            AND u.codusur NOT IN (
                                150, 251
                            ) 
                            AND u.codfilial = lf.codigo 
                            AND u.codsupervisor = ls.codsupervisor 
                            AND ( 
                                ( 
                                    ( 
                                        p_codusur IS NOT NULL 
                                        AND p_codusur <> 0 
                                    ) 
                                    AND u.codusur = p_codusur 
                                ) 
                                OR ( 
                                    ( 
                                        p_codusur IS NULL 
                                        OR p_codusur = 0 
                                    ) 
                                    AND 1 = 1 
                                ) 
                            ) 
                            AND nvl(u.bloqueio, 'x') <> 'S' 
                            AND u.dttermino IS NULL 
                            AND EXISTS (
                                SELECT
                                    1
                                FROM
                                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia s
                                WHERE
                                    s.codentidade = u.codusur 
                                    AND lower(TRIM(s.visao)) = 'produto' 
                                    AND lower(TRIM(s.unidade)) = 'kg' 
                                    AND s.ano = to_char(sysdate, 'yyyy') 
                                    AND s.mes = upper(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM'))))
                            )
                        ORDER BY
                            1
                    ) LOOP
                        v_condic_jum := lu.codusur;
                        v_cmd := replace(v_cmd_original, '__CONDICCODUSUR__', v_condic_jum);
                        v_cmd_primeiros := replace(v_cmd_primeiros_original, '__CONDICCODUSUR__', v_condic_jum);
                        v_conteudo_email := replace(v_conteudo_email_original, '__USUARIO__', 'RCA ' || lu.codusur || '-' || lu.nome);
                        v_tab_html := primeiros_registros(v_cmd_primeiros);
                        v_conteudo_email := replace(v_conteudo_email, '__PRIMEIROS_REGISTROS__', '__TABHTML__');
                        --dbms_output.put_line(v_cmd); return;
                        __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                            pr_email_para => lower(nvl(lu.email, 'jumbo.ti@jumboalimentos.com.br' || ';' || ls.email || ';' || lf.email)), 
                            pr_email_copias_para => 'jumbo.ti@jumboalimentos.com.br', 
                            --pr_email_para => 'jumbo.ti@jumboalimentos.com.br', 
                            pr_titulo_email => v_titulo_email, 
                            pr_corpo_email => v_conteudo_email, 
                            pr_nome_anexo => v_nome_anexo, 
                            pr_comando_sql_anexo => v_cmd, 
                            pr_tab_html => v_tab_html
                        );
                    END LOOP;
                END LOOP;
            END LOOP;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_vlrs => substr(v_comando_corrente, 1, 4000), p_linha => $$plsql_line);
    END relobjetivos;
    PROCEDURE relsemanalsuperv (
        p_codfilial NUMBER DEFAULT NULL, 
        p_codsuperv NUMBER DEFAULT NULL, 
        p_codusur NUMBER DEFAULT NULL
    ) AS        
        v_cmd_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_primeiros_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_cliposit_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_cliposit VARCHAR2(32000) DEFAULT NULL;
        v_cmd_ativos_original VARCHAR2(32000) DEFAULT NULL;
        v_cmd_ativos VARCHAR2(32000) DEFAULT NULL;
        v_cmd VARCHAR2(32767) DEFAULT NULL;
        v_nome_dir VARCHAR2(100) DEFAULT 'DIR_REL';
        v_nome_arq VARCHAR2(255) DEFAULT NULL;
        v_dtcriacao VARCHAR2(255) DEFAULT NULL;
        v_condic_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_inicial_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_inicial_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_filial_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_filial_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_superv_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_superv_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_rca_jum VARCHAR2(4000) DEFAULT NULL;
        v_condic_rca_aur VARCHAR2(4000) DEFAULT NULL;
        v_condic_aur_cli VARCHAR2(32767) DEFAULT NULL;
        v_condic_jum_cli VARCHAR2(32767) DEFAULT NULL;
        v_cursor_id INTEGER;
        v_linha VARCHAR2(32000) DEFAULT NULL;
        t_col_cnt INTEGER;
        v_titulo_email VARCHAR2(4000) DEFAULT 'Supervisor - Posicao semanal da Equipe';
        v_conteudo_email_original VARCHAR2(32000) NULL;
        v_conteudo_email VARCHAR2(32000) NULL;
        v_numtemp NUMBER;
        v_strtemp VARCHAR2(32000) DEFAULT NULL;
        v_colstr VARCHAR2(500) DEFAULT NULL;
        v_datetemp DATE;
        t_desc_tab dbms_sql.desc_tab2;
        v_dados_temp ttabstr;
        v_cols tcnjstr;
        v_clientes_ativos NUMBER DEFAULT 0;
        v_clientes_positivados NUMBER DEFAULT 0;
        v_comando_corrente CLOB;
        v_nome_anexo VARCHAR2(255) DEFAULT 'posicao_equipe.csv';
        v_tab_html ttabela;
    BEGIN
        v_dtcriacao := to_char(sysdate, 'ddmmyyyy');
        v_cmd_original := '
        with objetivos_peso as (
        SELECT
            o.codentidade    AS rca,
            to_char(SUM(nvl(o.valor, 0)),''999G999G990D90'') AS \"objetivo peso\",
            to_char(SUM(
                CASE
                    WHEN o.realizado >(o.valor * o.percmaxating / 100) THEN
                        round(o.valor * o.percmaxating / 100, 2)
                    ELSE
                        o.realizado
                END
            ),''999G999G990D90'') AS \"realizado peso\"
        FROM
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia o
        WHERE
            o.codcampanhasinergia = 0
            AND o.ano = TO_CHAR(SYSDATE, ''yyyy'')
            AND lower(TRIM(o.mes)) = lower(TRIM(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(TO_CHAR(SYSDATE, ''mm'')))))
            AND o.codentidade IN (__CONDICCODUSUR__)
        GROUP BY
            o.codentidade),
        objetivos_mix_cli as (SELECT
            o.codentidade    AS rca,
            SUM(nvl(o.valor, 0)) AS objetivo,
            SUM(
                CASE
                    WHEN o.realizado >(o.valor * o.percmaxating / 100) THEN
                        round(o.valor * o.percmaxating / 100, 2)
                    ELSE
                        o.realizado
                END
            ) AS realizado
        FROM
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia o
        WHERE
            o.codcampanhasinergia = 1
            AND o.ano = TO_CHAR(SYSDATE, ''yyyy'')
            AND lower(TRIM(o.mes)) = lower(TRIM(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(TO_CHAR(SYSDATE, ''mm'')))))
            AND o.codentidade IN (__CONDICCODUSUR__)
        GROUP BY
            o.codentidade),
        objetivos_mix_prod as (SELECT
            o.codentidade    AS rca,
            SUM(nvl(o.valor, 0)) AS objetivo,
            SUM(
                CASE
                    WHEN o.realizado >(o.valor * o.percmaxating / 100) THEN
                        round(o.valor * o.percmaxating / 100, 2)
                    ELSE
                        o.realizado
                END
            ) AS realizado
        FROM
            __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia o
        WHERE
            o.codcampanhasinergia = 2
            AND o.ano = TO_CHAR(SYSDATE, ''yyyy'')
            AND lower(TRIM(o.mes)) = lower(TRIM(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(TO_CHAR(SYSDATE, ''mm'')))))
            AND o.codentidade IN (__CONDICCODUSUR__)
        GROUP BY
            o.codentidade),
            
            
        clientes_jumbo_ativ as (
            SELECT
                c.codusur1,
                c.codcli,
                c.cliente,
                c.fantasia,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) as dtultcomp,
                c.limcred,
                c.bloqueio    
            FROM
                jumbo.pcclient c
                left outer join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem ca on (ca.codcli_erp = c.codcli)    
            where
                c.dtexclusao is null
                and c.codusur1 <> 150
                and c.codcli not in (13519,13363,2848,1919,3829,28309)  
                and c.codusur1 in (__CONDICCODUSUR__)                 
            order by 
                limcred desc,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) desc
        ),
        clientes_aurora_ativ as (
            SELECT
                nvl(c.codusur1,nvl(ca.codvendedor_erp,ca.codvendedororigem)) as cdusur1,
                nvl(c.codcli,po.numcnpjcpf) as codcli,
                nvl(c.cliente,po.nomerazao) as cliente,
                nvl(c.fantasia,po.fantasia) as fantasia,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) as dtultcomp,
                nvl(c.limcred,0) as limcred,
                nvl(c.bloqueio,''N'') as bloqueio
            FROM
                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__cliente_origem ca         
                join __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pessoa_origem po on (po.codpessoa = ca.codpessoaorigem)
                left outer join jumbo.pcclient c on (to_number(regexp_replace(po.numcnpjcpf,''[^0-9]*'')) = to_number(regexp_replace(c.cgcent,''[^0-9]*'')))    
            where
                nvl(c.dtexclusao,null) is null
                and nvl(c.codusur1,nvl(ca.codvendedor_erp,ca.codvendedororigem)) <> 150
                and not exists(select 1 from clientes_jumbo_ativ cj where cj.codcli = ca.codcli_erp)
                AND nvl(c.codcli, ca.codcli_erp) NOT IN (13519,13363,2848,1919,3829,28309)
                and nvl(c.codusur1,nvl(ca.codvendedor_erp,ca.codvendedororigem)) in (__CONDICCODUSUR__)                
            order by 
                limcred desc,
                greatest(nvl(c.dtultcomp,to_date(''01/01/0001'',''dd/mm/yyyy'')),nvl(ca.dtultcompra_origem,to_date(''01/01/0001'',''dd/mm/yyyy''))) desc
        ),
        clientes_juntos_ativ as (
            select * from clientes_jumbo_ativ
            union all 
            select * from clientes_aurora_ativ
        ),RES_CLI_ATIVOS as (
            select 
                codusur1,
                codcli,
                cliente,
                fantasia,
                max(dtultcomp) as dtultcomp,
                limcred,
                bloqueio
            from 
                clientes_juntos_ativ
            group by
                codusur1,
                codcli,
                cliente,
                fantasia,
                limcred,
                bloqueio
        ),            
            
        RES_CLI_ATIVOS_RESUMO AS (
            SELECT
                CODUSUR1,
                COUNT(1) AS QTATIVOS
            FROM 
                RES_CLI_ATIVOS
            GROUP BY 
                CODUSUR1
        )
        
            
        select 
            o.*,
            ca.qtativos as \"Qtde Cli Ativos\",
            cli.objetivo as \"objetivo mix cli\",
            cli.realizado as \"realizado mix cli\",
            prod.objetivo as \"objetivo mix prod\",
            prod.realizado as \"realizado mix prod\"
        from 
            objetivos_peso o
            left outer join objetivos_mix_cli cli on (cli.rca = o.rca)
            left outer join objetivos_mix_prod prod on (prod.rca = o.rca)
            left outer join RES_CLI_ATIVOS_RESUMO ca on (ca.codusur1 = o.rca)
        order by 
            3 desc';
        IF ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet', p_owner => '__FNV_GET_NOMESCHEMA__') ) 
            AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_arquivo', p_owner => '__FNV_GET_NOMESCHEMA__') ) 
            AND ( __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_db.objeto_valido(p_objeto => '__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_sql', p_owner => '__FNV_GET_NOMESCHEMA__') ) THEN
            v_conteudo_email_original := utl_tcp.crlf || 'Car&iacute;ssimo __USUARIO__,' 
                || utl_tcp.crlf || utl_tcp.crlf || '<br /><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Segue as posicoes da sua equipe. <br />' 
                || utl_tcp.crlf || utl_tcp.crlf || '__PRIMEIROS_REGISTROS__' || utl_tcp.crlf;
            v_conteudo_email := replace(v_conteudo_email_original, '__USUARIO__', 'JUMBO ALIMENTOS');
            FOR lf IN (
                SELECT
                    f.codigo, f.cidade, f.email
                FROM
                    jumbo.pcfilial f
                WHERE
                    ( 
                        ( 
                            ( 
                                p_codfilial IS NOT NULL 
                                AND p_codfilial <> 0 
                            ) 
                            AND f.codigo = p_codfilial 
                        ) 
                        OR ( 
                            ( 
                                p_codfilial IS NULL 
                                OR p_codfilial = 0 
                            ) 
                            AND 1 = 1 
                        ) 
                    ) 
                    AND f.codigo <> 99
                ORDER BY 1
            ) LOOP 
                FOR ls IN (
                    SELECT DISTINCT
                        s.codsupervisor, 
                        s.nome, 
                        u.codfilial, 
                        s.email
                    FROM
                        jumbo.pcsuperv   s
                        JOIN jumbo.pcusuari   u ON ( u.codsupervisor = s.codsupervisor )
                    WHERE
                        u.codfilial = lf.codigo
                        AND ( 
                            ( 
                                ( 
                                    p_codsuperv IS NOT NULL 
                                    AND p_codsuperv <> 0 
                                ) 
                                AND s.codsupervisor = p_codsuperv 
                            ) 
                            OR ( 
                                ( 
                                    p_codsuperv IS NULL 
                                    OR p_codsuperv = 0 
                                ) 
                                AND 1 = 1 
                            ) 
                        ) 
                        AND EXISTS (
                            SELECT
                                1
                            FROM
                                __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__objetivossinergia s
                            WHERE
                                s.codentidade = u.codusur 
                                AND s.visao = 'produto'
                                AND s.ano = to_char(sysdate, 'yyyy')
                                AND s.mes = upper(__FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_data.mes_texto(to_number(to_char(sysdate, 'MM'))))
                        )
                    ORDER BY
                        1
                ) LOOP
                    v_condic_jum := 'select codusur from jumbo.pcusuari where pcusuari.codsupervisor = ' || ls.codsupervisor 
                        || ' union select nvl(codusur_erp,codusur_na_origem) from __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__usuarios_origem where nvl(__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codsupervisor_erp,__FNV_GET_PREFIXOBJECTSDB__usuarios_origem.codsupervisororigem) = ' || ls.codsupervisor;
                    v_cmd := replace(v_cmd_original, '__CONDICCODUSUR__', v_condic_jum);                    
                    v_conteudo_email := replace(v_conteudo_email_original, '__USUARIO__', 'Supervisor ' || ls.codsupervisor || '-' || ls.nome);
                    --dbms_output.put_line(v_cmd);return;
                    v_tab_html := primeiros_registros(v_cmd, 100);
                    v_conteudo_email := replace(v_conteudo_email, '__PRIMEIROS_REGISTROS__', '__TABHTML__');                    
                    __FNV_GET_NOMESCHEMA__.__FNV_GET_PREFIXOBJECTSDB__pkg_funcs_internet.enviar_email_com_anexo_dados(
                        pr_email_para => lower(nvl(ls.email, 'jumbo.ti@jumboalimentos.com.br;' || lf.email)), 
                        pr_email_copias_para => 'jumbo.ti@jumboalimentos.com.br;felipe@jumboalimentos.com.br',
                        --pr_email_para => 'jumbo.ti@jumboalimentos.com.br',
                        pr_titulo_email => v_titulo_email, 
                        pr_corpo_email => v_conteudo_email, 
                        pr_nome_anexo => v_nome_anexo, 
                        pr_comando_sql_anexo => v_cmd, 
                        pr_tab_html => v_tab_html
                    );
                    --return;
                END LOOP;
            END LOOP;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_si__FNV_GET_PREFIXOBJECTSDB__.inserir_erro(p_vlrs => substr(v_comando_corrente, 1, 4000), p_linha => $$plsql_line);
    END relsemanalsuperv;
END __FNV_GET_PREFIXOBJECTSDB__pkg_funcs_relatorio;",
        "ordemcriacao":"__AUTOINC__",
        "codsituacaoregistro":1
	}
}